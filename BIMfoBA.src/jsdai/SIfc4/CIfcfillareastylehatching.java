/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcFillAreaStyleHatching

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcfillareastylehatching extends CIfcgeometricrepresentationitem implements EIfcfillareastylehatching {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcfillareastylehatching.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected Object a0; // HatchLineAppearance - current entity - ENTITY IfcCurveStyle
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // StartOfNextHatchLine - current entity - SELECT IfcHatchLineDistanceSelect
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1$$; // current SELECT path indicator
	protected Object a2; // PointOfReferenceHatchLine - current entity - ENTITY IfcCartesianPoint
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a3; // PatternStart - current entity - ENTITY IfcCartesianPoint
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a4; // HatchLineAngle - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// HatchLineAppearance - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// StartOfNextHatchLine - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	protected int a1$$;
	// PointOfReferenceHatchLine - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	// PatternStart - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// HatchLineAngle - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected double a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4311=EXPLICIT_ATTRIBUTE('HatchLineAppearance',#4309,0,#3896,$,.F.);
	//<01> generating methods for consolidated attribute:  HatchLineAppearance
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : HatchLineAppearance, base type: entity IfcCurveStyle
	public static int usedinHatchlineappearance(EIfcfillareastylehatching type, EIfccurvestyle instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testHatchlineappearance(EIfcfillareastylehatching type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfccurvestyle getHatchlineappearance(EIfcfillareastylehatching type) throws SdaiException {
		return (EIfccurvestyle)get_instance(a0);
	}
	public void setHatchlineappearance(EIfcfillareastylehatching type, EIfccurvestyle value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetHatchlineappearance(EIfcfillareastylehatching type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeHatchlineappearance(EIfcfillareastylehatching type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4312=EXPLICIT_ATTRIBUTE('StartOfNextHatchLine',#4309,1,#3153,$,.F.);
	//<01> generating methods for consolidated attribute:  StartOfNextHatchLine
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: StartOfNextHatchLine
	public static int usedinStartofnexthatchline(EIfcfillareastylehatching type, EIfcvector instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public int testStartofnexthatchline(EIfcfillareastylehatching type) throws SdaiException {
		return test_select(a1, a1$$);
	}

	public EEntity getStartofnexthatchline(EIfcfillareastylehatching type) throws SdaiException { // case 1
		return get_instance_select(a1);
	}
	public double getStartofnexthatchline(EIfcfillareastylehatching type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 2
		return get_double_select(a1, a1$$, 2);
	}

	public void setStartofnexthatchline(EIfcfillareastylehatching type, EEntity value) throws SdaiException { // case 1
		a1 = set_instance(a1, value);
	}
	public void setStartofnexthatchline(EIfcfillareastylehatching type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 2
		a1 = set_double_select(value);
		a1$$ = 2;
	}

	public void unsetStartofnexthatchline(EIfcfillareastylehatching type) throws SdaiException {
		a1 = unset_select(a1);
		a1$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeStartofnexthatchline(EIfcfillareastylehatching type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4313=EXPLICIT_ATTRIBUTE('PointOfReferenceHatchLine',#4309,2,#3562,$,.T.);
	//<01> generating methods for consolidated attribute:  PointOfReferenceHatchLine
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : PointOfReferenceHatchLine, base type: entity IfcCartesianPoint
	public static int usedinPointofreferencehatchline(EIfcfillareastylehatching type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testPointofreferencehatchline(EIfcfillareastylehatching type) throws SdaiException {
		return test_instance(a2);
	}
	public EIfccartesianpoint getPointofreferencehatchline(EIfcfillareastylehatching type) throws SdaiException {
		return (EIfccartesianpoint)get_instance(a2);
	}
	public void setPointofreferencehatchline(EIfcfillareastylehatching type, EIfccartesianpoint value) throws SdaiException {
		a2 = set_instance(a2, value);
	}
	public void unsetPointofreferencehatchline(EIfcfillareastylehatching type) throws SdaiException {
		a2 = unset_instance(a2);
	}
	public static jsdai.dictionary.EAttribute attributePointofreferencehatchline(EIfcfillareastylehatching type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4314=EXPLICIT_ATTRIBUTE('PatternStart',#4309,3,#3562,$,.T.);
	//<01> generating methods for consolidated attribute:  PatternStart
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : PatternStart, base type: entity IfcCartesianPoint
	public static int usedinPatternstart(EIfcfillareastylehatching type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testPatternstart(EIfcfillareastylehatching type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfccartesianpoint getPatternstart(EIfcfillareastylehatching type) throws SdaiException {
		return (EIfccartesianpoint)get_instance(a3);
	}
	public void setPatternstart(EIfcfillareastylehatching type, EIfccartesianpoint value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetPatternstart(EIfcfillareastylehatching type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributePatternstart(EIfcfillareastylehatching type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #4315=EXPLICIT_ATTRIBUTE('HatchLineAngle',#4309,4,#2603,$,.F.);
	//<01> generating methods for consolidated attribute:  HatchLineAngle
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: HatchLineAngle, base type: REAL
	public boolean testHatchlineangle(EIfcfillareastylehatching type) throws SdaiException {
		return test_double(a4);
	}
	public double getHatchlineangle(EIfcfillareastylehatching type) throws SdaiException {
		return get_double(a4);
	}
	public void setHatchlineangle(EIfcfillareastylehatching type, double value) throws SdaiException {
		a4 = set_double(value);
	}
	public void unsetHatchlineangle(EIfcfillareastylehatching type) throws SdaiException {
		a4 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeHatchlineangle(EIfcfillareastylehatching type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_select(a1);
			a1$$ = 0;
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getMixed(1,a1$, this);
		a1$$ = av.entityValues[0].getSelectNumber();
		a2 = av.entityValues[0].getInstance(2, this, a2$);
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getDouble(4);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_select(a1);
			a1$$ = 0;
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getMixed(1,a1$, this);
		a1$$ = av.entityValues[0].getSelectNumber();
		a2 = av.entityValues[0].getInstance(2, this, a2$);
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getDouble(4);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcFillAreaStyleHatching
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setMixed(1, a1, a1$, a1$$);
		av.entityValues[0].setInstance(2, a2);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setDouble(4, a4);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcFillAreaStyleHatching
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setMixed(1, a1, a1$, a1$$);
		av.entityValues[0].setInstance(2, a2);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setDouble(4, a4);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcfillareastylehatchingRefhatchline2d(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(a2$)).getAttribute(jsdai.SIfc4.CIfccartesianpoint.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)))).getLogical());
	}
	public int rIfcfillareastylehatchingPatternstart2d(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(a3$)).getAttribute(jsdai.SIfc4.CIfccartesianpoint.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)))).getLogical());
	}
}
