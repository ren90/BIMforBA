/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTable

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctable extends CEntity implements EIfctable {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctable.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfctablerow a1; // Rows - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfctablecolumn a2; // Columns - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// NumberOfCellsInRow: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// NumberOfHeadings: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// NumberOfDataRows: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Rows - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfctablerow a1;
	// Columns - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfctablecolumn a2;
	// NumberOfCellsInRow - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// NumberOfHeadings - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// NumberOfDataRows - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a1, old, newer);
		changeReferencesAggregate(a2, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a1, old, newer);
		changeReferencesAggregate(a2, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6063=EXPLICIT_ATTRIBUTE('Name',#6061,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfctable type) throws SdaiException {
		return test_string(a0);
	}
	public String getName(EIfctable type) throws SdaiException {
		return get_string(a0);
	}
	public void setName(EIfctable type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetName(EIfctable type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfctable type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #6064=EXPLICIT_ATTRIBUTE('Rows',#6061,1,#7164,$,.T.);
	//<01> generating methods for consolidated attribute:  Rows
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Rows, base type: LIST OF ENTITY
	public static int usedinRows(EIfctable type, EIfctablerow instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testRows(EIfctable type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfctablerow getRows(EIfctable type) throws SdaiException {
		return (AIfctablerow)get_aggregate(a1);
	}
	public AIfctablerow createRows(EIfctable type) throws SdaiException {
		a1 = (AIfctablerow)create_aggregate_class(a1, a1$,  AIfctablerow.class, 0);
		return a1;
	}
	public void unsetRows(EIfctable type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeRows(EIfctable type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6065=EXPLICIT_ATTRIBUTE('Columns',#6061,2,#7165,$,.T.);
	//<01> generating methods for consolidated attribute:  Columns
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Columns, base type: LIST OF ENTITY
	public static int usedinColumns(EIfctable type, EIfctablecolumn instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testColumns(EIfctable type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfctablecolumn getColumns(EIfctable type) throws SdaiException {
		return (AIfctablecolumn)get_aggregate(a2);
	}
	public AIfctablecolumn createColumns(EIfctable type) throws SdaiException {
		a2 = (AIfctablecolumn)create_aggregate_class(a2, a2$,  AIfctablecolumn.class, 0);
		return a2;
	}
	public void unsetColumns(EIfctable type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeColumns(EIfctable type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #6066=DERIVED_ATTRIBUTE('NumberOfCellsInRow',#6061,0,#2,$);
	//<01> generating methods for consolidated attribute:  NumberOfCellsInRow
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: NumberOfCellsInRow, base type: INTEGER
	public boolean testNumberofcellsinrow(EIfctable type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getNumberofcellsinrow(EIfctable type, SdaiContext _context) throws SdaiException {




//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute(jsdai.SIfc4.CIfctablerow.attributeRowcells(null), _context))
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute(jsdai.SIfc4.CIfctablerow.attributeRowcells(null), _context)));
	}
	public int getNumberofcellsinrow(EIfctable type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getNumberofcellsinrow((EIfctable)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeNumberofcellsinrow(EIfctable type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #6067=DERIVED_ATTRIBUTE('NumberOfHeadings',#6061,1,#2,$);
	//<01> generating methods for consolidated attribute:  NumberOfHeadings
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: NumberOfHeadings, base type: INTEGER
	public boolean testNumberofheadings(EIfctable type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getNumberofheadings(EIfctable type, SdaiContext _context) throws SdaiException {


						
						Value _internal_aggregate_source314 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$));
						Value _result312 = Value.alloc(_internal_aggregate_source314).create();
						if (_internal_aggregate_source314.getActualJavaType() != Value.INDETERMINATE) {
							for (int _i313 = 1; _i313 <= _internal_aggregate_source314.getMemberCount(); _i313++) {
								Value _implicit_73_Temp = _internal_aggregate_source314.getByIndex(_i313);
								if (_implicit_73_Temp.getAttribute("IsHeading", _context).getLogical() == 2) {
									_result312.addMember(_context, _implicit_73_Temp);
								} else
								if (_internal_aggregate_source314.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
									_implicit_73_Temp.unset();
									_result312.addMember(_context, _implicit_73_Temp);
								}
							}
						} else {
							_result312.unset();
						}

//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result312)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result312));
	}
	public int getNumberofheadings(EIfctable type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getNumberofheadings((EIfctable)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeNumberofheadings(EIfctable type) throws SdaiException {
		return d1$;
	}

	//going through all the attributes: #6068=DERIVED_ATTRIBUTE('NumberOfDataRows',#6061,2,#2,$);
	//<01> generating methods for consolidated attribute:  NumberOfDataRows
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: NumberOfDataRows, base type: INTEGER
	public boolean testNumberofdatarows(EIfctable type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getNumberofdatarows(EIfctable type, SdaiContext _context) throws SdaiException {


						
						Value _internal_aggregate_source318 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$));
						Value _result316 = Value.alloc(_internal_aggregate_source318).create();
						if (_internal_aggregate_source318.getActualJavaType() != Value.INDETERMINATE) {
							for (int _i317 = 1; _i317 <= _internal_aggregate_source318.getMemberCount(); _i317++) {
								Value _implicit_74_Temp = _internal_aggregate_source318.getByIndex(_i317);
								if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(_implicit_74_Temp.getAttribute("IsHeading", _context)).getLogical() == 2) {
									_result316.addMember(_context, _implicit_74_Temp);
								} else
								if (_internal_aggregate_source318.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
									_implicit_74_Temp.unset();
									_result316.addMember(_context, _implicit_74_Temp);
								}
							}
						} else {
							_result316.unset();
						}

//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result316)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result316));
	}
	public int getNumberofdatarows(EIfctable type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getNumberofdatarows((EIfctable)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeNumberofdatarows(EIfctable type) throws SdaiException {
		return d2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = (AIfctablerow)av.entityValues[0].getInstanceAggregate(1, a1$, this);
		a2 = (AIfctablecolumn)av.entityValues[0].getInstanceAggregate(2, a2$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = (AIfctablerow)av.entityValues[0].getInstanceAggregate(1, a1$, this);
		a2 = (AIfctablecolumn)av.entityValues[0].getInstanceAggregate(2, a2$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcTable
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setInstanceAggregate(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcTable
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setInstanceAggregate(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfctableWr2(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(d1$))), Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(d1$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)))).getLogical());
	}
	public int rIfctableWr1(SdaiContext _context) throws SdaiException {
	





									
									Value _internal_aggregate_source322 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$));
									Value _result320 = Value.alloc(_internal_aggregate_source322).create();
									if (_internal_aggregate_source322.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i321 = 1; _i321 <= _internal_aggregate_source322.getMemberCount(); _i321++) {
											Value _implicit_75_Temp = _internal_aggregate_source322.getByIndex(_i321);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(_implicit_75_Temp.getAttribute("RowCells", _context)), Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifctablerow).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("rowcells", _context))).getLogical() == 2) {
												_result320.addMember(_context, _implicit_75_Temp);
											} else
											if (_internal_aggregate_source322.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_75_Temp.unset();
												_result320.addMember(_context, _implicit_75_Temp);
											}
										}
									} else {
										_result320.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result320), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
