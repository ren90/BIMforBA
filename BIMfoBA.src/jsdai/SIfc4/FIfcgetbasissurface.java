/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcGetBasisSurface

package jsdai.SIfc4;
import jsdai.lang.*;








public class FIfcgetbasissurface {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_C;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_Surfs;
	Value _e_N;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_C) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_C = Value.alloc(jsdai.SIfc4.SIfc4._st_IfcCurveOnSurface).set(_e_C);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_Surfs = Value.alloc(jsdai.SIfc4.SIfc4._st_generalset_0_2_ifcsurface);
		_e_N = Value.alloc(ExpressTypes.INTEGER_TYPE);
		// end of initialization of local variables





																								_e_Surfs.create();



																								if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCPCURVE", "IFC4"), _nonvar__e_C.typeOfV(_context)).getLogical() == 2) {																								
																									Value _elements425 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
																									_elements425.addMember(_context, _nonvar__e_C.groupReference(_context, jsdai.SIfc4.CIfcpcurve.class).getAttribute(jsdai.SIfc4.CIfcpcurve.attributeBasissurface(null), _context));
																									_e_Surfs.set(_context, _elements425);
																								} else {																								
																									if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCCOMPOSITECURVEONSURFACE", "IFC4"), _nonvar__e_C.typeOfV(_context)).getLogical() == 2) {																									
																										_e_N.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_nonvar__e_C.groupReference(_context, jsdai.SIfc4.CIfccompositecurve.class).getAttribute(jsdai.SIfc4.CIfccompositecurve.attributeSegments(null), _context)));																											
																										_e_Surfs.set(_context, (new jsdai.SIfc4.FIfcgetbasissurface()).run(_context, _nonvar__e_C.groupReference(_context, jsdai.SIfc4.CIfccompositecurve.class).getAttribute(jsdai.SIfc4.CIfccompositecurve.attributeSegments(null), _context).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute(jsdai.SIfc4.CIfccompositecurvesegment.attributeParentcurve(null), _context)));																																																									
																										if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_N, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).getLogical() == 2) {																										
																											Value _end426 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(_e_N);
																											Value _step426 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
																											for (Value _implicit_101_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_101_i, _end426).getLogical() == 2;_implicit_101_i.inc(_step426)) {																											
																												_e_Surfs.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).mulOrIntersect(_context, _e_Surfs, (new jsdai.SIfc4.FIfcgetbasissurface()).run(_context, _nonvar__e_C.groupReference(_context, jsdai.SIfc4.CIfccompositecurve.class).getAttribute(jsdai.SIfc4.CIfccompositecurve.attributeSegments(null), _context).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute(jsdai.SIfc4.CIfccompositecurvesegment.attributeParentcurve(null), _context))));
																											} // for - REPEAT
																										}																														
																									}
																								}




		if (true) return Value.alloc(jsdai.SIfc4.SIfc4._st_generalset_0_2_ifcsurface).set(_context, _e_Surfs).check(_context, jsdai.SIfc4.SIfc4._st_generalset_0_2_ifcsurface);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
