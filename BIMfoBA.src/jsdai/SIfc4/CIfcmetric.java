/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcMetric

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcmetric extends CIfcconstraint implements EIfcmetric {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcmetric.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// ConstraintGrade: protected int a2;   ConstraintGrade - java inheritance - ENUMERATION IfcConstraintEnum
	// ConstraintSource: protected String a3;   ConstraintSource - java inheritance - STRING
	// CreatingActor: protected Object a4;   CreatingActor - java inheritance - SELECT IfcActorSelect
	// CreationTime: protected String a5;   CreationTime - java inheritance - STRING
	// UserDefinedGrade: protected String a6;   UserDefinedGrade - java inheritance - STRING
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// PropertiesForConstraint: protected Object  - inverse - java inheritance -  ENTITY IfcResourceConstraintRelationship
	protected int a7; // Benchmark - current entity - ENUMERATION IfcBenchmarkEnum
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected String a8; // ValueSource - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected Object a9; // DataValue - current entity - SELECT IfcMetricValueSelect
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected int a9$$; // current SELECT path indicator
	protected Object a10; // ReferencePath - current entity - ENTITY IfcReference
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// ConstraintGrade - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected int a2;
	// ConstraintSource - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// CreatingActor - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected Object a4;
	// CreationTime - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected String a5;
	// UserDefinedGrade - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected String a6;
	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// PropertiesForConstraint - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Benchmark - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a7;
	// ValueSource - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected String a8;
	// DataValue - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected Object a9;
	protected int a9$$;
	// ReferencePath - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
	protected Object a10;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a9 == old) {
			a9 = newer;
		}
		if (a10 == old) {
			a10 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a9 == old) {
			a9 = newer;
		}
		if (a10 == old) {
			a10 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3747=EXPLICIT_ATTRIBUTE('Name',#3745,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3748=EXPLICIT_ATTRIBUTE('Description',#3745,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3749=EXPLICIT_ATTRIBUTE('ConstraintGrade',#3745,2,#2775,$,.F.);
	//<01> generating methods for consolidated attribute:  ConstraintGrade
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3750=EXPLICIT_ATTRIBUTE('ConstraintSource',#3745,3,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  ConstraintSource
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3751=EXPLICIT_ATTRIBUTE('CreatingActor',#3745,4,#3111,$,.T.);
	//<01> generating methods for consolidated attribute:  CreatingActor
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// -1- methods for SELECT attribute: CreatingActor
	public static int usedinCreatingactor(EIfcconstraint type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	//going through all the attributes: #3752=EXPLICIT_ATTRIBUTE('CreationTime',#3745,5,#2477,$,.T.);
	//<01> generating methods for consolidated attribute:  CreationTime
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3753=EXPLICIT_ATTRIBUTE('UserDefinedGrade',#3745,6,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UserDefinedGrade
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3754=INVERSE_ATTRIBUTE('HasExternalReferences',#3745,0,#4231,$,#4234,#7975,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3755=INVERSE_ATTRIBUTE('PropertiesForConstraint',#3745,1,#5569,$,#5571,#7977,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertiesForConstraint
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4762=EXPLICIT_ATTRIBUTE('Benchmark',#4760,0,#2733,$,.F.);
	//<01> generating methods for consolidated attribute:  Benchmark
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:Benchmark, base type: ENUMERATION
	public boolean testBenchmark(EIfcmetric type) throws SdaiException {
		return test_enumeration(a7);
	}
	public int getBenchmark(EIfcmetric type) throws SdaiException {
		return get_enumeration(a7);
	}
	public void setBenchmark(EIfcmetric type, int value) throws SdaiException {
		a7 = set_enumeration(value, a7$);
	}
	public void unsetBenchmark(EIfcmetric type) throws SdaiException {
		a7 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeBenchmark(EIfcmetric type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #4763=EXPLICIT_ATTRIBUTE('ValueSource',#4760,1,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  ValueSource
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ValueSource, base type: STRING
	public boolean testValuesource(EIfcmetric type) throws SdaiException {
		return test_string(a8);
	}
	public String getValuesource(EIfcmetric type) throws SdaiException {
		return get_string(a8);
	}
	public void setValuesource(EIfcmetric type, String value) throws SdaiException {
		a8 = set_string(value);
	}
	public void unsetValuesource(EIfcmetric type) throws SdaiException {
		a8 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeValuesource(EIfcmetric type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #4764=EXPLICIT_ATTRIBUTE('DataValue',#4760,2,#3165,$,.F.);
	//<01> generating methods for consolidated attribute:  DataValue
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: DataValue
	public static int usedinDatavalue(EIfcmetric type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	public int testDatavalue(EIfcmetric type) throws SdaiException {
		return test_select(a9, a9$$);
	}

	public EEntity getDatavalue(EIfcmetric type) throws SdaiException { // case 1
		return get_instance_select(a9);
	}
	public double getDatavalue(EIfcmetric type, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return get_double_select(a9, a9$$, 2);
	}
	public double getDatavalue(EIfcmetric type, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return get_double_select(a9, a9$$, 3);
	}
	public double getDatavalue(EIfcmetric type, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return get_double_select(a9, a9$$, 4);
	}
	public double getDatavalue(EIfcmetric type, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return get_double_select(a9, a9$$, 5);
	}
	public A_integer getDatavalue(EIfcmetric type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)get_aggregate_select(a9, a9$$, 6);
	}
	public double getDatavalue(EIfcmetric type, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return get_double_select(a9, a9$$, 7);
	}
	public double getDatavalue(EIfcmetric type, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return get_double_select(a9, a9$$, 8);
	}
	public double getDatavalue(EIfcmetric type, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return get_double_select(a9, a9$$, 9);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return get_double_select(a9, a9$$, 10);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return get_double_select(a9, a9$$, 11);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return get_double_select(a9, a9$$, 12);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return get_double_select(a9, a9$$, 13);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return get_double_select(a9, a9$$, 14);
	}
	public double getDatavalue(EIfcmetric type, EIfcenergymeasure node1) throws SdaiException { // case 15
		return get_double_select(a9, a9$$, 15);
	}
	public double getDatavalue(EIfcmetric type, EIfcforcemeasure node1) throws SdaiException { // case 16
		return get_double_select(a9, a9$$, 16);
	}
	public double getDatavalue(EIfcmetric type, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return get_double_select(a9, a9$$, 17);
	}
	public double getDatavalue(EIfcmetric type, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return get_double_select(a9, a9$$, 18);
	}
	public double getDatavalue(EIfcmetric type, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return get_double_select(a9, a9$$, 19);
	}
	public double getDatavalue(EIfcmetric type, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return get_double_select(a9, a9$$, 20);
	}
	public double getDatavalue(EIfcmetric type, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return get_double_select(a9, a9$$, 21);
	}
	public int getDatavalue(EIfcmetric type, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return get_integer_select(a9, a9$$, 22);
	}
	public double getDatavalue(EIfcmetric type, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return get_double_select(a9, a9$$, 23);
	}
	public double getDatavalue(EIfcmetric type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return get_double_select(a9, a9$$, 24);
	}
	public double getDatavalue(EIfcmetric type, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return get_double_select(a9, a9$$, 25);
	}
	public double getDatavalue(EIfcmetric type, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return get_double_select(a9, a9$$, 26);
	}
	public double getDatavalue(EIfcmetric type, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return get_double_select(a9, a9$$, 27);
	}
	public double getDatavalue(EIfcmetric type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return get_double_select(a9, a9$$, 28);
	}
	public double getDatavalue(EIfcmetric type, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return get_double_select(a9, a9$$, 29);
	}
	public double getDatavalue(EIfcmetric type, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return get_double_select(a9, a9$$, 30);
	}
	public double getDatavalue(EIfcmetric type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return get_double_select(a9, a9$$, 31);
	}
	public double getDatavalue(EIfcmetric type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return get_double_select(a9, a9$$, 32);
	}
	public double getDatavalue(EIfcmetric type, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return get_double_select(a9, a9$$, 33);
	}
	public double getDatavalue(EIfcmetric type, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return get_double_select(a9, a9$$, 34);
	}
	public double getDatavalue(EIfcmetric type, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return get_double_select(a9, a9$$, 35);
	}
	public double getDatavalue(EIfcmetric type, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return get_double_select(a9, a9$$, 36);
	}
	public double getDatavalue(EIfcmetric type, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return get_double_select(a9, a9$$, 37);
	}
	public double getDatavalue(EIfcmetric type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return get_double_select(a9, a9$$, 38);
	}
	public double getDatavalue(EIfcmetric type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return get_double_select(a9, a9$$, 39);
	}
	public double getDatavalue(EIfcmetric type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return get_double_select(a9, a9$$, 40);
	}
	public double getDatavalue(EIfcmetric type, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return get_double_select(a9, a9$$, 41);
	}
	public double getDatavalue(EIfcmetric type, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return get_double_select(a9, a9$$, 42);
	}
	public double getDatavalue(EIfcmetric type, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return get_double_select(a9, a9$$, 43);
	}
	public double getDatavalue(EIfcmetric type, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return get_double_select(a9, a9$$, 44);
	}
	public double getDatavalue(EIfcmetric type, EIfcphmeasure node1) throws SdaiException { // case 45
		return get_double_select(a9, a9$$, 45);
	}
	public double getDatavalue(EIfcmetric type, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return get_double_select(a9, a9$$, 46);
	}
	public double getDatavalue(EIfcmetric type, EIfcpowermeasure node1) throws SdaiException { // case 47
		return get_double_select(a9, a9$$, 47);
	}
	public double getDatavalue(EIfcmetric type, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return get_double_select(a9, a9$$, 48);
	}
	public double getDatavalue(EIfcmetric type, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return get_double_select(a9, a9$$, 49);
	}
	public double getDatavalue(EIfcmetric type, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return get_double_select(a9, a9$$, 50);
	}
	public double getDatavalue(EIfcmetric type, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return get_double_select(a9, a9$$, 51);
	}
	public double getDatavalue(EIfcmetric type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return get_double_select(a9, a9$$, 52);
	}
	public double getDatavalue(EIfcmetric type, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return get_double_select(a9, a9$$, 53);
	}
	public double getDatavalue(EIfcmetric type, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return get_double_select(a9, a9$$, 54);
	}
	public double getDatavalue(EIfcmetric type, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return get_double_select(a9, a9$$, 55);
	}
	public double getDatavalue(EIfcmetric type, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return get_double_select(a9, a9$$, 56);
	}
	public double getDatavalue(EIfcmetric type, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return get_double_select(a9, a9$$, 57);
	}
	public double getDatavalue(EIfcmetric type, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return get_double_select(a9, a9$$, 58);
	}
	public double getDatavalue(EIfcmetric type, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return get_double_select(a9, a9$$, 59);
	}
	public double getDatavalue(EIfcmetric type, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return get_double_select(a9, a9$$, 60);
	}
	public double getDatavalue(EIfcmetric type, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return get_double_select(a9, a9$$, 61);
	}
	public double getDatavalue(EIfcmetric type, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return get_double_select(a9, a9$$, 62);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return get_double_select(a9, a9$$, 63);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return get_double_select(a9, a9$$, 64);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return get_double_select(a9, a9$$, 65);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return get_double_select(a9, a9$$, 66);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return get_double_select(a9, a9$$, 67);
	}
	public double getDatavalue(EIfcmetric type, EIfctorquemeasure node1) throws SdaiException { // case 68
		return get_double_select(a9, a9$$, 68);
	}
	public double getDatavalue(EIfcmetric type, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return get_double_select(a9, a9$$, 69);
	}
	public double getDatavalue(EIfcmetric type, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return get_double_select(a9, a9$$, 70);
	}
	public double getDatavalue(EIfcmetric type, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return get_double_select(a9, a9$$, 71);
	}
	public double getDatavalue(EIfcmetric type, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return get_double_select(a9, a9$$, 72);
	}
	public double getDatavalue(EIfcmetric type, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return get_double_select(a9, a9$$, 73);
	}
	public double getDatavalue(EIfcmetric type, EIfcareameasure node1) throws SdaiException { // case 74
		return get_double_select(a9, a9$$, 74);
	}
	public A_double getDatavalue(EIfcmetric type, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)get_aggregate_select(a9, a9$$, 75);
	}
	public double getDatavalue(EIfcmetric type, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return get_double_select(a9, a9$$, 76);
	}
	public double getDatavalue(EIfcmetric type, EIfccountmeasure node1) throws SdaiException { // case 77
		return get_double_select(a9, a9$$, 77);
	}
	public String getDatavalue(EIfcmetric type, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return get_string_select(a9, a9$$, 78);
	}
	public double getDatavalue(EIfcmetric type, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return get_double_select(a9, a9$$, 79);
	}
	public double getDatavalue(EIfcmetric type, EIfclengthmeasure node1) throws SdaiException { // case 80
		return get_double_select(a9, a9$$, 80);
	}
	public double getDatavalue(EIfcmetric type, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return get_double_select(a9, a9$$, 81);
	}
	public double getDatavalue(EIfcmetric type, EIfcmassmeasure node1) throws SdaiException { // case 82
		return get_double_select(a9, a9$$, 82);
	}
	public double getDatavalue(EIfcmetric type, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return get_double_select(a9, a9$$, 83);
	}
	public double getDatavalue(EIfcmetric type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return get_double_select(a9, a9$$, 84);
	}
	public double getDatavalue(EIfcmetric type, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return get_double_select(a9, a9$$, 85);
	}
	public double getDatavalue(EIfcmetric type, EIfcparametervalue node1) throws SdaiException { // case 86
		return get_double_select(a9, a9$$, 86);
	}
	public double getDatavalue(EIfcmetric type, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return get_double_select(a9, a9$$, 87);
	}
	public double getDatavalue(EIfcmetric type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return get_double_select(a9, a9$$, 88);
	}
	public double getDatavalue(EIfcmetric type, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return get_double_select(a9, a9$$, 89);
	}
	public double getDatavalue(EIfcmetric type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return get_double_select(a9, a9$$, 90);
	}
	public double getDatavalue(EIfcmetric type, EIfcratiomeasure node1) throws SdaiException { // case 91
		return get_double_select(a9, a9$$, 91);
	}
	public double getDatavalue(EIfcmetric type, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return get_double_select(a9, a9$$, 92);
	}
	public double getDatavalue(EIfcmetric type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return get_double_select(a9, a9$$, 93);
	}
	public double getDatavalue(EIfcmetric type, EIfctimemeasure node1) throws SdaiException { // case 94
		return get_double_select(a9, a9$$, 94);
	}
	public double getDatavalue(EIfcmetric type, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return get_double_select(a9, a9$$, 95);
	}
	public boolean getDatavalue(EIfcmetric type, EIfcboolean node1) throws SdaiException { // case 96
		return get_boolean_select(a9, a9$$, 96);
	}
	public String getDatavalue(EIfcmetric type, EIfcdate node1) throws SdaiException { // case 97
		return get_string_select(a9, a9$$, 97);
	}
	public String getDatavalue(EIfcmetric type, EIfcdatetime node1) throws SdaiException { // case 98
		return get_string_select(a9, a9$$, 98);
	}
	public String getDatavalue(EIfcmetric type, EIfcduration node1) throws SdaiException { // case 99
		return get_string_select(a9, a9$$, 99);
	}
	public String getDatavalue(EIfcmetric type, EIfcidentifier node1) throws SdaiException { // case 100
		return get_string_select(a9, a9$$, 100);
	}
	public int getDatavalue(EIfcmetric type, EIfcinteger node1) throws SdaiException { // case 101
		return get_integer_select(a9, a9$$, 101);
	}
	public String getDatavalue(EIfcmetric type, EIfclabel node1) throws SdaiException { // case 102
		return get_string_select(a9, a9$$, 102);
	}
	public int getDatavalue(EIfcmetric type, EIfclogical node1) throws SdaiException { // case 103
		return get_logical_select(a9, a9$$, 103);
	}
	public double getDatavalue(EIfcmetric type, EIfcreal node1) throws SdaiException { // case 104
		return get_double_select(a9, a9$$, 104);
	}
	public String getDatavalue(EIfcmetric type, EIfctext node1) throws SdaiException { // case 105
		return get_string_select(a9, a9$$, 105);
	}
	public String getDatavalue(EIfcmetric type, EIfctime node1) throws SdaiException { // case 106
		return get_string_select(a9, a9$$, 106);
	}
	public int getDatavalue(EIfcmetric type, EIfctimestamp node1) throws SdaiException { // case 107
		return get_integer_select(a9, a9$$, 107);
	}

	public void setDatavalue(EIfcmetric type, EEntity value) throws SdaiException { // case 1
		a9 = set_instance(a9, value);
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		a9 = set_double_select(value);
		a9$$ = 2;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		a9 = set_double_select(value);
		a9$$ = 3;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		a9 = set_double_select(value);
		a9$$ = 4;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		a9 = set_double_select(value);
		a9$$ = 5;
	}
	public A_integer createDatavalue(EIfcmetric type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		a9 = create_aggregate_integer((A_integer)a9, a9$, a9$$ = 6);
		return (A_integer)a9;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		a9 = set_double_select(value);
		a9$$ = 7;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		a9 = set_double_select(value);
		a9$$ = 8;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		a9 = set_double_select(value);
		a9$$ = 9;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		a9 = set_double_select(value);
		a9$$ = 10;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		a9 = set_double_select(value);
		a9$$ = 11;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		a9 = set_double_select(value);
		a9$$ = 12;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		a9 = set_double_select(value);
		a9$$ = 13;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		a9 = set_double_select(value);
		a9$$ = 14;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		a9 = set_double_select(value);
		a9$$ = 15;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		a9 = set_double_select(value);
		a9$$ = 16;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		a9 = set_double_select(value);
		a9$$ = 17;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		a9 = set_double_select(value);
		a9$$ = 18;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		a9 = set_double_select(value);
		a9$$ = 19;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		a9 = set_double_select(value);
		a9$$ = 20;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		a9 = set_double_select(value);
		a9$$ = 21;
	}
	public void setDatavalue(EIfcmetric type, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		a9 = set_integer_select(value);
		a9$$ = 22;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		a9 = set_double_select(value);
		a9$$ = 23;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		a9 = set_double_select(value);
		a9$$ = 24;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		a9 = set_double_select(value);
		a9$$ = 25;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		a9 = set_double_select(value);
		a9$$ = 26;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		a9 = set_double_select(value);
		a9$$ = 27;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		a9 = set_double_select(value);
		a9$$ = 28;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		a9 = set_double_select(value);
		a9$$ = 29;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		a9 = set_double_select(value);
		a9$$ = 30;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		a9 = set_double_select(value);
		a9$$ = 31;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		a9 = set_double_select(value);
		a9$$ = 32;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		a9 = set_double_select(value);
		a9$$ = 33;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		a9 = set_double_select(value);
		a9$$ = 34;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		a9 = set_double_select(value);
		a9$$ = 35;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		a9 = set_double_select(value);
		a9$$ = 36;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		a9 = set_double_select(value);
		a9$$ = 37;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		a9 = set_double_select(value);
		a9$$ = 38;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		a9 = set_double_select(value);
		a9$$ = 39;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		a9 = set_double_select(value);
		a9$$ = 40;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		a9 = set_double_select(value);
		a9$$ = 41;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		a9 = set_double_select(value);
		a9$$ = 42;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		a9 = set_double_select(value);
		a9$$ = 43;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		a9 = set_double_select(value);
		a9$$ = 44;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		a9 = set_double_select(value);
		a9$$ = 45;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		a9 = set_double_select(value);
		a9$$ = 46;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		a9 = set_double_select(value);
		a9$$ = 47;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		a9 = set_double_select(value);
		a9$$ = 48;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		a9 = set_double_select(value);
		a9$$ = 49;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		a9 = set_double_select(value);
		a9$$ = 50;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		a9 = set_double_select(value);
		a9$$ = 51;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		a9 = set_double_select(value);
		a9$$ = 52;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		a9 = set_double_select(value);
		a9$$ = 53;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		a9 = set_double_select(value);
		a9$$ = 54;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		a9 = set_double_select(value);
		a9$$ = 55;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		a9 = set_double_select(value);
		a9$$ = 56;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		a9 = set_double_select(value);
		a9$$ = 57;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		a9 = set_double_select(value);
		a9$$ = 58;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		a9 = set_double_select(value);
		a9$$ = 59;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		a9 = set_double_select(value);
		a9$$ = 60;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		a9 = set_double_select(value);
		a9$$ = 61;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		a9 = set_double_select(value);
		a9$$ = 62;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		a9 = set_double_select(value);
		a9$$ = 63;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		a9 = set_double_select(value);
		a9$$ = 64;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		a9 = set_double_select(value);
		a9$$ = 65;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		a9 = set_double_select(value);
		a9$$ = 66;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		a9 = set_double_select(value);
		a9$$ = 67;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		a9 = set_double_select(value);
		a9$$ = 68;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		a9 = set_double_select(value);
		a9$$ = 69;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		a9 = set_double_select(value);
		a9$$ = 70;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		a9 = set_double_select(value);
		a9$$ = 71;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		a9 = set_double_select(value);
		a9$$ = 72;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		a9 = set_double_select(value);
		a9$$ = 73;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcareameasure node1) throws SdaiException { // case 74
		a9 = set_double_select(value);
		a9$$ = 74;
	}
	public A_double createDatavalue(EIfcmetric type, EIfccomplexnumber node1) throws SdaiException { // case 75
		a9 = create_aggregate_double((A_double)a9, a9$, a9$$ = 75);
		return (A_double)a9;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		a9 = set_double_select(value);
		a9$$ = 76;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		a9 = set_double_select(value);
		a9$$ = 77;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		a9 = set_string(value);
		a9$$ = 78;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		a9 = set_double_select(value);
		a9$$ = 79;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		a9 = set_double_select(value);
		a9$$ = 80;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		a9 = set_double_select(value);
		a9$$ = 81;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		a9 = set_double_select(value);
		a9$$ = 82;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		a9 = set_double_select(value);
		a9$$ = 83;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		a9 = set_double_select(value);
		a9$$ = 84;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		a9 = set_double_select(value);
		a9$$ = 85;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		a9 = set_double_select(value);
		a9$$ = 86;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		a9 = set_double_select(value);
		a9$$ = 87;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		a9 = set_double_select(value);
		a9$$ = 88;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		a9 = set_double_select(value);
		a9$$ = 89;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		a9 = set_double_select(value);
		a9$$ = 90;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		a9 = set_double_select(value);
		a9$$ = 91;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		a9 = set_double_select(value);
		a9$$ = 92;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		a9 = set_double_select(value);
		a9$$ = 93;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		a9 = set_double_select(value);
		a9$$ = 94;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		a9 = set_double_select(value);
		a9$$ = 95;
	}
	public void setDatavalue(EIfcmetric type, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		a9 = set_boolean_select(value);
		a9$$ = 96;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfcdate node1) throws SdaiException { // case 97
		a9 = set_string(value);
		a9$$ = 97;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfcdatetime node1) throws SdaiException { // case 98
		a9 = set_string(value);
		a9$$ = 98;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfcduration node1) throws SdaiException { // case 99
		a9 = set_string(value);
		a9$$ = 99;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfcidentifier node1) throws SdaiException { // case 100
		a9 = set_string(value);
		a9$$ = 100;
	}
	public void setDatavalue(EIfcmetric type, int value, EIfcinteger node1) throws SdaiException { // case 101
		a9 = set_integer_select(value);
		a9$$ = 101;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfclabel node1) throws SdaiException { // case 102
		a9 = set_string(value);
		a9$$ = 102;
	}
	public void setDatavalue(EIfcmetric type, int value, EIfclogical node1) throws SdaiException { // case 103
		a9 = set_logical_select(value);
		a9$$ = 103;
	}
	public void setDatavalue(EIfcmetric type, double value, EIfcreal node1) throws SdaiException { // case 104
		a9 = set_double_select(value);
		a9$$ = 104;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfctext node1) throws SdaiException { // case 105
		a9 = set_string(value);
		a9$$ = 105;
	}
	public void setDatavalue(EIfcmetric type, String value, EIfctime node1) throws SdaiException { // case 106
		a9 = set_string(value);
		a9$$ = 106;
	}
	public void setDatavalue(EIfcmetric type, int value, EIfctimestamp node1) throws SdaiException { // case 107
		a9 = set_integer_select(value);
		a9$$ = 107;
	}

	public void unsetDatavalue(EIfcmetric type) throws SdaiException {
		a9 = unset_select(a9);
		a9$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeDatavalue(EIfcmetric type) throws SdaiException {
		return a9$;
	}

	//going through all the attributes: #4765=EXPLICIT_ATTRIBUTE('ReferencePath',#4760,3,#5276,$,.T.);
	//<01> generating methods for consolidated attribute:  ReferencePath
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ReferencePath, base type: entity IfcReference
	public static int usedinReferencepath(EIfcmetric type, EIfcreference instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a10$, domain, result);
	}
	public boolean testReferencepath(EIfcmetric type) throws SdaiException {
		return test_instance(a10);
	}
	public EIfcreference getReferencepath(EIfcmetric type) throws SdaiException {
		return (EIfcreference)get_instance(a10);
	}
	public void setReferencepath(EIfcmetric type, EIfcreference value) throws SdaiException {
		a10 = set_instance(a10, value);
	}
	public void unsetReferencepath(EIfcmetric type) throws SdaiException {
		a10 = unset_instance(a10);
	}
	public static jsdai.dictionary.EAttribute attributeReferencepath(EIfcmetric type) throws SdaiException {
		return a10$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = 0;
			a3 = null;
			a4 = unset_instance(a4);
			a5 = null;
			a6 = null;
			a7 = 0;
			a8 = null;
			a9 = unset_select(a9);
			a9$$ = 0;
			a10 = unset_instance(a10);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getEnumeration(2, a2$);
		a3 = av.entityValues[0].getString(3);
		a4 = av.entityValues[0].getInstance(4, this, a4$);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[1].getEnumeration(0, a7$);
		a8 = av.entityValues[1].getString(1);
		a9 = av.entityValues[1].getMixed(2,a9$, this);
		a9$$ = av.entityValues[1].getSelectNumber();
		a10 = av.entityValues[1].getInstance(3, this, a10$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = 0;
			a3 = null;
			a4 = unset_instance(a4);
			a5 = null;
			a6 = null;
			a7 = 0;
			a8 = null;
			a9 = unset_select(a9);
			a9$$ = 0;
			a10 = unset_instance(a10);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getEnumeration(2, a2$);
		a3 = av.entityValues[0].getString(3);
		a4 = av.entityValues[0].getInstance(4, this, a4$);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[1].getEnumeration(0, a7$);
		a8 = av.entityValues[1].getString(1);
		a9 = av.entityValues[1].getMixed(2,a9$, this);
		a9$$ = av.entityValues[1].getSelectNumber();
		a10 = av.entityValues[1].getInstance(3, this, a10$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConstraint
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setEnumeration(2, a2, a2$);
		av.entityValues[0].setString(3, a3);
		av.entityValues[0].setInstance(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		// partial entity: IfcMetric
		av.entityValues[1].setEnumeration(0, a7, a7$);
		av.entityValues[1].setString(1, a8);
		av.entityValues[1].setMixed(2, a9, a9$, a9$$);
		av.entityValues[1].setInstance(3, a10);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConstraint
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setEnumeration(2, a2, a2$);
		av.entityValues[0].setString(3, a3);
		av.entityValues[0].setInstance(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		// partial entity: IfcMetric
		av.entityValues[1].setEnumeration(0, a7, a7$);
		av.entityValues[1].setString(1, a8);
		av.entityValues[1].setMixed(2, a9, a9$, a9$$);
		av.entityValues[1].setInstance(3, a10);
	}
}
