/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcNamedUnit

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcnamedunit extends CEntity implements EIfcnamedunit {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcnamedunit.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // Dimensions - current entity - ENTITY IfcDimensionalExponents
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected int a1; // UnitType - current entity - ENUMERATION IfcUnitEnum
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Dimensions - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// UnitType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4780=EXPLICIT_ATTRIBUTE('Dimensions',#4778,0,#3939,$,.F.);
	//<01> generating methods for consolidated attribute:  Dimensions
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : Dimensions, base type: entity IfcDimensionalExponents
	public static int usedinDimensions(EIfcnamedunit type, EIfcdimensionalexponents instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testDimensions(EIfcnamedunit type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcdimensionalexponents getDimensions(EIfcnamedunit type) throws SdaiException {
		return (EIfcdimensionalexponents)get_instance(a0);
	}
	public void setDimensions(EIfcnamedunit type, EIfcdimensionalexponents value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetDimensions(EIfcnamedunit type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeDimensions(EIfcnamedunit type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4781=EXPLICIT_ATTRIBUTE('UnitType',#4778,1,#3077,$,.F.);
	//<01> generating methods for consolidated attribute:  UnitType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:UnitType, base type: ENUMERATION
	public boolean testUnittype(EIfcnamedunit type) throws SdaiException {
		return test_enumeration(a1);
	}
	public int getUnittype(EIfcnamedunit type) throws SdaiException {
		return get_enumeration(a1);
	}
	public void setUnittype(EIfcnamedunit type, int value) throws SdaiException {
		a1 = set_enumeration(value, a1$);
	}
	public void unsetUnittype(EIfcnamedunit type) throws SdaiException {
		a1 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeUnittype(EIfcnamedunit type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = 0;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = 0;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcNamedUnit
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcNamedUnit
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcnamedunitWr1(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfccorrectdimensions()).run(_context, Value.alloc(jsdai.SIfc4.CIfcnamedunit.definition).set(_context, this).getAttribute(a1$, _context), Value.alloc(jsdai.SIfc4.CIfcnamedunit.definition).set(_context, this).getAttribute(a0$, _context))).getLogical());
	}
}
