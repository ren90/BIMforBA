/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTextureCoordinate

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctexturecoordinate extends CIfcpresentationitem implements EIfctexturecoordinate {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctexturecoordinate.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected AIfcsurfacetexture a0; // Maps - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Maps - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcsurfacetexture a0;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6197=EXPLICIT_ATTRIBUTE('Maps',#6195,0,#7179,$,.F.);
	//<01> generating methods for consolidated attribute:  Maps
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Maps, base type: LIST OF ENTITY
	public static int usedinMaps(EIfctexturecoordinate type, EIfcsurfacetexture instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testMaps(EIfctexturecoordinate type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfcsurfacetexture getMaps(EIfctexturecoordinate type) throws SdaiException {
		return (AIfcsurfacetexture)get_aggregate(a0);
	}
	public AIfcsurfacetexture createMaps(EIfctexturecoordinate type) throws SdaiException {
		a0 = (AIfcsurfacetexture)create_aggregate_class(a0, a0$,  AIfcsurfacetexture.class, 0);
		return a0;
	}
	public void unsetMaps(EIfctexturecoordinate type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributeMaps(EIfctexturecoordinate type) throws SdaiException {
		return a0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfcsurfacetexture)av.entityValues[1].getInstanceAggregate(0, a0$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfcsurfacetexture)av.entityValues[1].getInstanceAggregate(0, a0$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[1].setInstanceAggregate(0, a0);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[1].setInstanceAggregate(0, a0);
	}
}
