/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTextureMap

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctexturemap extends CIfctexturecoordinate implements EIfctexturemap {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctexturemap.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Maps: protected AIfcsurfacetexture a0;   Maps - java inheritance - LIST OF ENTITY
	protected AIfctexturevertex a1; // Vertices - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // MappedTo - current entity - ENTITY IfcFace
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Maps - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected AIfcsurfacetexture a0;
	// Vertices - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfctexturevertex a1;
	// MappedTo - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a1, old, newer);
		if (a2 == old) {
			a2 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a1, old, newer);
		if (a2 == old) {
			a2 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6197=EXPLICIT_ATTRIBUTE('Maps',#6195,0,#7179,$,.F.);
	//<01> generating methods for consolidated attribute:  Maps
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Maps, base type: LIST OF ENTITY
	public static int usedinMaps(EIfctexturecoordinate type, EIfcsurfacetexture instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #6204=EXPLICIT_ATTRIBUTE('Vertices',#6202,0,#7181,$,.F.);
	//<01> generating methods for consolidated attribute:  Vertices
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Vertices, base type: LIST OF ENTITY
	public static int usedinVertices(EIfctexturemap type, EIfctexturevertex instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testVertices(EIfctexturemap type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfctexturevertex getVertices(EIfctexturemap type) throws SdaiException {
		return (AIfctexturevertex)get_aggregate(a1);
	}
	public AIfctexturevertex createVertices(EIfctexturemap type) throws SdaiException {
		a1 = (AIfctexturevertex)create_aggregate_class(a1, a1$,  AIfctexturevertex.class, 0);
		return a1;
	}
	public void unsetVertices(EIfctexturemap type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeVertices(EIfctexturemap type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6205=EXPLICIT_ATTRIBUTE('MappedTo',#6202,1,#4254,$,.F.);
	//<01> generating methods for consolidated attribute:  MappedTo
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : MappedTo, base type: entity IfcFace
	public static int usedinMappedto(EIfctexturemap type, EIfcface instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testMappedto(EIfctexturemap type) throws SdaiException {
		return test_instance(a2);
	}
	public EIfcface getMappedto(EIfctexturemap type) throws SdaiException {
		return (EIfcface)get_instance(a2);
	}
	public void setMappedto(EIfctexturemap type, EIfcface value) throws SdaiException {
		a2 = set_instance(a2, value);
	}
	public void unsetMappedto(EIfctexturemap type) throws SdaiException {
		a2 = unset_instance(a2);
	}
	public static jsdai.dictionary.EAttribute attributeMappedto(EIfctexturemap type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = unset_instance(a2);
			return;
		}
		a0 = (AIfcsurfacetexture)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = (AIfctexturevertex)av.entityValues[2].getInstanceAggregate(0, a1$, this);
		a2 = av.entityValues[2].getInstance(1, this, a2$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = unset_instance(a2);
			return;
		}
		a0 = (AIfcsurfacetexture)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = (AIfctexturevertex)av.entityValues[2].getInstanceAggregate(0, a1$, this);
		a2 = av.entityValues[2].getInstance(1, this, a2$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcTextureMap
		av.entityValues[2].setInstanceAggregate(0, a1);
		av.entityValues[2].setInstance(1, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcTextureMap
		av.entityValues[2].setInstanceAggregate(0, a1);
		av.entityValues[2].setInstance(1, a2);
	}
}
