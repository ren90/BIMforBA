/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPresentationLayerAssignment

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpresentationlayerassignment extends CEntity implements EIfcpresentationlayerassignment {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpresentationlayerassignment.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // Description - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfclayereditem a2; // AssignedItems - current entity - SET OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a3; // Identifier - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Description - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// AssignedItems - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfclayereditem a2;
	// Identifier - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a2, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a2, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5025=EXPLICIT_ATTRIBUTE('Name',#5023,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfcpresentationlayerassignment type) throws SdaiException {
		return test_string(a0);
	}
	public String getName(EIfcpresentationlayerassignment type) throws SdaiException {
		return get_string(a0);
	}
	public void setName(EIfcpresentationlayerassignment type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetName(EIfcpresentationlayerassignment type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfcpresentationlayerassignment type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #5026=EXPLICIT_ATTRIBUTE('Description',#5023,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Description, base type: STRING
	public boolean testDescription(EIfcpresentationlayerassignment type) throws SdaiException {
		return test_string(a1);
	}
	public String getDescription(EIfcpresentationlayerassignment type) throws SdaiException {
		return get_string(a1);
	}
	public void setDescription(EIfcpresentationlayerassignment type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetDescription(EIfcpresentationlayerassignment type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeDescription(EIfcpresentationlayerassignment type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5027=EXPLICIT_ATTRIBUTE('AssignedItems',#5023,2,#7015,$,.F.);
	//<01> generating methods for consolidated attribute:  AssignedItems
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: AssignedItems, base type: SET OF SELECT
	public static int usedinAssigneditems(EIfcpresentationlayerassignment type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testAssigneditems(EIfcpresentationlayerassignment type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfclayereditem getAssigneditems(EIfcpresentationlayerassignment type) throws SdaiException {
		if (a2 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a2;
	}
	public AIfclayereditem createAssigneditems(EIfcpresentationlayerassignment type) throws SdaiException {
		a2 = (AIfclayereditem)create_aggregate_class(a2, a2$, AIfclayereditem.class, 0);
		return a2;
	}
	public void unsetAssigneditems(EIfcpresentationlayerassignment type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeAssigneditems(EIfcpresentationlayerassignment type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5028=EXPLICIT_ATTRIBUTE('Identifier',#5023,3,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Identifier
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Identifier, base type: STRING
	public boolean testIdentifier(EIfcpresentationlayerassignment type) throws SdaiException {
		return test_string(a3);
	}
	public String getIdentifier(EIfcpresentationlayerassignment type) throws SdaiException {
		return get_string(a3);
	}
	public void setIdentifier(EIfcpresentationlayerassignment type, String value) throws SdaiException {
		a3 = set_string(value);
	}
	public void unsetIdentifier(EIfcpresentationlayerassignment type) throws SdaiException {
		a3 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeIdentifier(EIfcpresentationlayerassignment type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfclayereditem)av.entityValues[0].getInstanceAggregate(2, a2$, this);
		a3 = av.entityValues[0].getString(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfclayereditem)av.entityValues[0].getInstanceAggregate(2, a2$, this);
		a3 = av.entityValues[0].getString(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationLayerAssignment
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
		av.entityValues[0].setString(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationLayerAssignment
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
		av.entityValues[0].setString(3, a3);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpresentationlayerassignmentApplicableitems(SdaiContext _context) throws SdaiException {
	




									Value _internal_aggregate_source157 = Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a2$));
									Value _result155 = Value.alloc(_internal_aggregate_source157).create();
									if (_internal_aggregate_source157.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i156 = 1; _i156 <= _internal_aggregate_source157.getMemberCount(); _i156++) {
											Value _implicit_36_temp = _internal_aggregate_source157.getByIndex(_i156);
									
																	Value _elements153 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
																	_elements153.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCSHAPEREPRESENTATION", "IFC4"));
																	_elements153.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCGEOMETRICREPRESENTATIONITEM", "IFC4"));
																	_elements153.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCMAPPEDITEM", "IFC4"));
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc().mulOrIntersect(_context, _implicit_36_temp.typeOfV(_context), _elements153)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).getLogical() == 2) {
												_result155.addMember(_context, _implicit_36_temp);
											} else
											if (_internal_aggregate_source157.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_36_temp.unset();
												_result155.addMember(_context, _implicit_36_temp);
											}
										}
									} else {
										_result155.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result155), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a2$))))).getLogical());
	}
}
