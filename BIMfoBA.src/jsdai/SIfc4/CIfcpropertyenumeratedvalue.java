/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertyEnumeratedValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertyenumeratedvalue extends CIfcsimpleproperty implements EIfcpropertyenumeratedvalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertyenumeratedvalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// PartOfPset: protected Object  - inverse - java inheritance -  ENTITY IfcPropertySet
	// PropertyForDependance: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PropertyDependsOn: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PartOfComplex: protected Object  - inverse - java inheritance -  ENTITY IfcComplexProperty
	protected AIfcvalue a2; // EnumerationValues - current entity - LIST OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a3; // EnumerationReference - current entity - ENTITY IfcPropertyEnumeration
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// PartOfPset - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PropertyForDependance - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// PropertyDependsOn - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// PartOfComplex - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// EnumerationValues - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcvalue a2;
	// EnumerationReference - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5104=INVERSE_ATTRIBUTE('HasExternalReferences',#5102,0,#4231,$,#4234,#8918,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5096=EXPLICIT_ATTRIBUTE('Name',#5094,0,#2523,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5097=EXPLICIT_ATTRIBUTE('Description',#5094,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5098=INVERSE_ATTRIBUTE('PartOfPset',#5094,0,#5137,$,#5139,#8908,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfPset
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5099=INVERSE_ATTRIBUTE('PropertyForDependance',#5094,1,#5115,$,#5117,#8910,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyForDependance
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5100=INVERSE_ATTRIBUTE('PropertyDependsOn',#5094,2,#5115,$,#5118,#8912,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyDependsOn
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5101=INVERSE_ATTRIBUTE('PartOfComplex',#5094,3,#3675,$,#3678,#8914,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplex
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5122=EXPLICIT_ATTRIBUTE('EnumerationValues',#5120,0,#7039,$,.T.);
	//<01> generating methods for consolidated attribute:  EnumerationValues
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: EnumerationValues, base type: LIST OF SELECT
	public boolean testEnumerationvalues(EIfcpropertyenumeratedvalue type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfcvalue getEnumerationvalues(EIfcpropertyenumeratedvalue type) throws SdaiException {
		if (a2 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a2;
	}
	public AIfcvalue createEnumerationvalues(EIfcpropertyenumeratedvalue type) throws SdaiException {
		a2 = (AIfcvalue)create_aggregate_class(a2, a2$, AIfcvalue.class, 0);
		return a2;
	}
	public void unsetEnumerationvalues(EIfcpropertyenumeratedvalue type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeEnumerationvalues(EIfcpropertyenumeratedvalue type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5123=EXPLICIT_ATTRIBUTE('EnumerationReference',#5120,1,#5124,$,.T.);
	//<01> generating methods for consolidated attribute:  EnumerationReference
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : EnumerationReference, base type: entity IfcPropertyEnumeration
	public static int usedinEnumerationreference(EIfcpropertyenumeratedvalue type, EIfcpropertyenumeration instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testEnumerationreference(EIfcpropertyenumeratedvalue type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfcpropertyenumeration getEnumerationreference(EIfcpropertyenumeratedvalue type) throws SdaiException {
		return (EIfcpropertyenumeration)get_instance(a3);
	}
	public void setEnumerationreference(EIfcpropertyenumeratedvalue type, EIfcpropertyenumeration value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetEnumerationreference(EIfcpropertyenumeratedvalue type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributeEnumerationreference(EIfcpropertyenumeratedvalue type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = unset_instance(a3);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfcvalue)av.entityValues[2].getMixedAggregate(0, a2$, this);
		a3 = av.entityValues[2].getInstance(1, this, a3$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = unset_instance(a3);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfcvalue)av.entityValues[2].getMixedAggregate(0, a2$, this);
		a3 = av.entityValues[2].getInstance(1, this, a3$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyEnumeratedValue
		av.entityValues[2].setMixedAggregate(0, a2, a2$);
		av.entityValues[2].setInstance(1, a3);
		// partial entity: IfcSimpleProperty
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyEnumeratedValue
		av.entityValues[2].setMixedAggregate(0, a2, a2$);
		av.entityValues[2].setInstance(1, a3);
		// partial entity: IfcSimpleProperty
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertyenumeratedvalueWr21(SdaiContext _context) throws SdaiException {
	








											
											Value _internal_aggregate_source178 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a2$));
											Value _result176 = Value.alloc(_internal_aggregate_source178).create();
											if (_internal_aggregate_source178.getActualJavaType() != Value.INDETERMINATE) {
												for (int _i177 = 1; _i177 <= _internal_aggregate_source178.getMemberCount(); _i177++) {
													Value _implicit_41_temp = _internal_aggregate_source178.getByIndex(_i177);
													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, _implicit_41_temp, Value.alloc(jsdai.SIfc4.CIfcpropertyenumeration.definition).set(_context, get(a3$)).getAttribute("enumerationvalues", _context)).getLogical() == 2) {
														_result176.addMember(_context, _implicit_41_temp);
													} else
													if (_internal_aggregate_source178.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
														_implicit_41_temp.unset();
														_result176.addMember(_context, _implicit_41_temp);
													}
												}
											} else {
												_result176.unset();
											}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfcpropertyenumeration.definition).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a2$))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result176), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a2$)))))).getLogical());
	}
}
