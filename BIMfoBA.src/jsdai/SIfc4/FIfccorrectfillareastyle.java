/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcCorrectFillAreaStyle

package jsdai.SIfc4;
import jsdai.lang.*;


public class FIfccorrectfillareastyle {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Styles;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_Hatching;
	Value _e_Tiles;
	Value _e_Colour;
	Value _e_External;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Styles) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Styles = Value.alloc(jsdai.SIfc4.SIfc4._st_generalset_1_ifcfillstyleselect).set(_e_Styles);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_Hatching = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0));
		_e_Tiles = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0));
		_e_Colour = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0));
		_e_External = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0));
		// end of initialization of local variables




													
													Value _internal_aggregate_source363 = _nonvar__e_Styles;
													Value _result361 = Value.alloc(_internal_aggregate_source363).create();
													if (_internal_aggregate_source363.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i362 = 1; _i362 <= _internal_aggregate_source363.getMemberCount(); _i362++) {
															Value _implicit_82_Style = _internal_aggregate_source363.getByIndex(_i362);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCEXTERNALLYDEFINEDHATCHSTYLE", "IFC4"), _implicit_82_Style.typeOfV(_context)).getLogical() == 2) {
																_result361.addMember(_context, _implicit_82_Style);
															} else
															if (_internal_aggregate_source363.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_82_Style.unset();
																_result361.addMember(_context, _implicit_82_Style);
															}
														}
													} else {
														_result361.unset();
													}

													_e_External.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result361));


													
													Value _internal_aggregate_source367 = _nonvar__e_Styles;
													Value _result365 = Value.alloc(_internal_aggregate_source367).create();
													if (_internal_aggregate_source367.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i366 = 1; _i366 <= _internal_aggregate_source367.getMemberCount(); _i366++) {
															Value _implicit_83_Style = _internal_aggregate_source367.getByIndex(_i366);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCFILLAREASTYLEHATCHING", "IFC4"), _implicit_83_Style.typeOfV(_context)).getLogical() == 2) {
																_result365.addMember(_context, _implicit_83_Style);
															} else
															if (_internal_aggregate_source367.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_83_Style.unset();
																_result365.addMember(_context, _implicit_83_Style);
															}
														}
													} else {
														_result365.unset();
													}

													_e_Hatching.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result365));


													
													Value _internal_aggregate_source371 = _nonvar__e_Styles;
													Value _result369 = Value.alloc(_internal_aggregate_source371).create();
													if (_internal_aggregate_source371.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i370 = 1; _i370 <= _internal_aggregate_source371.getMemberCount(); _i370++) {
															Value _implicit_84_Style = _internal_aggregate_source371.getByIndex(_i370);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCFILLAREASTYLETILES", "IFC4"), _implicit_84_Style.typeOfV(_context)).getLogical() == 2) {
																_result369.addMember(_context, _implicit_84_Style);
															} else
															if (_internal_aggregate_source371.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_84_Style.unset();
																_result369.addMember(_context, _implicit_84_Style);
															}
														}
													} else {
														_result369.unset();
													}

													_e_Tiles.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result369));


													
													Value _internal_aggregate_source375 = _nonvar__e_Styles;
													Value _result373 = Value.alloc(_internal_aggregate_source375).create();
													if (_internal_aggregate_source375.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i374 = 1; _i374 <= _internal_aggregate_source375.getMemberCount(); _i374++) {
															Value _implicit_85_Style = _internal_aggregate_source375.getByIndex(_i374);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCCOLOUR", "IFC4"), _implicit_85_Style.typeOfV(_context)).getLogical() == 2) {
																_result373.addMember(_context, _implicit_85_Style);
															} else
															if (_internal_aggregate_source375.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_85_Style.unset();
																_result373.addMember(_context, _implicit_85_Style);
															}
														}
													} else {
														_result373.unset();
													}

													_e_Colour.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result373));



													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_External, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).getLogical() == 2) {													
		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).setLB(_context, 1)).check(_context, ExpressTypes.LOGICAL_TYPE);
													}



													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _e_External, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Hatching, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Tiles, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Colour, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)))).getLogical() == 2) {													
		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).setLB(_context, 1)).check(_context, ExpressTypes.LOGICAL_TYPE);
													}



													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Colour, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).getLogical() == 2) {													
		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).setLB(_context, 1)).check(_context, ExpressTypes.LOGICAL_TYPE);
													}



													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Hatching, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Tiles, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical() == 2) {													
		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).setLB(_context, 1)).check(_context, ExpressTypes.LOGICAL_TYPE);
													}




		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).setLB(_context, 2)).check(_context, ExpressTypes.LOGICAL_TYPE);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
