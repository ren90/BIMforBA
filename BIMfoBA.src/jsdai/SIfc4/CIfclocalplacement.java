/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcLocalPlacement

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfclocalplacement extends CIfcobjectplacement implements EIfclocalplacement {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfclocalplacement.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// PlacesObject: protected Object  - inverse - java inheritance -  ENTITY IfcProduct
	// ReferencedByPlacements: protected Object  - inverse - java inheritance -  ENTITY IfcLocalPlacement
	protected Object a0; // PlacementRelTo - current entity - ENTITY IfcObjectPlacement
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // RelativePlacement - current entity - SELECT IfcAxis2Placement
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// PlacesObject - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// ReferencedByPlacements - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PlacementRelTo - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// RelativePlacement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4800=INVERSE_ATTRIBUTE('PlacesObject',#4798,0,#5054,$,#5056,#8691,$,.F.);
	//<01> generating methods for consolidated attribute:  PlacesObject
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4801=INVERSE_ATTRIBUTE('ReferencedByPlacements',#4798,1,#4610,$,#4612,#8693,$,.F.);
	//<01> generating methods for consolidated attribute:  ReferencedByPlacements
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4612=EXPLICIT_ATTRIBUTE('PlacementRelTo',#4610,0,#4798,$,.T.);
	//<01> generating methods for consolidated attribute:  PlacementRelTo
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : PlacementRelTo, base type: entity IfcObjectPlacement
	public static int usedinPlacementrelto(EIfclocalplacement type, EIfcobjectplacement instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testPlacementrelto(EIfclocalplacement type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcobjectplacement getPlacementrelto(EIfclocalplacement type) throws SdaiException {
		return (EIfcobjectplacement)get_instance(a0);
	}
	public void setPlacementrelto(EIfclocalplacement type, EIfcobjectplacement value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetPlacementrelto(EIfclocalplacement type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributePlacementrelto(EIfclocalplacement type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4613=EXPLICIT_ATTRIBUTE('RelativePlacement',#4610,1,#3115,$,.F.);
	//<01> generating methods for consolidated attribute:  RelativePlacement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: RelativePlacement
	public static int usedinRelativeplacement(EIfclocalplacement type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testRelativeplacement(EIfclocalplacement type) throws SdaiException {
		return test_instance(a1);
	}

	public EEntity getRelativeplacement(EIfclocalplacement type) throws SdaiException { // case 1
		return get_instance_select(a1);
	}

	public void setRelativeplacement(EIfclocalplacement type, EEntity value) throws SdaiException { // case 1
		a1 = set_instance(a1, value);
	}

	public void unsetRelativeplacement(EIfclocalplacement type) throws SdaiException {
		a1 = unset_instance(a1);
	}

	public static jsdai.dictionary.EAttribute attributeRelativeplacement(EIfclocalplacement type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcLocalPlacement
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcObjectPlacement
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcLocalPlacement
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcObjectPlacement
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfclocalplacementWr21(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfccorrectlocalplacement()).run(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAxis2Placement).set(_context, get(a1$)), Value.alloc(jsdai.SIfc4.CIfcobjectplacement.definition).set(_context, get(a0$)))).getLogical());
	}
}
