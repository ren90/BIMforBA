/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPersonAndOrganization

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpersonandorganization extends CEntity implements EIfcpersonandorganization {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpersonandorganization.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // ThePerson - current entity - ENTITY IfcPerson
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // TheOrganization - current entity - ENTITY IfcOrganization
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcactorrole a2; // Roles - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// ThePerson - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// TheOrganization - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// Roles - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcactorrole a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		changeReferencesAggregate(a2, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		changeReferencesAggregate(a2, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4907=EXPLICIT_ATTRIBUTE('ThePerson',#4905,0,#4894,$,.F.);
	//<01> generating methods for consolidated attribute:  ThePerson
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ThePerson, base type: entity IfcPerson
	public static int usedinTheperson(EIfcpersonandorganization type, EIfcperson instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testTheperson(EIfcpersonandorganization type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcperson getTheperson(EIfcpersonandorganization type) throws SdaiException {
		return (EIfcperson)get_instance(a0);
	}
	public void setTheperson(EIfcpersonandorganization type, EIfcperson value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetTheperson(EIfcpersonandorganization type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeTheperson(EIfcpersonandorganization type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4908=EXPLICIT_ATTRIBUTE('TheOrganization',#4905,1,#4830,$,.F.);
	//<01> generating methods for consolidated attribute:  TheOrganization
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TheOrganization, base type: entity IfcOrganization
	public static int usedinTheorganization(EIfcpersonandorganization type, EIfcorganization instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testTheorganization(EIfcpersonandorganization type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfcorganization getTheorganization(EIfcpersonandorganization type) throws SdaiException {
		return (EIfcorganization)get_instance(a1);
	}
	public void setTheorganization(EIfcpersonandorganization type, EIfcorganization value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetTheorganization(EIfcpersonandorganization type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeTheorganization(EIfcpersonandorganization type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4909=EXPLICIT_ATTRIBUTE('Roles',#4905,2,#6999,$,.T.);
	//<01> generating methods for consolidated attribute:  Roles
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Roles, base type: LIST OF ENTITY
	public static int usedinRoles(EIfcpersonandorganization type, EIfcactorrole instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testRoles(EIfcpersonandorganization type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfcactorrole getRoles(EIfcpersonandorganization type) throws SdaiException {
		return (AIfcactorrole)get_aggregate(a2);
	}
	public AIfcactorrole createRoles(EIfcpersonandorganization type) throws SdaiException {
		a2 = (AIfcactorrole)create_aggregate_class(a2, a2$,  AIfcactorrole.class, 0);
		return a2;
	}
	public void unsetRoles(EIfcpersonandorganization type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeRoles(EIfcpersonandorganization type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = (AIfcactorrole)av.entityValues[0].getInstanceAggregate(2, a2$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = (AIfcactorrole)av.entityValues[0].getInstanceAggregate(2, a2$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPersonAndOrganization
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPersonAndOrganization
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setInstanceAggregate(2, a2);
	}
}
