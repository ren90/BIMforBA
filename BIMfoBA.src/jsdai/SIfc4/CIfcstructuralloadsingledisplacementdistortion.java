/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcStructuralLoadSingleDisplacementDistortion

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcstructuralloadsingledisplacementdistortion extends CIfcstructuralloadsingledisplacement implements EIfcstructuralloadsingledisplacementdistortion {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcstructuralloadsingledisplacementdistortion.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// DisplacementX: protected double a1;   DisplacementX - java inheritance - REAL
	// DisplacementY: protected double a2;   DisplacementY - java inheritance - REAL
	// DisplacementZ: protected double a3;   DisplacementZ - java inheritance - REAL
	// RotationalDisplacementRX: protected double a4;   RotationalDisplacementRX - java inheritance - REAL
	// RotationalDisplacementRY: protected double a5;   RotationalDisplacementRY - java inheritance - REAL
	// RotationalDisplacementRZ: protected double a6;   RotationalDisplacementRZ - java inheritance - REAL
	protected double a7; // Distortion - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// DisplacementX - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected double a1;
	// DisplacementY - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected double a2;
	// DisplacementZ - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected double a3;
	// RotationalDisplacementRX - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected double a4;
	// RotationalDisplacementRY - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected double a5;
	// RotationalDisplacementRZ - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected double a6;
	// Distortion - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected double a7;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5838=EXPLICIT_ATTRIBUTE('Name',#5836,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5872=EXPLICIT_ATTRIBUTE('DisplacementX',#5870,0,#2543,$,.T.);
	//<01> generating methods for consolidated attribute:  DisplacementX
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5873=EXPLICIT_ATTRIBUTE('DisplacementY',#5870,1,#2543,$,.T.);
	//<01> generating methods for consolidated attribute:  DisplacementY
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5874=EXPLICIT_ATTRIBUTE('DisplacementZ',#5870,2,#2543,$,.T.);
	//<01> generating methods for consolidated attribute:  DisplacementZ
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5875=EXPLICIT_ATTRIBUTE('RotationalDisplacementRX',#5870,3,#2603,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalDisplacementRX
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5876=EXPLICIT_ATTRIBUTE('RotationalDisplacementRY',#5870,4,#2603,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalDisplacementRY
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5877=EXPLICIT_ATTRIBUTE('RotationalDisplacementRZ',#5870,5,#2603,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalDisplacementRZ
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5880=EXPLICIT_ATTRIBUTE('Distortion',#5878,0,#2473,$,.T.);
	//<01> generating methods for consolidated attribute:  Distortion
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Distortion, base type: REAL
	public boolean testDistortion(EIfcstructuralloadsingledisplacementdistortion type) throws SdaiException {
		return test_double(a7);
	}
	public double getDistortion(EIfcstructuralloadsingledisplacementdistortion type) throws SdaiException {
		return get_double(a7);
	}
	public void setDistortion(EIfcstructuralloadsingledisplacementdistortion type, double value) throws SdaiException {
		a7 = set_double(value);
	}
	public void unsetDistortion(EIfcstructuralloadsingledisplacementdistortion type) throws SdaiException {
		a7 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeDistortion(EIfcstructuralloadsingledisplacementdistortion type) throws SdaiException {
		return a7$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			a5 = Double.NaN;
			a6 = Double.NaN;
			a7 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[2].getDouble(0);
		a2 = av.entityValues[2].getDouble(1);
		a3 = av.entityValues[2].getDouble(2);
		a4 = av.entityValues[2].getDouble(3);
		a5 = av.entityValues[2].getDouble(4);
		a6 = av.entityValues[2].getDouble(5);
		a7 = av.entityValues[3].getDouble(0);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			a5 = Double.NaN;
			a6 = Double.NaN;
			a7 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[2].getDouble(0);
		a2 = av.entityValues[2].getDouble(1);
		a3 = av.entityValues[2].getDouble(2);
		a4 = av.entityValues[2].getDouble(3);
		a5 = av.entityValues[2].getDouble(4);
		a6 = av.entityValues[2].getDouble(5);
		a7 = av.entityValues[3].getDouble(0);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcStructuralLoadSingleDisplacement
		av.entityValues[2].setDouble(0, a1);
		av.entityValues[2].setDouble(1, a2);
		av.entityValues[2].setDouble(2, a3);
		av.entityValues[2].setDouble(3, a4);
		av.entityValues[2].setDouble(4, a5);
		av.entityValues[2].setDouble(5, a6);
		// partial entity: IfcStructuralLoadSingleDisplacementDistortion
		av.entityValues[3].setDouble(0, a7);
		// partial entity: IfcStructuralLoadStatic
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcStructuralLoadSingleDisplacement
		av.entityValues[2].setDouble(0, a1);
		av.entityValues[2].setDouble(1, a2);
		av.entityValues[2].setDouble(2, a3);
		av.entityValues[2].setDouble(3, a4);
		av.entityValues[2].setDouble(4, a5);
		av.entityValues[2].setDouble(5, a6);
		// partial entity: IfcStructuralLoadSingleDisplacementDistortion
		av.entityValues[3].setDouble(0, a7);
		// partial entity: IfcStructuralLoadStatic
	}
}
