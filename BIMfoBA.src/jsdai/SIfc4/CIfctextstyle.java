/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTextStyle

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctextstyle extends CIfcpresentationstyle implements EIfctextstyle {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctextstyle.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected Object a1; // TextCharacterAppearance - current entity - ENTITY IfcTextStyleForDefinedFont
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // TextStyle - current entity - ENTITY IfcTextStyleTextModel
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a3; // TextFontStyle - current entity - SELECT IfcTextFontSelect
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a4; // ModelOrDraughting - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// TextCharacterAppearance - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// TextStyle - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	// TextFontStyle - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// ModelOrDraughting - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5037=EXPLICIT_ATTRIBUTE('Name',#5035,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6171=EXPLICIT_ATTRIBUTE('TextCharacterAppearance',#6169,0,#6182,$,.T.);
	//<01> generating methods for consolidated attribute:  TextCharacterAppearance
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TextCharacterAppearance, base type: entity IfcTextStyleForDefinedFont
	public static int usedinTextcharacterappearance(EIfctextstyle type, EIfctextstylefordefinedfont instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testTextcharacterappearance(EIfctextstyle type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfctextstylefordefinedfont getTextcharacterappearance(EIfctextstyle type) throws SdaiException {
		return (EIfctextstylefordefinedfont)get_instance(a1);
	}
	public void setTextcharacterappearance(EIfctextstyle type, EIfctextstylefordefinedfont value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetTextcharacterappearance(EIfctextstyle type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeTextcharacterappearance(EIfctextstyle type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6172=EXPLICIT_ATTRIBUTE('TextStyle',#6169,1,#6186,$,.T.);
	//<01> generating methods for consolidated attribute:  TextStyle
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TextStyle, base type: entity IfcTextStyleTextModel
	public static int usedinTextstyle(EIfctextstyle type, EIfctextstyletextmodel instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testTextstyle(EIfctextstyle type) throws SdaiException {
		return test_instance(a2);
	}
	public EIfctextstyletextmodel getTextstyle(EIfctextstyle type) throws SdaiException {
		return (EIfctextstyletextmodel)get_instance(a2);
	}
	public void setTextstyle(EIfctextstyle type, EIfctextstyletextmodel value) throws SdaiException {
		a2 = set_instance(a2, value);
	}
	public void unsetTextstyle(EIfctextstyle type) throws SdaiException {
		a2 = unset_instance(a2);
	}
	public static jsdai.dictionary.EAttribute attributeTextstyle(EIfctextstyle type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #6173=EXPLICIT_ATTRIBUTE('TextFontStyle',#6169,2,#3213,$,.F.);
	//<01> generating methods for consolidated attribute:  TextFontStyle
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: TextFontStyle
	public static int usedinTextfontstyle(EIfctextstyle type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testTextfontstyle(EIfctextstyle type) throws SdaiException {
		return test_instance(a3);
	}

	public EEntity getTextfontstyle(EIfctextstyle type) throws SdaiException { // case 1
		return get_instance_select(a3);
	}

	public void setTextfontstyle(EIfctextstyle type, EEntity value) throws SdaiException { // case 1
		a3 = set_instance(a3, value);
	}

	public void unsetTextfontstyle(EIfctextstyle type) throws SdaiException {
		a3 = unset_instance(a3);
	}

	public static jsdai.dictionary.EAttribute attributeTextfontstyle(EIfctextstyle type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #6174=EXPLICIT_ATTRIBUTE('ModelOrDraughting',#6169,3,#6,$,.T.);
	//<01> generating methods for consolidated attribute:  ModelOrDraughting
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ModelOrDraughting, base type: BOOLEAN
	public boolean testModelordraughting(EIfctextstyle type) throws SdaiException {
		return test_boolean(a4);
	}
	public boolean getModelordraughting(EIfctextstyle type) throws SdaiException {
		return get_boolean(a4);
	}
	public void setModelordraughting(EIfctextstyle type, boolean value) throws SdaiException {
		a4 = set_boolean(value);
	}
	public void unsetModelordraughting(EIfctextstyle type) throws SdaiException {
		a4 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeModelordraughting(EIfctextstyle type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[1].getInstance(0, this, a1$);
		a2 = av.entityValues[1].getInstance(1, this, a2$);
		a3 = av.entityValues[1].getInstance(2, this, a3$);
		a4 = av.entityValues[1].getBoolean(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[1].getInstance(0, this, a1$);
		a2 = av.entityValues[1].getInstance(1, this, a2$);
		a3 = av.entityValues[1].getInstance(2, this, a3$);
		a4 = av.entityValues[1].getBoolean(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationStyle
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcTextStyle
		av.entityValues[1].setInstance(0, a1);
		av.entityValues[1].setInstance(1, a2);
		av.entityValues[1].setInstance(2, a3);
		av.entityValues[1].setBoolean(3, a4);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPresentationStyle
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcTextStyle
		av.entityValues[1].setInstance(0, a1);
		av.entityValues[1].setInstance(1, a2);
		av.entityValues[1].setInstance(2, a3);
		av.entityValues[1].setBoolean(3, a4);
	}
}
