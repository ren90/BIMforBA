/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTask

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctask extends CIfcprocess implements EIfctask {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctask.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	// HasAssignments: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssigns
	// Nests: protected Object  - inverse - java inheritance -  ENTITY IfcRelNests
	// IsNestedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelNests
	// HasContext: protected Object  - inverse - java inheritance -  ENTITY IfcRelDeclares
	// IsDecomposedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelAggregates
	// Decomposes: protected Object  - inverse - java inheritance -  ENTITY IfcRelAggregates
	// HasAssociations: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssociates
	// ObjectType: protected String a4;   ObjectType - java inheritance - STRING
	// IsDeclaredBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelDefinesByObject
	// Declares: protected Object  - inverse - java inheritance -  ENTITY IfcRelDefinesByObject
	// IsTypedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelDefinesByType
	// IsDefinedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelDefinesByProperties
	// Identification: protected String a5;   Identification - java inheritance - STRING
	// LongDescription: protected String a6;   LongDescription - java inheritance - STRING
	// IsPredecessorTo: protected Object  - inverse - java inheritance -  ENTITY IfcRelSequence
	// IsSuccessorFrom: protected Object  - inverse - java inheritance -  ENTITY IfcRelSequence
	// OperatesOn: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssignsToProcess
	protected String a7; // Status - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected String a8; // WorkMethod - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected int a9; // IsMilestone - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected int a10; // Priority - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
	protected Object a11; // TaskTime - current entity - ENTITY IfcTaskTime
	protected static final jsdai.dictionary.CExplicit_attribute a11$ = CEntity.initExplicitAttribute(definition, 11);
	protected int a12; // PredefinedType - current entity - ENUMERATION IfcTaskTypeEnum
	protected static final jsdai.dictionary.CExplicit_attribute a12$ = CEntity.initExplicitAttribute(definition, 12);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// HasAssignments - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Nests - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// IsNestedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// HasContext - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// IsDecomposedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// Decomposes - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i5$ = CEntity.initInverseAttribute(definition, 5);
	// HasAssociations - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i6$ = CEntity.initInverseAttribute(definition, 6);
	// ObjectType - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected String a4;
	// IsDeclaredBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i7$ = CEntity.initInverseAttribute(definition, 7);
	// Declares - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i8$ = CEntity.initInverseAttribute(definition, 8);
	// IsTypedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i9$ = CEntity.initInverseAttribute(definition, 9);
	// IsDefinedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i10$ = CEntity.initInverseAttribute(definition, 10);
	// Identification - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected String a5;
	// LongDescription - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected String a6;
	// IsPredecessorTo - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i11$ = CEntity.initInverseAttribute(definition, 11);
	// IsSuccessorFrom - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i12$ = CEntity.initInverseAttribute(definition, 12);
	// OperatesOn - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i13$ = CEntity.initInverseAttribute(definition, 13);
	// Status - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected String a7;
	// WorkMethod - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected String a8;
	// IsMilestone - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected int a9;
	// Priority - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
	protected int a10;
	// TaskTime - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a11$ = CEntity.initExplicitAttribute(definition, 11);
	protected Object a11;
	// PredefinedType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a12$ = CEntity.initExplicitAttribute(definition, 12);
	protected int a12;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a11 == old) {
			a11 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a11 == old) {
			a11 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4791=INVERSE_ATTRIBUTE('HasAssignments',#4789,0,#5348,$,#5350,#8672,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssignments
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4792=INVERSE_ATTRIBUTE('Nests',#4789,1,#5489,$,#5492,#8674,#8675,.F.);
	//<01> generating methods for consolidated attribute:  Nests
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4793=INVERSE_ATTRIBUTE('IsNestedBy',#4789,2,#5489,$,#5491,#8677,$,.F.);
	//<01> generating methods for consolidated attribute:  IsNestedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4794=INVERSE_ATTRIBUTE('HasContext',#4789,3,#5450,$,#5453,#8679,#8680,.F.);
	//<01> generating methods for consolidated attribute:  HasContext
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4795=INVERSE_ATTRIBUTE('IsDecomposedBy',#4789,4,#5344,$,#5346,#8682,$,.F.);
	//<01> generating methods for consolidated attribute:  IsDecomposedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4796=INVERSE_ATTRIBUTE('Decomposes',#4789,5,#5344,$,#5347,#8684,#8685,.F.);
	//<01> generating methods for consolidated attribute:  Decomposes
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4797=INVERSE_ATTRIBUTE('HasAssociations',#4789,6,#5375,$,#5377,#8687,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssociations
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4784=EXPLICIT_ATTRIBUTE('ObjectType',#4782,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  ObjectType
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4785=INVERSE_ATTRIBUTE('IsDeclaredBy',#4782,0,#5458,$,#5460,#8660,#8661,.F.);
	//<01> generating methods for consolidated attribute:  IsDeclaredBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4786=INVERSE_ATTRIBUTE('Declares',#4782,1,#5458,$,#5461,#8663,$,.F.);
	//<01> generating methods for consolidated attribute:  Declares
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4787=INVERSE_ATTRIBUTE('IsTypedBy',#4782,2,#5470,$,#5472,#8665,#8666,.F.);
	//<01> generating methods for consolidated attribute:  IsTypedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4788=INVERSE_ATTRIBUTE('IsDefinedBy',#4782,3,#5462,$,#5464,#8668,$,.F.);
	//<01> generating methods for consolidated attribute:  IsDefinedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5049=EXPLICIT_ATTRIBUTE('Identification',#5047,0,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Identification
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5050=EXPLICIT_ATTRIBUTE('LongDescription',#5047,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  LongDescription
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5051=INVERSE_ATTRIBUTE('IsPredecessorTo',#5047,0,#5501,$,#5503,#8869,$,.F.);
	//<01> generating methods for consolidated attribute:  IsPredecessorTo
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5052=INVERSE_ATTRIBUTE('IsSuccessorFrom',#5047,1,#5501,$,#5504,#8871,$,.F.);
	//<01> generating methods for consolidated attribute:  IsSuccessorFrom
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5053=INVERSE_ATTRIBUTE('OperatesOn',#5047,2,#5365,$,#5367,#8873,$,.F.);
	//<01> generating methods for consolidated attribute:  OperatesOn
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6089=EXPLICIT_ATTRIBUTE('Status',#6087,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Status
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Status, base type: STRING
	public boolean testStatus(EIfctask type) throws SdaiException {
		return test_string(a7);
	}
	public String getStatus(EIfctask type) throws SdaiException {
		return get_string(a7);
	}
	public void setStatus(EIfctask type, String value) throws SdaiException {
		a7 = set_string(value);
	}
	public void unsetStatus(EIfctask type) throws SdaiException {
		a7 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeStatus(EIfctask type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #6090=EXPLICIT_ATTRIBUTE('WorkMethod',#6087,1,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  WorkMethod
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: WorkMethod, base type: STRING
	public boolean testWorkmethod(EIfctask type) throws SdaiException {
		return test_string(a8);
	}
	public String getWorkmethod(EIfctask type) throws SdaiException {
		return get_string(a8);
	}
	public void setWorkmethod(EIfctask type, String value) throws SdaiException {
		a8 = set_string(value);
	}
	public void unsetWorkmethod(EIfctask type) throws SdaiException {
		a8 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeWorkmethod(EIfctask type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #6091=EXPLICIT_ATTRIBUTE('IsMilestone',#6087,2,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  IsMilestone
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: IsMilestone, base type: BOOLEAN
	public boolean testIsmilestone(EIfctask type) throws SdaiException {
		return test_boolean(a9);
	}
	public boolean getIsmilestone(EIfctask type) throws SdaiException {
		return get_boolean(a9);
	}
	public void setIsmilestone(EIfctask type, boolean value) throws SdaiException {
		a9 = set_boolean(value);
	}
	public void unsetIsmilestone(EIfctask type) throws SdaiException {
		a9 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeIsmilestone(EIfctask type) throws SdaiException {
		return a9$;
	}

	//going through all the attributes: #6092=EXPLICIT_ATTRIBUTE('Priority',#6087,3,#2,$,.T.);
	//<01> generating methods for consolidated attribute:  Priority
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Priority, base type: INTEGER
	public boolean testPriority(EIfctask type) throws SdaiException {
		return test_integer(a10);
	}
	public int getPriority(EIfctask type) throws SdaiException {
		return get_integer(a10);
	}
	public void setPriority(EIfctask type, int value) throws SdaiException {
		a10 = set_integer(value);
	}
	public void unsetPriority(EIfctask type) throws SdaiException {
		a10 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributePriority(EIfctask type) throws SdaiException {
		return a10$;
	}

	//going through all the attributes: #6093=EXPLICIT_ATTRIBUTE('TaskTime',#6087,4,#6095,$,.T.);
	//<01> generating methods for consolidated attribute:  TaskTime
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TaskTime, base type: entity IfcTaskTime
	public static int usedinTasktime(EIfctask type, EIfctasktime instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a11$, domain, result);
	}
	public boolean testTasktime(EIfctask type) throws SdaiException {
		return test_instance(a11);
	}
	public EIfctasktime getTasktime(EIfctask type) throws SdaiException {
		return (EIfctasktime)get_instance(a11);
	}
	public void setTasktime(EIfctask type, EIfctasktime value) throws SdaiException {
		a11 = set_instance(a11, value);
	}
	public void unsetTasktime(EIfctask type) throws SdaiException {
		a11 = unset_instance(a11);
	}
	public static jsdai.dictionary.EAttribute attributeTasktime(EIfctask type) throws SdaiException {
		return a11$;
	}

	//going through all the attributes: #6094=EXPLICIT_ATTRIBUTE('PredefinedType',#6087,5,#3057,$,.T.);
	//<01> generating methods for consolidated attribute:  PredefinedType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:PredefinedType, base type: ENUMERATION
	public boolean testPredefinedtype(EIfctask type) throws SdaiException {
		return test_enumeration(a12);
	}
	public int getPredefinedtype(EIfctask type) throws SdaiException {
		return get_enumeration(a12);
	}
	public void setPredefinedtype(EIfctask type, int value) throws SdaiException {
		a12 = set_enumeration(value, a12$);
	}
	public void unsetPredefinedtype(EIfctask type) throws SdaiException {
		a12 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributePredefinedtype(EIfctask type) throws SdaiException {
		return a12$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = null;
			a5 = null;
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			a7 = null;
			a8 = null;
			a9 = 0;
			a10 = Integer.MIN_VALUE;
			a11 = unset_instance(a11);
			a12 = 0;
			return;
		}
		a4 = av.entityValues[0].getString(0);
		a5 = av.entityValues[2].getString(0);
		a6 = av.entityValues[2].getString(1);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
		a7 = av.entityValues[4].getString(0);
		a8 = av.entityValues[4].getString(1);
		a9 = av.entityValues[4].getBoolean(2);
		a10 = av.entityValues[4].getInteger(3);
		a11 = av.entityValues[4].getInstance(4, this, a11$);
		a12 = av.entityValues[4].getEnumeration(5, a12$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = null;
			a5 = null;
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			a7 = null;
			a8 = null;
			a9 = 0;
			a10 = Integer.MIN_VALUE;
			a11 = unset_instance(a11);
			a12 = 0;
			return;
		}
		a4 = av.entityValues[0].getString(0);
		a5 = av.entityValues[2].getString(0);
		a6 = av.entityValues[2].getString(1);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
		a7 = av.entityValues[4].getString(0);
		a8 = av.entityValues[4].getString(1);
		a9 = av.entityValues[4].getBoolean(2);
		a10 = av.entityValues[4].getInteger(3);
		a11 = av.entityValues[4].getInstance(4, this, a11$);
		a12 = av.entityValues[4].getEnumeration(5, a12$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcObject
		av.entityValues[0].setString(0, a4);
		// partial entity: IfcObjectDefinition
		// partial entity: IfcProcess
		av.entityValues[2].setString(0, a5);
		av.entityValues[2].setString(1, a6);
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
		// partial entity: IfcTask
		av.entityValues[4].setString(0, a7);
		av.entityValues[4].setString(1, a8);
		av.entityValues[4].setBoolean(2, a9);
		av.entityValues[4].setInteger(3, a10);
		av.entityValues[4].setInstance(4, a11);
		av.entityValues[4].setEnumeration(5, a12, a12$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcObject
		av.entityValues[0].setString(0, a4);
		// partial entity: IfcObjectDefinition
		// partial entity: IfcProcess
		av.entityValues[2].setString(0, a5);
		av.entityValues[2].setString(1, a6);
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
		// partial entity: IfcTask
		av.entityValues[4].setString(0, a7);
		av.entityValues[4].setString(1, a8);
		av.entityValues[4].setBoolean(2, a9);
		av.entityValues[4].setInteger(3, a10);
		av.entityValues[4].setInstance(4, a11);
		av.entityValues[4].setEnumeration(5, a12, a12$);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfctaskHasname(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfctask.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcroot.class).getAttribute(jsdai.SIfc4.CIfcroot.attributeName(null), _context))).getLogical());
	}
	public int rIfctaskCorrectpredefinedtype(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTaskTypeEnum).set(_context, get(a12$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTaskTypeEnum).set(_context, get(a12$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTaskTypeEnum).setEnum(_context, "USERDEFINED"))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTaskTypeEnum).set(_context, get(a12$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTaskTypeEnum).setEnum(_context, "USERDEFINED")), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfctask.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcobject.class).getAttribute(jsdai.SIfc4.CIfcobject.attributeObjecttype(null), _context))))).getLogical());
	}
}
