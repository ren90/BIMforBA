/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS global rule IfcRepresentationContextSameWCS

package jsdai.SIfc4;
import jsdai.lang.*;

public class RIfcrepresentationcontextsamewcs {
	boolean _already_initialized = false;
		Value _e_IsDifferent;

// global rule: IfcRepresentationContextSameWCS
	public void init(SdaiContext _context) throws SdaiException {
		if (_already_initialized) return;
		_already_initialized = true;
		
		
		
		
		_e_IsDifferent = Value.alloc(ExpressTypes.LOGICAL_TYPE);

		_e_IsDifferent.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));



																																															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).getLogical() == 2) {																																															
																																																Value _end594 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class))));
																																																Value _step594 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
																																																for (Value _implicit_152_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_152_i, _end594).getLogical() == 2;_implicit_152_i.inc(_step594)) {																																																
																																																	if (Value.alloc(ExpressTypes.LOGICAL_TYPE).instanceNotEqual(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("WorldCoordinateSystem", _context), Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(_implicit_152_i, null).getAttribute("WorldCoordinateSystem", _context)).getLogical() == 2) {																																																	
																																																		_e_IsDifferent.set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT((new jsdai.SIfc4.FIfcsamevalidprecision()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("Precision", _context), Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(_implicit_152_i, null).getAttribute("Precision", _context))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT((new jsdai.SIfc4.FIfcsameaxis2placement()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("WorldCoordinateSystem", _context), Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(_implicit_152_i, null).getAttribute("WorldCoordinateSystem", _context), Value.alloc(ExpressTypes.SET_GENERIC_TYPE).setInstancesAggregate(_context, _context.domain.getInstances(jsdai.SIfc4.CIfcgeometricrepresentationcontext.class)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("Precision", _context)))));																																																		
																																																		if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _e_IsDifferent, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 2)).getLogical() == 2) {																																																		
																																																			break;
																																																		}																																																		
																																																	}
																																																} // for - REPEAT
																																															}
	}
	public int rWr1(SdaiContext _context) throws SdaiException {
		init(_context);


		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _e_IsDifferent, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1))).getLogical());
	}

	public int run(SdaiContext _context, A_string violations) throws SdaiException {
		int result;
		result = rWr1(_context);
		if (result == 1) {
			violations.addUnordered("WR1");
		}
		return result;
	}

}
