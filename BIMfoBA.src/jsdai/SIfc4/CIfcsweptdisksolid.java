/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcSweptDiskSolid

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcsweptdisksolid extends CIfcsolidmodel implements EIfcsweptdisksolid {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcsweptdisksolid.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	protected Object a0; // Directrix - current entity - ENTITY IfcCurve
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected double a1; // Radius - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a2; // InnerRadius - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a3; // StartParam - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a4; // EndParam - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Directrix - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// Radius - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a1;
	// InnerRadius - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a2;
	// StartParam - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a3;
	// EndParam - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected double a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5730=DERIVED_ATTRIBUTE('Dim',#5728,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcsolidmodel type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcsolidmodel type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3));
	}
	public int getDim(EIfcsolidmodel type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcsolidmodel)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcsolidmodel type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #6023=EXPLICIT_ATTRIBUTE('Directrix',#6021,0,#3883,$,.F.);
	//<01> generating methods for consolidated attribute:  Directrix
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : Directrix, base type: entity IfcCurve
	public static int usedinDirectrix(EIfcsweptdisksolid type, EIfccurve instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testDirectrix(EIfcsweptdisksolid type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfccurve getDirectrix(EIfcsweptdisksolid type) throws SdaiException {
		return (EIfccurve)get_instance(a0);
	}
	public void setDirectrix(EIfcsweptdisksolid type, EIfccurve value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetDirectrix(EIfcsweptdisksolid type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeDirectrix(EIfcsweptdisksolid type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #6024=EXPLICIT_ATTRIBUTE('Radius',#6021,1,#2605,$,.F.);
	//<01> generating methods for consolidated attribute:  Radius
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Radius, base type: REAL
	public boolean testRadius(EIfcsweptdisksolid type) throws SdaiException {
		return test_double(a1);
	}
	public double getRadius(EIfcsweptdisksolid type) throws SdaiException {
		return get_double(a1);
	}
	public void setRadius(EIfcsweptdisksolid type, double value) throws SdaiException {
		a1 = set_double(value);
	}
	public void unsetRadius(EIfcsweptdisksolid type) throws SdaiException {
		a1 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeRadius(EIfcsweptdisksolid type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6025=EXPLICIT_ATTRIBUTE('InnerRadius',#6021,2,#2605,$,.T.);
	//<01> generating methods for consolidated attribute:  InnerRadius
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: InnerRadius, base type: REAL
	public boolean testInnerradius(EIfcsweptdisksolid type) throws SdaiException {
		return test_double(a2);
	}
	public double getInnerradius(EIfcsweptdisksolid type) throws SdaiException {
		return get_double(a2);
	}
	public void setInnerradius(EIfcsweptdisksolid type, double value) throws SdaiException {
		a2 = set_double(value);
	}
	public void unsetInnerradius(EIfcsweptdisksolid type) throws SdaiException {
		a2 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeInnerradius(EIfcsweptdisksolid type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #6026=EXPLICIT_ATTRIBUTE('StartParam',#6021,3,#2599,$,.T.);
	//<01> generating methods for consolidated attribute:  StartParam
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: StartParam, base type: REAL
	public boolean testStartparam(EIfcsweptdisksolid type) throws SdaiException {
		return test_double(a3);
	}
	public double getStartparam(EIfcsweptdisksolid type) throws SdaiException {
		return get_double(a3);
	}
	public void setStartparam(EIfcsweptdisksolid type, double value) throws SdaiException {
		a3 = set_double(value);
	}
	public void unsetStartparam(EIfcsweptdisksolid type) throws SdaiException {
		a3 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeStartparam(EIfcsweptdisksolid type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #6027=EXPLICIT_ATTRIBUTE('EndParam',#6021,4,#2599,$,.T.);
	//<01> generating methods for consolidated attribute:  EndParam
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: EndParam, base type: REAL
	public boolean testEndparam(EIfcsweptdisksolid type) throws SdaiException {
		return test_double(a4);
	}
	public double getEndparam(EIfcsweptdisksolid type) throws SdaiException {
		return get_double(a4);
	}
	public void setEndparam(EIfcsweptdisksolid type, double value) throws SdaiException {
		a4 = set_double(value);
	}
	public void unsetEndparam(EIfcsweptdisksolid type) throws SdaiException {
		a4 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeEndparam(EIfcsweptdisksolid type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			return;
		}
		a0 = av.entityValues[3].getInstance(0, this, a0$);
		a1 = av.entityValues[3].getDouble(1);
		a2 = av.entityValues[3].getDouble(2);
		a3 = av.entityValues[3].getDouble(3);
		a4 = av.entityValues[3].getDouble(4);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			return;
		}
		a0 = av.entityValues[3].getInstance(0, this, a0$);
		a1 = av.entityValues[3].getDouble(1);
		a2 = av.entityValues[3].getDouble(2);
		a3 = av.entityValues[3].getDouble(3);
		a4 = av.entityValues[3].getDouble(4);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSolidModel
		// partial entity: IfcSweptDiskSolid
		av.entityValues[3].setInstance(0, a0);
		av.entityValues[3].setDouble(1, a1);
		av.entityValues[3].setDouble(2, a2);
		av.entityValues[3].setDouble(3, a3);
		av.entityValues[3].setDouble(4, a4);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSolidModel
		// partial entity: IfcSweptDiskSolid
		av.entityValues[3].setInstance(0, a0);
		av.entityValues[3].setDouble(1, a1);
		av.entityValues[3].setDouble(2, a2);
		av.entityValues[3].setDouble(3, a3);
		av.entityValues[3].setDouble(4, a4);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcsweptdisksolidDirectrixbounded(SdaiContext _context) throws SdaiException {
	





											Value _elements310 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
											_elements310.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCCONIC", "IFC4"));
											_elements310.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCBOUNDEDCURVE", "IFC4"));
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcParameterValue).set(_context, get(a3$))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcParameterValue).set(_context, get(a4$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc().mulOrIntersect(_context, _elements310, Value.alloc(jsdai.SIfc4.CIfccurve.definition).set(_context, get(a0$)).typeOfV(_context))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)))).getLogical());
	}
	public int rIfcsweptdisksolidInnerradiussize(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPositiveLengthMeasure).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPositiveLengthMeasure).set(_context, get(a1$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPositiveLengthMeasure).set(_context, get(a2$))))).getLogical());
	}
	public int rIfcsweptdisksolidDirectrixdim(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfccurve.definition).set(_context, get(a0$)).getAttribute(jsdai.SIfc4.CIfccurve.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3))).getLogical());
	}
}
