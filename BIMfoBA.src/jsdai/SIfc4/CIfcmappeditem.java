/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcMappedItem

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcmappeditem extends CIfcrepresentationitem implements EIfcmappeditem {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcmappeditem.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected Object a0; // MappingSource - current entity - ENTITY IfcRepresentationMap
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // MappingTarget - current entity - ENTITY IfcCartesianTransformationOperator
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// MappingSource - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// MappingTarget - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4629=EXPLICIT_ATTRIBUTE('MappingSource',#4627,0,#5554,$,.F.);
	//<01> generating methods for consolidated attribute:  MappingSource
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : MappingSource, base type: entity IfcRepresentationMap
	public static int usedinMappingsource(EIfcmappeditem type, EIfcrepresentationmap instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testMappingsource(EIfcmappeditem type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcrepresentationmap getMappingsource(EIfcmappeditem type) throws SdaiException {
		return (EIfcrepresentationmap)get_instance(a0);
	}
	public void setMappingsource(EIfcmappeditem type, EIfcrepresentationmap value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetMappingsource(EIfcmappeditem type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeMappingsource(EIfcmappeditem type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4630=EXPLICIT_ATTRIBUTE('MappingTarget',#4627,1,#3571,$,.F.);
	//<01> generating methods for consolidated attribute:  MappingTarget
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : MappingTarget, base type: entity IfcCartesianTransformationOperator
	public static int usedinMappingtarget(EIfcmappeditem type, EIfccartesiantransformationoperator instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testMappingtarget(EIfcmappeditem type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfccartesiantransformationoperator getMappingtarget(EIfcmappeditem type) throws SdaiException {
		return (EIfccartesiantransformationoperator)get_instance(a1);
	}
	public void setMappingtarget(EIfcmappeditem type, EIfccartesiantransformationoperator value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetMappingtarget(EIfcmappeditem type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeMappingtarget(EIfcmappeditem type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcMappedItem
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcMappedItem
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcRepresentationItem
	}
}
