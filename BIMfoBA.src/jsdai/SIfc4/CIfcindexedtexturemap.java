/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcIndexedTextureMap

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcindexedtexturemap extends CIfctexturecoordinate implements EIfcindexedtexturemap {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcindexedtexturemap.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Maps: protected AIfcsurfacetexture a0;   Maps - java inheritance - LIST OF ENTITY
	protected Object a1; // MappedTo - current entity - ENTITY IfcTessellatedFaceSet
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // TexCoords - current entity - ENTITY IfcTextureVertexList
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Maps - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected AIfcsurfacetexture a0;
	// MappedTo - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// TexCoords - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a2 == old) {
			a2 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6197=EXPLICIT_ATTRIBUTE('Maps',#6195,0,#7179,$,.F.);
	//<01> generating methods for consolidated attribute:  Maps
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Maps, base type: LIST OF ENTITY
	public static int usedinMaps(EIfctexturecoordinate type, EIfcsurfacetexture instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #4487=EXPLICIT_ATTRIBUTE('MappedTo',#4485,0,#6151,$,.F.);
	//<01> generating methods for consolidated attribute:  MappedTo
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : MappedTo, base type: entity IfcTessellatedFaceSet
	public static int usedinMappedto(EIfcindexedtexturemap type, EIfctessellatedfaceset instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testMappedto(EIfcindexedtexturemap type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfctessellatedfaceset getMappedto(EIfcindexedtexturemap type) throws SdaiException {
		return (EIfctessellatedfaceset)get_instance(a1);
	}
	public void setMappedto(EIfcindexedtexturemap type, EIfctessellatedfaceset value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetMappedto(EIfcindexedtexturemap type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeMappedto(EIfcindexedtexturemap type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4488=EXPLICIT_ATTRIBUTE('TexCoords',#4485,1,#6209,$,.F.);
	//<01> generating methods for consolidated attribute:  TexCoords
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TexCoords, base type: entity IfcTextureVertexList
	public static int usedinTexcoords(EIfcindexedtexturemap type, EIfctexturevertexlist instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testTexcoords(EIfcindexedtexturemap type) throws SdaiException {
		return test_instance(a2);
	}
	public EIfctexturevertexlist getTexcoords(EIfcindexedtexturemap type) throws SdaiException {
		return (EIfctexturevertexlist)get_instance(a2);
	}
	public void setTexcoords(EIfcindexedtexturemap type, EIfctexturevertexlist value) throws SdaiException {
		a2 = set_instance(a2, value);
	}
	public void unsetTexcoords(EIfcindexedtexturemap type) throws SdaiException {
		a2 = unset_instance(a2);
	}
	public static jsdai.dictionary.EAttribute attributeTexcoords(EIfcindexedtexturemap type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a2 = unset_instance(a2);
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a2 = av.entityValues[0].getInstance(1, this, a2$);
		a0 = (AIfcsurfacetexture)av.entityValues[2].getInstanceAggregate(0, a0$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a2 = unset_instance(a2);
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a2 = av.entityValues[0].getInstance(1, this, a2$);
		a0 = (AIfcsurfacetexture)av.entityValues[2].getInstanceAggregate(0, a0$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcIndexedTextureMap
		av.entityValues[0].setInstance(0, a1);
		av.entityValues[0].setInstance(1, a2);
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[2].setInstanceAggregate(0, a0);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcIndexedTextureMap
		av.entityValues[0].setInstance(0, a1);
		av.entityValues[0].setInstance(1, a2);
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextureCoordinate
		av.entityValues[2].setInstanceAggregate(0, a0);
	}
}
