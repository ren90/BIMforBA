/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcAppliedValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcappliedvalue extends CEntity implements EIfcappliedvalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcappliedvalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // Description - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // AppliedValue - current entity - SELECT IfcAppliedValueSelect
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2$$; // current SELECT path indicator
	protected Object a3; // UnitBasis - current entity - ENTITY IfcMeasureWithUnit
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // ApplicableDate - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a5; // FixedUntilDate - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected String a6; // Category - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected String a7; // Condition - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a8; // ArithmeticOperator - current entity - ENUMERATION IfcArithmeticOperatorEnum
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected AIfcappliedvalue a9; // Components - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	// HasExternalReference: protected Object  - inverse - current -  ENTITY IfcExternalReferenceRelationship
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Description - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// AppliedValue - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	protected int a2$$;
	// UnitBasis - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// ApplicableDate - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// FixedUntilDate - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected String a5;
	// Category - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected String a6;
	// Condition - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected String a7;
	// ArithmeticOperator - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected int a8;
	// Components - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected AIfcappliedvalue a9;
	// HasExternalReference - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
		changeReferencesAggregate(a9, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
		changeReferencesAggregate(a9, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3303=EXPLICIT_ATTRIBUTE('Name',#3301,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfcappliedvalue type) throws SdaiException {
		return test_string(a0);
	}
	public String getName(EIfcappliedvalue type) throws SdaiException {
		return get_string(a0);
	}
	public void setName(EIfcappliedvalue type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetName(EIfcappliedvalue type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfcappliedvalue type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3304=EXPLICIT_ATTRIBUTE('Description',#3301,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Description, base type: STRING
	public boolean testDescription(EIfcappliedvalue type) throws SdaiException {
		return test_string(a1);
	}
	public String getDescription(EIfcappliedvalue type) throws SdaiException {
		return get_string(a1);
	}
	public void setDescription(EIfcappliedvalue type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetDescription(EIfcappliedvalue type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeDescription(EIfcappliedvalue type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3305=EXPLICIT_ATTRIBUTE('AppliedValue',#3301,2,#3113,$,.T.);
	//<01> generating methods for consolidated attribute:  AppliedValue
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: AppliedValue
	public static int usedinAppliedvalue(EIfcappliedvalue type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public int testAppliedvalue(EIfcappliedvalue type) throws SdaiException {
		return test_select(a2, a2$$);
	}

	public EEntity getAppliedvalue(EIfcappliedvalue type) throws SdaiException { // case 1
		return get_instance_select(a2);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return get_double_select(a2, a2$$, 2);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return get_double_select(a2, a2$$, 3);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return get_double_select(a2, a2$$, 4);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return get_double_select(a2, a2$$, 5);
	}
	public A_integer getAppliedvalue(EIfcappliedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)get_aggregate_select(a2, a2$$, 6);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return get_double_select(a2, a2$$, 7);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return get_double_select(a2, a2$$, 8);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return get_double_select(a2, a2$$, 9);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return get_double_select(a2, a2$$, 10);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return get_double_select(a2, a2$$, 11);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return get_double_select(a2, a2$$, 12);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return get_double_select(a2, a2$$, 13);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return get_double_select(a2, a2$$, 14);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcenergymeasure node1) throws SdaiException { // case 15
		return get_double_select(a2, a2$$, 15);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcforcemeasure node1) throws SdaiException { // case 16
		return get_double_select(a2, a2$$, 16);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return get_double_select(a2, a2$$, 17);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return get_double_select(a2, a2$$, 18);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return get_double_select(a2, a2$$, 19);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return get_double_select(a2, a2$$, 20);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return get_double_select(a2, a2$$, 21);
	}
	public int getAppliedvalue(EIfcappliedvalue type, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return get_integer_select(a2, a2$$, 22);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return get_double_select(a2, a2$$, 23);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return get_double_select(a2, a2$$, 24);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return get_double_select(a2, a2$$, 25);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return get_double_select(a2, a2$$, 26);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return get_double_select(a2, a2$$, 27);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return get_double_select(a2, a2$$, 28);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return get_double_select(a2, a2$$, 29);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return get_double_select(a2, a2$$, 30);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return get_double_select(a2, a2$$, 31);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return get_double_select(a2, a2$$, 32);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return get_double_select(a2, a2$$, 33);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return get_double_select(a2, a2$$, 34);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return get_double_select(a2, a2$$, 35);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return get_double_select(a2, a2$$, 36);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return get_double_select(a2, a2$$, 37);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return get_double_select(a2, a2$$, 38);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return get_double_select(a2, a2$$, 39);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return get_double_select(a2, a2$$, 40);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return get_double_select(a2, a2$$, 41);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return get_double_select(a2, a2$$, 42);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return get_double_select(a2, a2$$, 43);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return get_double_select(a2, a2$$, 44);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcphmeasure node1) throws SdaiException { // case 45
		return get_double_select(a2, a2$$, 45);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return get_double_select(a2, a2$$, 46);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcpowermeasure node1) throws SdaiException { // case 47
		return get_double_select(a2, a2$$, 47);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return get_double_select(a2, a2$$, 48);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return get_double_select(a2, a2$$, 49);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return get_double_select(a2, a2$$, 50);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return get_double_select(a2, a2$$, 51);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return get_double_select(a2, a2$$, 52);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return get_double_select(a2, a2$$, 53);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return get_double_select(a2, a2$$, 54);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return get_double_select(a2, a2$$, 55);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return get_double_select(a2, a2$$, 56);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return get_double_select(a2, a2$$, 57);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return get_double_select(a2, a2$$, 58);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return get_double_select(a2, a2$$, 59);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return get_double_select(a2, a2$$, 60);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return get_double_select(a2, a2$$, 61);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return get_double_select(a2, a2$$, 62);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return get_double_select(a2, a2$$, 63);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return get_double_select(a2, a2$$, 64);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return get_double_select(a2, a2$$, 65);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return get_double_select(a2, a2$$, 66);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return get_double_select(a2, a2$$, 67);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfctorquemeasure node1) throws SdaiException { // case 68
		return get_double_select(a2, a2$$, 68);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return get_double_select(a2, a2$$, 69);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return get_double_select(a2, a2$$, 70);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return get_double_select(a2, a2$$, 71);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return get_double_select(a2, a2$$, 72);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return get_double_select(a2, a2$$, 73);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcareameasure node1) throws SdaiException { // case 74
		return get_double_select(a2, a2$$, 74);
	}
	public A_double getAppliedvalue(EIfcappliedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)get_aggregate_select(a2, a2$$, 75);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return get_double_select(a2, a2$$, 76);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfccountmeasure node1) throws SdaiException { // case 77
		return get_double_select(a2, a2$$, 77);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return get_string_select(a2, a2$$, 78);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return get_double_select(a2, a2$$, 79);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfclengthmeasure node1) throws SdaiException { // case 80
		return get_double_select(a2, a2$$, 80);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return get_double_select(a2, a2$$, 81);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcmassmeasure node1) throws SdaiException { // case 82
		return get_double_select(a2, a2$$, 82);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return get_double_select(a2, a2$$, 83);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return get_double_select(a2, a2$$, 84);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return get_double_select(a2, a2$$, 85);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcparametervalue node1) throws SdaiException { // case 86
		return get_double_select(a2, a2$$, 86);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return get_double_select(a2, a2$$, 87);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return get_double_select(a2, a2$$, 88);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return get_double_select(a2, a2$$, 89);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return get_double_select(a2, a2$$, 90);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcratiomeasure node1) throws SdaiException { // case 91
		return get_double_select(a2, a2$$, 91);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return get_double_select(a2, a2$$, 92);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return get_double_select(a2, a2$$, 93);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfctimemeasure node1) throws SdaiException { // case 94
		return get_double_select(a2, a2$$, 94);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return get_double_select(a2, a2$$, 95);
	}
	public boolean getAppliedvalue(EIfcappliedvalue type, EIfcboolean node1) throws SdaiException { // case 96
		return get_boolean_select(a2, a2$$, 96);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfcdate node1) throws SdaiException { // case 97
		return get_string_select(a2, a2$$, 97);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfcdatetime node1) throws SdaiException { // case 98
		return get_string_select(a2, a2$$, 98);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfcduration node1) throws SdaiException { // case 99
		return get_string_select(a2, a2$$, 99);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfcidentifier node1) throws SdaiException { // case 100
		return get_string_select(a2, a2$$, 100);
	}
	public int getAppliedvalue(EIfcappliedvalue type, EIfcinteger node1) throws SdaiException { // case 101
		return get_integer_select(a2, a2$$, 101);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfclabel node1) throws SdaiException { // case 102
		return get_string_select(a2, a2$$, 102);
	}
	public int getAppliedvalue(EIfcappliedvalue type, EIfclogical node1) throws SdaiException { // case 103
		return get_logical_select(a2, a2$$, 103);
	}
	public double getAppliedvalue(EIfcappliedvalue type, EIfcreal node1) throws SdaiException { // case 104
		return get_double_select(a2, a2$$, 104);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfctext node1) throws SdaiException { // case 105
		return get_string_select(a2, a2$$, 105);
	}
	public String getAppliedvalue(EIfcappliedvalue type, EIfctime node1) throws SdaiException { // case 106
		return get_string_select(a2, a2$$, 106);
	}
	public int getAppliedvalue(EIfcappliedvalue type, EIfctimestamp node1) throws SdaiException { // case 107
		return get_integer_select(a2, a2$$, 107);
	}

	public void setAppliedvalue(EIfcappliedvalue type, EEntity value) throws SdaiException { // case 1
		a2 = set_instance(a2, value);
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		a2 = set_double_select(value);
		a2$$ = 2;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		a2 = set_double_select(value);
		a2$$ = 3;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		a2 = set_double_select(value);
		a2$$ = 4;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		a2 = set_double_select(value);
		a2$$ = 5;
	}
	public A_integer createAppliedvalue(EIfcappliedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		a2 = create_aggregate_integer((A_integer)a2, a2$, a2$$ = 6);
		return (A_integer)a2;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		a2 = set_double_select(value);
		a2$$ = 7;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		a2 = set_double_select(value);
		a2$$ = 8;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		a2 = set_double_select(value);
		a2$$ = 9;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		a2 = set_double_select(value);
		a2$$ = 10;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		a2 = set_double_select(value);
		a2$$ = 11;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		a2 = set_double_select(value);
		a2$$ = 12;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		a2 = set_double_select(value);
		a2$$ = 13;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		a2 = set_double_select(value);
		a2$$ = 14;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		a2 = set_double_select(value);
		a2$$ = 15;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		a2 = set_double_select(value);
		a2$$ = 16;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		a2 = set_double_select(value);
		a2$$ = 17;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		a2 = set_double_select(value);
		a2$$ = 18;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		a2 = set_double_select(value);
		a2$$ = 19;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		a2 = set_double_select(value);
		a2$$ = 20;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		a2 = set_double_select(value);
		a2$$ = 21;
	}
	public void setAppliedvalue(EIfcappliedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		a2 = set_integer_select(value);
		a2$$ = 22;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		a2 = set_double_select(value);
		a2$$ = 23;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		a2 = set_double_select(value);
		a2$$ = 24;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		a2 = set_double_select(value);
		a2$$ = 25;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		a2 = set_double_select(value);
		a2$$ = 26;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		a2 = set_double_select(value);
		a2$$ = 27;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		a2 = set_double_select(value);
		a2$$ = 28;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		a2 = set_double_select(value);
		a2$$ = 29;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		a2 = set_double_select(value);
		a2$$ = 30;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		a2 = set_double_select(value);
		a2$$ = 31;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		a2 = set_double_select(value);
		a2$$ = 32;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		a2 = set_double_select(value);
		a2$$ = 33;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		a2 = set_double_select(value);
		a2$$ = 34;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		a2 = set_double_select(value);
		a2$$ = 35;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		a2 = set_double_select(value);
		a2$$ = 36;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		a2 = set_double_select(value);
		a2$$ = 37;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		a2 = set_double_select(value);
		a2$$ = 38;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		a2 = set_double_select(value);
		a2$$ = 39;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		a2 = set_double_select(value);
		a2$$ = 40;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		a2 = set_double_select(value);
		a2$$ = 41;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		a2 = set_double_select(value);
		a2$$ = 42;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		a2 = set_double_select(value);
		a2$$ = 43;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		a2 = set_double_select(value);
		a2$$ = 44;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		a2 = set_double_select(value);
		a2$$ = 45;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		a2 = set_double_select(value);
		a2$$ = 46;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		a2 = set_double_select(value);
		a2$$ = 47;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		a2 = set_double_select(value);
		a2$$ = 48;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		a2 = set_double_select(value);
		a2$$ = 49;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		a2 = set_double_select(value);
		a2$$ = 50;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		a2 = set_double_select(value);
		a2$$ = 51;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		a2 = set_double_select(value);
		a2$$ = 52;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		a2 = set_double_select(value);
		a2$$ = 53;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		a2 = set_double_select(value);
		a2$$ = 54;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		a2 = set_double_select(value);
		a2$$ = 55;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		a2 = set_double_select(value);
		a2$$ = 56;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		a2 = set_double_select(value);
		a2$$ = 57;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		a2 = set_double_select(value);
		a2$$ = 58;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		a2 = set_double_select(value);
		a2$$ = 59;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		a2 = set_double_select(value);
		a2$$ = 60;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		a2 = set_double_select(value);
		a2$$ = 61;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		a2 = set_double_select(value);
		a2$$ = 62;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		a2 = set_double_select(value);
		a2$$ = 63;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		a2 = set_double_select(value);
		a2$$ = 64;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		a2 = set_double_select(value);
		a2$$ = 65;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		a2 = set_double_select(value);
		a2$$ = 66;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		a2 = set_double_select(value);
		a2$$ = 67;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		a2 = set_double_select(value);
		a2$$ = 68;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		a2 = set_double_select(value);
		a2$$ = 69;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		a2 = set_double_select(value);
		a2$$ = 70;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		a2 = set_double_select(value);
		a2$$ = 71;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		a2 = set_double_select(value);
		a2$$ = 72;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		a2 = set_double_select(value);
		a2$$ = 73;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcareameasure node1) throws SdaiException { // case 74
		a2 = set_double_select(value);
		a2$$ = 74;
	}
	public A_double createAppliedvalue(EIfcappliedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		a2 = create_aggregate_double((A_double)a2, a2$, a2$$ = 75);
		return (A_double)a2;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		a2 = set_double_select(value);
		a2$$ = 76;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		a2 = set_double_select(value);
		a2$$ = 77;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		a2 = set_string(value);
		a2$$ = 78;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		a2 = set_double_select(value);
		a2$$ = 79;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		a2 = set_double_select(value);
		a2$$ = 80;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		a2 = set_double_select(value);
		a2$$ = 81;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		a2 = set_double_select(value);
		a2$$ = 82;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		a2 = set_double_select(value);
		a2$$ = 83;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		a2 = set_double_select(value);
		a2$$ = 84;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		a2 = set_double_select(value);
		a2$$ = 85;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		a2 = set_double_select(value);
		a2$$ = 86;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		a2 = set_double_select(value);
		a2$$ = 87;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		a2 = set_double_select(value);
		a2$$ = 88;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		a2 = set_double_select(value);
		a2$$ = 89;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		a2 = set_double_select(value);
		a2$$ = 90;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		a2 = set_double_select(value);
		a2$$ = 91;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		a2 = set_double_select(value);
		a2$$ = 92;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		a2 = set_double_select(value);
		a2$$ = 93;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		a2 = set_double_select(value);
		a2$$ = 94;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		a2 = set_double_select(value);
		a2$$ = 95;
	}
	public void setAppliedvalue(EIfcappliedvalue type, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		a2 = set_boolean_select(value);
		a2$$ = 96;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfcdate node1) throws SdaiException { // case 97
		a2 = set_string(value);
		a2$$ = 97;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfcdatetime node1) throws SdaiException { // case 98
		a2 = set_string(value);
		a2$$ = 98;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfcduration node1) throws SdaiException { // case 99
		a2 = set_string(value);
		a2$$ = 99;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfcidentifier node1) throws SdaiException { // case 100
		a2 = set_string(value);
		a2$$ = 100;
	}
	public void setAppliedvalue(EIfcappliedvalue type, int value, EIfcinteger node1) throws SdaiException { // case 101
		a2 = set_integer_select(value);
		a2$$ = 101;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfclabel node1) throws SdaiException { // case 102
		a2 = set_string(value);
		a2$$ = 102;
	}
	public void setAppliedvalue(EIfcappliedvalue type, int value, EIfclogical node1) throws SdaiException { // case 103
		a2 = set_logical_select(value);
		a2$$ = 103;
	}
	public void setAppliedvalue(EIfcappliedvalue type, double value, EIfcreal node1) throws SdaiException { // case 104
		a2 = set_double_select(value);
		a2$$ = 104;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfctext node1) throws SdaiException { // case 105
		a2 = set_string(value);
		a2$$ = 105;
	}
	public void setAppliedvalue(EIfcappliedvalue type, String value, EIfctime node1) throws SdaiException { // case 106
		a2 = set_string(value);
		a2$$ = 106;
	}
	public void setAppliedvalue(EIfcappliedvalue type, int value, EIfctimestamp node1) throws SdaiException { // case 107
		a2 = set_integer_select(value);
		a2$$ = 107;
	}

	public void unsetAppliedvalue(EIfcappliedvalue type) throws SdaiException {
		a2 = unset_select(a2);
		a2$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeAppliedvalue(EIfcappliedvalue type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3306=EXPLICIT_ATTRIBUTE('UnitBasis',#3301,3,#4732,$,.T.);
	//<01> generating methods for consolidated attribute:  UnitBasis
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : UnitBasis, base type: entity IfcMeasureWithUnit
	public static int usedinUnitbasis(EIfcappliedvalue type, EIfcmeasurewithunit instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testUnitbasis(EIfcappliedvalue type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfcmeasurewithunit getUnitbasis(EIfcappliedvalue type) throws SdaiException {
		return (EIfcmeasurewithunit)get_instance(a3);
	}
	public void setUnitbasis(EIfcappliedvalue type, EIfcmeasurewithunit value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetUnitbasis(EIfcappliedvalue type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributeUnitbasis(EIfcappliedvalue type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #3307=EXPLICIT_ATTRIBUTE('ApplicableDate',#3301,4,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  ApplicableDate
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ApplicableDate, base type: STRING
	public boolean testApplicabledate(EIfcappliedvalue type) throws SdaiException {
		return test_string(a4);
	}
	public String getApplicabledate(EIfcappliedvalue type) throws SdaiException {
		return get_string(a4);
	}
	public void setApplicabledate(EIfcappliedvalue type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetApplicabledate(EIfcappliedvalue type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeApplicabledate(EIfcappliedvalue type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #3308=EXPLICIT_ATTRIBUTE('FixedUntilDate',#3301,5,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  FixedUntilDate
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: FixedUntilDate, base type: STRING
	public boolean testFixeduntildate(EIfcappliedvalue type) throws SdaiException {
		return test_string(a5);
	}
	public String getFixeduntildate(EIfcappliedvalue type) throws SdaiException {
		return get_string(a5);
	}
	public void setFixeduntildate(EIfcappliedvalue type, String value) throws SdaiException {
		a5 = set_string(value);
	}
	public void unsetFixeduntildate(EIfcappliedvalue type) throws SdaiException {
		a5 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeFixeduntildate(EIfcappliedvalue type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #3309=EXPLICIT_ATTRIBUTE('Category',#3301,6,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Category
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Category, base type: STRING
	public boolean testCategory(EIfcappliedvalue type) throws SdaiException {
		return test_string(a6);
	}
	public String getCategory(EIfcappliedvalue type) throws SdaiException {
		return get_string(a6);
	}
	public void setCategory(EIfcappliedvalue type, String value) throws SdaiException {
		a6 = set_string(value);
	}
	public void unsetCategory(EIfcappliedvalue type) throws SdaiException {
		a6 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeCategory(EIfcappliedvalue type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #3310=EXPLICIT_ATTRIBUTE('Condition',#3301,7,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Condition
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Condition, base type: STRING
	public boolean testCondition(EIfcappliedvalue type) throws SdaiException {
		return test_string(a7);
	}
	public String getCondition(EIfcappliedvalue type) throws SdaiException {
		return get_string(a7);
	}
	public void setCondition(EIfcappliedvalue type, String value) throws SdaiException {
		a7 = set_string(value);
	}
	public void unsetCondition(EIfcappliedvalue type) throws SdaiException {
		a7 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeCondition(EIfcappliedvalue type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #3311=EXPLICIT_ATTRIBUTE('ArithmeticOperator',#3301,8,#2721,$,.T.);
	//<01> generating methods for consolidated attribute:  ArithmeticOperator
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:ArithmeticOperator, base type: ENUMERATION
	public boolean testArithmeticoperator(EIfcappliedvalue type) throws SdaiException {
		return test_enumeration(a8);
	}
	public int getArithmeticoperator(EIfcappliedvalue type) throws SdaiException {
		return get_enumeration(a8);
	}
	public void setArithmeticoperator(EIfcappliedvalue type, int value) throws SdaiException {
		a8 = set_enumeration(value, a8$);
	}
	public void unsetArithmeticoperator(EIfcappliedvalue type) throws SdaiException {
		a8 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeArithmeticoperator(EIfcappliedvalue type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #3312=EXPLICIT_ATTRIBUTE('Components',#3301,9,#6816,$,.T.);
	//<01> generating methods for consolidated attribute:  Components
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Components, base type: LIST OF ENTITY
	public static int usedinComponents(EIfcappliedvalue type, EIfcappliedvalue instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	public boolean testComponents(EIfcappliedvalue type) throws SdaiException {
		return test_aggregate(a9);
	}
	public AIfcappliedvalue getComponents(EIfcappliedvalue type) throws SdaiException {
		return (AIfcappliedvalue)get_aggregate(a9);
	}
	public AIfcappliedvalue createComponents(EIfcappliedvalue type) throws SdaiException {
		a9 = (AIfcappliedvalue)create_aggregate_class(a9, a9$,  AIfcappliedvalue.class, 0);
		return a9;
	}
	public void unsetComponents(EIfcappliedvalue type) throws SdaiException {
		unset_aggregate(a9);
		a9 = null;
	}
	public static jsdai.dictionary.EAttribute attributeComponents(EIfcappliedvalue type) throws SdaiException {
		return a9$;
	}

	//going through all the attributes: #3313=INVERSE_ATTRIBUTE('HasExternalReference',#3301,0,#4231,$,#4234,#7588,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReference
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - HasExternalReference : SET[0:-2147483648] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects
	public AIfcexternalreferencerelationship getHasexternalreference(EIfcappliedvalue type, ASdaiModel domain) throws SdaiException {
		AIfcexternalreferencerelationship result = (AIfcexternalreferencerelationship)get_inverse_aggregate(i0$);
		CIfcexternalreferencerelationship.usedinRelatedresourceobjects(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeHasexternalreference(EIfcappliedvalue type) throws SdaiException {
		return i0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = 0;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getMixed(2,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getString(4);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[0].getString(7);
		a8 = av.entityValues[0].getEnumeration(8, a8$);
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(9, a9$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = 0;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getMixed(2,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getString(4);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[0].getString(7);
		a8 = av.entityValues[0].getEnumeration(8, a8$);
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(9, a9$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAppliedValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setMixed(2, a2, a2$, a2$$);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setString(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		av.entityValues[0].setString(7, a7);
		av.entityValues[0].setEnumeration(8, a8, a8$);
		av.entityValues[0].setInstanceAggregate(9, a9);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAppliedValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setMixed(2, a2, a2$, a2$$);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setString(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		av.entityValues[0].setString(7, a7);
		av.entityValues[0].setEnumeration(8, a8, a8$);
		av.entityValues[0].setInstanceAggregate(9, a9);
	}
}
