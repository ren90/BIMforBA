/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcSameValidPrecision

package jsdai.SIfc4;
import jsdai.lang.*;


public class FIfcsamevalidprecision {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Epsilon1;
	Value _nonvar__e_Epsilon2;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_ValidEps1;
	Value _e_ValidEps2;
	Value _e_DefaultEps;
	Value _e_DerivationOfEps;
	Value _e_UpperEps;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Epsilon1, Value _e_Epsilon2) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Epsilon1 = Value.alloc(ExpressTypes.REAL_TYPE).set(_e_Epsilon1);
		_nonvar__e_Epsilon2 = Value.alloc(ExpressTypes.REAL_TYPE).set(_e_Epsilon2);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_ValidEps1 = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_ValidEps2 = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_DefaultEps = Value.alloc(ExpressTypes.REAL_TYPE).set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 1.0E-6));
		_e_DerivationOfEps = Value.alloc(ExpressTypes.REAL_TYPE).set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 1.001));
		_e_UpperEps = Value.alloc(ExpressTypes.REAL_TYPE).set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 1.0));
		// end of initialization of local variables





																																			_e_ValidEps1.set(_context, Value.alloc(ExpressTypes.GENERIC_TYPE).NVL(_context, _nonvar__e_Epsilon1, _e_DefaultEps));



																																			_e_ValidEps2.set(_context, Value.alloc(ExpressTypes.GENERIC_TYPE).NVL(_context, _nonvar__e_Epsilon2, _e_DefaultEps));




		if (true) return Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0), _e_ValidEps1), Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _e_ValidEps1, Value.alloc(ExpressTypes.REAL_TYPE).mulOrIntersect(_context, _e_DerivationOfEps, _e_ValidEps2))), Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _e_ValidEps2, Value.alloc(ExpressTypes.REAL_TYPE).mulOrIntersect(_context, _e_DerivationOfEps, _e_ValidEps1))), Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _e_ValidEps2, _e_UpperEps))).check(_context, ExpressTypes.LOGICAL_TYPE);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
