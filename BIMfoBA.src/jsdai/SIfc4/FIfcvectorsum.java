/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcVectorSum

package jsdai.SIfc4;
import jsdai.lang.*;












public class FIfcvectorsum {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Arg1;
	Value _nonvar__e_Arg2;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_Result;
	Value _e_Res;
	Value _e_Vec1;
	Value _e_Vec2;
	Value _e_Mag;
	Value _e_Mag1;
	Value _e_Mag2;
	Value _e_Ndim;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Arg1, Value _e_Arg2) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Arg1 = Value.alloc(jsdai.SIfc4.SIfc4._st_IfcVectorOrDirection).set(_e_Arg1);
		_nonvar__e_Arg2 = Value.alloc(jsdai.SIfc4.SIfc4._st_IfcVectorOrDirection).set(_e_Arg2);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_Result = Value.alloc(jsdai.SIfc4.CIfcvector.definition);
		_e_Res = Value.alloc(jsdai.SIfc4.CIfcdirection.definition);
		_e_Vec1 = Value.alloc(jsdai.SIfc4.CIfcdirection.definition);
		_e_Vec2 = Value.alloc(jsdai.SIfc4.CIfcdirection.definition);
		_e_Mag = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_Mag1 = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_Mag2 = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_Ndim = Value.alloc(ExpressTypes.INTEGER_TYPE);
		// end of initialization of local variables





																																															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Arg1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Arg2))), Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _nonvar__e_Arg1.getAttribute("Dim", _context), _nonvar__e_Arg2.getAttribute("Dim", _context))).getLogical() == 2) {																																															
		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, Value.alloc(ExpressTypes.GENERIC_TYPE).unset()).check(_context, jsdai.SIfc4.CIfcvector.definition);
																																															} else {																																															
																																																{ // BEGIN
																																																	if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCVECTOR", "IFC4"), _nonvar__e_Arg1.typeOfV(_context)).getLogical() == 2) {																																																	
																																																		_e_Mag1.set(_context, _nonvar__e_Arg1.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeMagnitude(null), _context));																																																	
																																																		_e_Vec1.set(_context, _nonvar__e_Arg1.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeOrientation(null), _context));																																																	
																																																	} else {																																																	
																																																		_e_Mag1.set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 1.0));																																																	
																																																		_e_Vec1.set(_context, _nonvar__e_Arg1);																																																	
																																																	}
																																																	if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCVECTOR", "IFC4"), _nonvar__e_Arg2.typeOfV(_context)).getLogical() == 2) {																																																	
																																																		_e_Mag2.set(_context, _nonvar__e_Arg2.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeMagnitude(null), _context));																																																	
																																																		_e_Vec2.set(_context, _nonvar__e_Arg2.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeOrientation(null), _context));																																																	
																																																	} else {																																																	
																																																		_e_Mag2.set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 1.0));																																																	
																																																		_e_Vec2.set(_context, _nonvar__e_Arg2);																																																	
																																																	}
																																																	_e_Vec1.set(_context, (new jsdai.SIfc4.FIfcnormalise()).run(_context, _e_Vec1));
																																																	_e_Vec2.set(_context, (new jsdai.SIfc4.FIfcnormalise()).run(_context, _e_Vec2));
																																																	_e_Ndim.set(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_e_Vec1.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context)));
																																																	_e_Mag.set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0));
																																																					Value _elements592 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
																																																					for (int _index592_0 = 0; _index592_0 < _e_Ndim.getInteger(); _index592_0++)
																																																						_elements592.addMember(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0));
																																																	_e_Res.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcdirection.definition).addParameter(_elements592)));
																																																	Value _end593 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(_e_Ndim);
																																																	Value _step593 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
																																																	for (Value _implicit_151_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_151_i, _end593).getLogical() == 2;_implicit_151_i.inc(_step593)) {																																																	
																																																		_e_Res.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_151_i, null).set(_context, Value.alloc().addOrUnionOrConcatenate(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).mulOrIntersect(_context, _e_Mag1, _e_Vec1.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_151_i, null)), Value.alloc(ExpressTypes.INTEGER_TYPE).mulOrIntersect(_context, _e_Mag2, _e_Vec2.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_151_i, null))));																																																	
																																																		_e_Mag.set(_context, Value.alloc().addOrUnionOrConcatenate(_context, _e_Mag, Value.alloc(ExpressTypes.INTEGER_TYPE).mulOrIntersect(_context, _e_Res.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_151_i, null), _e_Res.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_151_i, null))));
																																																	} // for - REPEAT
																																																	if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Mag, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)).getLogical() == 2) {																																																	
																																																		_e_Result.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcvector.definition).addParameter(_e_Res).addParameter(Value.alloc(ExpressTypes.REAL_TYPE).sqrt(_e_Mag))));
																																																	} else {																																																	
																																																		_e_Result.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcvector.definition).addParameter(_e_Vec1).addParameter(Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0))));
																																																	}
																																																} // END
																																															}




		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, _e_Result).check(_context, jsdai.SIfc4.CIfcvector.definition);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
