/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcConstraintsParamBSpline

package jsdai.SIfc4;
import jsdai.lang.*;


public class FIfcconstraintsparambspline {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Degree;
	Value _nonvar__e_UpKnots;
	Value _nonvar__e_UpCp;
	Value _nonvar__e_KnotMult;
	Value _nonvar__e_Knots;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_Result;
	Value _e_K;
	Value _e_Sum;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Degree, Value _e_UpKnots, Value _e_UpCp, Value _e_KnotMult, Value _e_Knots) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Degree = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_e_Degree);
		_nonvar__e_UpKnots = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_e_UpKnots);
		_nonvar__e_UpCp = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_e_UpCp);
		_nonvar__e_KnotMult = Value.alloc(jsdai.SIfc4.SIfc4._st_generallist_0_integer).set(_e_KnotMult);
		_nonvar__e_Knots = Value.alloc(jsdai.SIfc4.SIfc4._st_generallist_0_ifcparametervalue).set(_e_Knots);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_Result = Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 2));
		_e_K = Value.alloc(ExpressTypes.INTEGER_TYPE);
		_e_Sum = Value.alloc(ExpressTypes.INTEGER_TYPE);
		// end of initialization of local variables





										_e_Sum.set(_context, _nonvar__e_KnotMult.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null));


										Value _end357 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(_nonvar__e_UpKnots);
										Value _step357 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
										for (Value _implicit_80_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_80_i, _end357).getLogical() == 2;_implicit_80_i.inc(_step357)) {										
											_e_Sum.set(_context, Value.alloc().addOrUnionOrConcatenate(_context, _e_Sum, _nonvar__e_KnotMult.indexing(_implicit_80_i, null)));
										} // for - REPEAT



										if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _nonvar__e_Degree, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _nonvar__e_UpKnots, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))), Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _nonvar__e_UpCp, _nonvar__e_Degree)), Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _e_Sum, Value.alloc().addOrUnionOrConcatenate(_context, Value.alloc().addOrUnionOrConcatenate(_context, _nonvar__e_Degree, _nonvar__e_UpCp), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)))).getLogical() == 2) {										
											_e_Result.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));										
		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);										
										}



										_e_K.set(_context, _nonvar__e_KnotMult.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null));



										if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _e_K, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_K, Value.alloc().addOrUnionOrConcatenate(_context, _nonvar__e_Degree, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)))).getLogical() == 2) {										
											_e_Result.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));										
		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);										
										}


										Value _end358 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(_nonvar__e_UpKnots);
										Value _step358 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
										for (Value _implicit_81_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_81_i, _end358).getLogical() == 2;_implicit_81_i.inc(_step358)) {										
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _nonvar__e_KnotMult.indexing(_implicit_81_i, null), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _nonvar__e_Knots.indexing(_implicit_81_i, null), _nonvar__e_Knots.indexing(Value.alloc().substractOrDifference(_context, _implicit_81_i, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), null))).getLogical() == 2) {											
												_e_Result.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));											
		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);											
											}										
											_e_K.set(_context, _nonvar__e_KnotMult.indexing(_implicit_81_i, null));											
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _implicit_81_i, _nonvar__e_UpKnots), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_K, _nonvar__e_Degree)).getLogical() == 2) {											
												_e_Result.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));											
		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);											
											}											
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _implicit_81_i, _nonvar__e_UpKnots), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_K, Value.alloc().addOrUnionOrConcatenate(_context, _nonvar__e_Degree, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)))).getLogical() == 2) {											
												_e_Result.set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).setLB(_context, 1));											
		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);											
											}
										} // for - REPEAT




		if (true) return Value.alloc(ExpressTypes.BOOLEAN_TYPE).set(_context, _e_Result).check(_context, ExpressTypes.BOOLEAN_TYPE);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
