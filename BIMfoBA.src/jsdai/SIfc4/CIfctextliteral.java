/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTextLiteral

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctextliteral extends CIfcgeometricrepresentationitem implements EIfctextliteral {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctextliteral.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected String a0; // Literal - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // Placement - current entity - SELECT IfcAxis2Placement
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a2; // Path - current entity - ENUMERATION IfcTextPath
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Literal - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Placement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// Path - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6162=EXPLICIT_ATTRIBUTE('Literal',#6160,0,#2613,$,.F.);
	//<01> generating methods for consolidated attribute:  Literal
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Literal, base type: STRING
	public boolean testLiteral(EIfctextliteral type) throws SdaiException {
		return test_string(a0);
	}
	public String getLiteral(EIfctextliteral type) throws SdaiException {
		return get_string(a0);
	}
	public void setLiteral(EIfctextliteral type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetLiteral(EIfctextliteral type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeLiteral(EIfctextliteral type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #6163=EXPLICIT_ATTRIBUTE('Placement',#6160,1,#3115,$,.F.);
	//<01> generating methods for consolidated attribute:  Placement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: Placement
	public static int usedinPlacement(EIfctextliteral type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testPlacement(EIfctextliteral type) throws SdaiException {
		return test_instance(a1);
	}

	public EEntity getPlacement(EIfctextliteral type) throws SdaiException { // case 1
		return get_instance_select(a1);
	}

	public void setPlacement(EIfctextliteral type, EEntity value) throws SdaiException { // case 1
		a1 = set_instance(a1, value);
	}

	public void unsetPlacement(EIfctextliteral type) throws SdaiException {
		a1 = unset_instance(a1);
	}

	public static jsdai.dictionary.EAttribute attributePlacement(EIfctextliteral type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6164=EXPLICIT_ATTRIBUTE('Path',#6160,2,#3063,$,.F.);
	//<01> generating methods for consolidated attribute:  Path
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:Path, base type: ENUMERATION
	public boolean testPath(EIfctextliteral type) throws SdaiException {
		return test_enumeration(a2);
	}
	public int getPath(EIfctextliteral type) throws SdaiException {
		return get_enumeration(a2);
	}
	public void setPath(EIfctextliteral type, int value) throws SdaiException {
		a2 = set_enumeration(value, a2$);
	}
	public void unsetPath(EIfctextliteral type) throws SdaiException {
		a2 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributePath(EIfctextliteral type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = av.entityValues[2].getString(0);
		a1 = av.entityValues[2].getInstance(1, this, a1$);
		a2 = av.entityValues[2].getEnumeration(2, a2$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = av.entityValues[2].getString(0);
		a1 = av.entityValues[2].getInstance(1, this, a1$);
		a2 = av.entityValues[2].getEnumeration(2, a2$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTextLiteral
		av.entityValues[2].setString(0, a0);
		av.entityValues[2].setInstance(1, a1);
		av.entityValues[2].setEnumeration(2, a2, a2$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTextLiteral
		av.entityValues[2].setString(0, a0);
		av.entityValues[2].setInstance(1, a1);
		av.entityValues[2].setEnumeration(2, a2, a2$);
	}
}
