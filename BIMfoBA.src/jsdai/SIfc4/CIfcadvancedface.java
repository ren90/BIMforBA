/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcAdvancedFace

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcadvancedface extends CIfcfacesurface implements EIfcadvancedface {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcadvancedface.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Bounds: protected AIfcfacebound a0;   Bounds - java inheritance - SET OF ENTITY
	// HasTextureMaps: protected Object  - inverse - java inheritance -  ENTITY IfcTextureMap
	// FaceSurface: protected Object a1;   FaceSurface - java inheritance - ENTITY IfcSurface
	// SameSense: protected int a2;   SameSense - java inheritance - BOOLEAN
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Bounds - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected AIfcfacebound a0;
	// HasTextureMaps - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// FaceSurface - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// SameSense - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected int a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4256=EXPLICIT_ATTRIBUTE('Bounds',#4254,0,#6919,$,.F.);
	//<01> generating methods for consolidated attribute:  Bounds
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Bounds, base type: SET OF ENTITY
	public static int usedinBounds(EIfcface type, EIfcfacebound instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #4257=INVERSE_ATTRIBUTE('HasTextureMaps',#4254,0,#6202,$,#6205,#8329,$,.F.);
	//<01> generating methods for consolidated attribute:  HasTextureMaps
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4270=EXPLICIT_ATTRIBUTE('FaceSurface',#4268,0,#5952,$,.F.);
	//<01> generating methods for consolidated attribute:  FaceSurface
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): FaceSurface, base type: entity IfcSurface
	public static int usedinFacesurface(EIfcfacesurface type, EIfcsurface instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #4271=EXPLICIT_ATTRIBUTE('SameSense',#4268,1,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  SameSense
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()

	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = (AIfcfacebound)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[2].getInstance(0, this, a1$);
		a2 = av.entityValues[2].getBoolean(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = (AIfcfacebound)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[2].getInstance(0, this, a1$);
		a2 = av.entityValues[2].getBoolean(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAdvancedFace
		// partial entity: IfcFace
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcFaceSurface
		av.entityValues[2].setInstance(0, a1);
		av.entityValues[2].setBoolean(1, a2);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAdvancedFace
		// partial entity: IfcFace
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcFaceSurface
		av.entityValues[2].setInstance(0, a1);
		av.entityValues[2].setBoolean(1, a2);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcadvancedfaceRequiresedgecurve(SdaiContext _context) throws SdaiException {
	





									
									Value _internal_aggregate_source16 = Value.alloc(jsdai.SIfc4.CIfcadvancedface.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcface.class).getAttribute(jsdai.SIfc4.CIfcface.attributeBounds(null), _context);
									Value _result14 = Value.alloc(_internal_aggregate_source16).create();
									if (_internal_aggregate_source16.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i15 = 1; _i15 <= _internal_aggregate_source16.getMemberCount(); _i15++) {
											Value _implicit_5_Bnds = _internal_aggregate_source16.getByIndex(_i15);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCEDGELOOP", "IFC4"), _implicit_5_Bnds.getAttribute("Bound", _context).typeOfV(_context)).getLogical() == 2) {
												_result14.addMember(_context, _implicit_5_Bnds);
											} else
											if (_internal_aggregate_source16.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_5_Bnds.unset();
												_result14.addMember(_context, _implicit_5_Bnds);
											}
										}
									} else {
										_result14.unset();
									}
									Value _internal_aggregate_source24 = _result14;
									Value _result22 = Value.alloc(_internal_aggregate_source24).create();
									if (_internal_aggregate_source24.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i23 = 1; _i23 <= _internal_aggregate_source24.getMemberCount(); _i23++) {
											Value _implicit_4_ElpFbnds = _internal_aggregate_source24.getByIndex(_i23);
									
																		
																		Value _internal_aggregate_source20 = _implicit_4_ElpFbnds.getAttribute("Bound", _context).groupReference(_context, jsdai.SIfc4.CIfcedgeloop.class).getAttribute("edgelist", _context);
																		Value _result18 = Value.alloc(_internal_aggregate_source20).create();
																		if (_internal_aggregate_source20.getActualJavaType() != Value.INDETERMINATE) {
																			for (int _i19 = 1; _i19 <= _internal_aggregate_source20.getMemberCount(); _i19++) {
																				Value _implicit_6_Oe = _internal_aggregate_source20.getByIndex(_i19);
																				if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCEDGECURVE", "IFC4"), _implicit_6_Oe.groupReference(_context, jsdai.SIfc4.CIfcorientededge.class).getAttribute("edgeelement", _context).typeOfV(_context))).getLogical() == 2) {
																					_result18.addMember(_context, _implicit_6_Oe);
																				} else
																				if (_internal_aggregate_source20.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																					_implicit_6_Oe.unset();
																					_result18.addMember(_context, _implicit_6_Oe);
																				}
																			}
																		} else {
																			_result18.unset();
																		}
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result18), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical() == 2) {
												_result22.addMember(_context, _implicit_4_ElpFbnds);
											} else
											if (_internal_aggregate_source24.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_4_ElpFbnds.unset();
												_result22.addMember(_context, _implicit_4_ElpFbnds);
											}
										}
									} else {
										_result22.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result22), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
	public int rIfcadvancedfaceApplicablesurface(SdaiContext _context) throws SdaiException {
	



									Value _elements25 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
									_elements25.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCELEMENTARYSURFACE", "IFC4"));
									_elements25.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCSWEPTSURFACE", "IFC4"));
									_elements25.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCBSPLINESURFACE", "IFC4"));
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt(_context, Value.alloc().mulOrIntersect(_context, _elements25, Value.alloc(jsdai.SIfc4.CIfcadvancedface.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcfacesurface.class).getAttribute(jsdai.SIfc4.CIfcfacesurface.attributeFacesurface(null), _context).typeOfV(_context))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).getLogical());
	}
	public int rIfcadvancedfaceApplicableedgecurves(SdaiContext _context) throws SdaiException {
	






									
									Value _internal_aggregate_source29 = Value.alloc(jsdai.SIfc4.CIfcadvancedface.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcface.class).getAttribute(jsdai.SIfc4.CIfcface.attributeBounds(null), _context);
									Value _result27 = Value.alloc(_internal_aggregate_source29).create();
									if (_internal_aggregate_source29.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i28 = 1; _i28 <= _internal_aggregate_source29.getMemberCount(); _i28++) {
											Value _implicit_8_Bnds = _internal_aggregate_source29.getByIndex(_i28);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCEDGELOOP", "IFC4"), _implicit_8_Bnds.getAttribute("Bound", _context).typeOfV(_context)).getLogical() == 2) {
												_result27.addMember(_context, _implicit_8_Bnds);
											} else
											if (_internal_aggregate_source29.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_8_Bnds.unset();
												_result27.addMember(_context, _implicit_8_Bnds);
											}
										}
									} else {
										_result27.unset();
									}
									Value _internal_aggregate_source38 = _result27;
									Value _result36 = Value.alloc(_internal_aggregate_source38).create();
									if (_internal_aggregate_source38.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i37 = 1; _i37 <= _internal_aggregate_source38.getMemberCount(); _i37++) {
											Value _implicit_7_ElpFbnds = _internal_aggregate_source38.getByIndex(_i37);
									
																		Value _internal_aggregate_source34 = _implicit_7_ElpFbnds.getAttribute("Bound", _context).groupReference(_context, jsdai.SIfc4.CIfcedgeloop.class).getAttribute("edgelist", _context);
																		Value _result32 = Value.alloc(_internal_aggregate_source34).create();
																		if (_internal_aggregate_source34.getActualJavaType() != Value.INDETERMINATE) {
																			for (int _i33 = 1; _i33 <= _internal_aggregate_source34.getMemberCount(); _i33++) {
																				Value _implicit_9_Oe = _internal_aggregate_source34.getByIndex(_i33);
																		
																											Value _elements30 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
																											_elements30.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCLINE", "IFC4"));
																											_elements30.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCCONIC", "IFC4"));
																											_elements30.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCPOLYLINE", "IFC4"));
																											_elements30.addMember(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCBSPLINECURVE", "IFC4"));
																				if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc().mulOrIntersect(_context, _elements30, _implicit_9_Oe.groupReference(_context, jsdai.SIfc4.CIfcorientededge.class).getAttribute("edgeelement", _context).groupReference(_context, jsdai.SIfc4.CIfcedgecurve.class).getAttribute("edgegeometry", _context).typeOfV(_context))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).getLogical() == 2) {
																					_result32.addMember(_context, _implicit_9_Oe);
																				} else
																				if (_internal_aggregate_source34.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																					_implicit_9_Oe.unset();
																					_result32.addMember(_context, _implicit_9_Oe);
																				}
																			}
																		} else {
																			_result32.unset();
																		}
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result32), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical() == 2) {
												_result36.addMember(_context, _implicit_7_ElpFbnds);
											} else
											if (_internal_aggregate_source38.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_7_ElpFbnds.unset();
												_result36.addMember(_context, _implicit_7_ElpFbnds);
											}
										}
									} else {
										_result36.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result36), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
