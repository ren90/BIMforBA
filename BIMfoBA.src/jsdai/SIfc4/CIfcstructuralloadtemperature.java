/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcStructuralLoadTemperature

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcstructuralloadtemperature extends CIfcstructuralloadstatic implements EIfcstructuralloadtemperature {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcstructuralloadtemperature.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected double a1; // DeltaTConstant - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a2; // DeltaTY - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a3; // DeltaTZ - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// DeltaTConstant - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a1;
	// DeltaTY - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a2;
	// DeltaTZ - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5838=EXPLICIT_ATTRIBUTE('Name',#5836,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5896=EXPLICIT_ATTRIBUTE('DeltaTConstant',#5894,0,#2677,$,.T.);
	//<01> generating methods for consolidated attribute:  DeltaTConstant
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: DeltaTConstant, base type: REAL
	public boolean testDeltatconstant(EIfcstructuralloadtemperature type) throws SdaiException {
		return test_double(a1);
	}
	public double getDeltatconstant(EIfcstructuralloadtemperature type) throws SdaiException {
		return get_double(a1);
	}
	public void setDeltatconstant(EIfcstructuralloadtemperature type, double value) throws SdaiException {
		a1 = set_double(value);
	}
	public void unsetDeltatconstant(EIfcstructuralloadtemperature type) throws SdaiException {
		a1 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeDeltatconstant(EIfcstructuralloadtemperature type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5897=EXPLICIT_ATTRIBUTE('DeltaTY',#5894,1,#2677,$,.T.);
	//<01> generating methods for consolidated attribute:  DeltaTY
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: DeltaTY, base type: REAL
	public boolean testDeltaty(EIfcstructuralloadtemperature type) throws SdaiException {
		return test_double(a2);
	}
	public double getDeltaty(EIfcstructuralloadtemperature type) throws SdaiException {
		return get_double(a2);
	}
	public void setDeltaty(EIfcstructuralloadtemperature type, double value) throws SdaiException {
		a2 = set_double(value);
	}
	public void unsetDeltaty(EIfcstructuralloadtemperature type) throws SdaiException {
		a2 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeDeltaty(EIfcstructuralloadtemperature type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5898=EXPLICIT_ATTRIBUTE('DeltaTZ',#5894,2,#2677,$,.T.);
	//<01> generating methods for consolidated attribute:  DeltaTZ
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: DeltaTZ, base type: REAL
	public boolean testDeltatz(EIfcstructuralloadtemperature type) throws SdaiException {
		return test_double(a3);
	}
	public double getDeltatz(EIfcstructuralloadtemperature type) throws SdaiException {
		return get_double(a3);
	}
	public void setDeltatz(EIfcstructuralloadtemperature type, double value) throws SdaiException {
		a3 = set_double(value);
	}
	public void unsetDeltatz(EIfcstructuralloadtemperature type) throws SdaiException {
		a3 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeDeltatz(EIfcstructuralloadtemperature type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[3].getDouble(0);
		a2 = av.entityValues[3].getDouble(1);
		a3 = av.entityValues[3].getDouble(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = Double.NaN;
			a2 = Double.NaN;
			a3 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[3].getDouble(0);
		a2 = av.entityValues[3].getDouble(1);
		a3 = av.entityValues[3].getDouble(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcStructuralLoadStatic
		// partial entity: IfcStructuralLoadTemperature
		av.entityValues[3].setDouble(0, a1);
		av.entityValues[3].setDouble(1, a2);
		av.entityValues[3].setDouble(2, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcStructuralLoadStatic
		// partial entity: IfcStructuralLoadTemperature
		av.entityValues[3].setDouble(0, a1);
		av.entityValues[3].setDouble(1, a2);
		av.entityValues[3].setDouble(2, a3);
	}
}
