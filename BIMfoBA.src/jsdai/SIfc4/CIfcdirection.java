/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcDirection

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcdirection extends CIfcgeometricrepresentationitem implements EIfcdirection {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcdirection.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected A_double a0; // DirectionRatios - current entity - LIST OF REAL
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// Dim: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// DirectionRatios - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected A_double a0;
	// Dim - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3950=EXPLICIT_ATTRIBUTE('DirectionRatios',#3948,0,#6890,$,.F.);
	//<01> generating methods for consolidated attribute:  DirectionRatios
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: DirectionRatios, base type: LIST OF REAL
	public boolean testDirectionratios(EIfcdirection type) throws SdaiException {
		return test_aggregate(a0);
	}
	public A_double getDirectionratios(EIfcdirection type) throws SdaiException {
		return (A_double)get_aggregate(a0);
	}
	public A_double createDirectionratios(EIfcdirection type) throws SdaiException {
		a0 = create_aggregate_double(a0, a0$, 0);
		return a0;
	}
	public void unsetDirectionratios(EIfcdirection type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributeDirectionratios(EIfcdirection type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3951=DERIVED_ATTRIBUTE('Dim',#3948,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcdirection type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcdirection type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_real).set(_context, get(a0$)))
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).hiIndex(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_real).set(_context, get(a0$))));
	}
	public int getDim(EIfcdirection type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcdirection)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcdirection type) throws SdaiException {
		return d0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			return;
		}
		a0 = av.entityValues[0].getDoubleAggregate(0, a0$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			return;
		}
		a0 = av.entityValues[0].getDoubleAggregate(0, a0$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDirection
		av.entityValues[0].setDoubleAggregate(0, a0);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDirection
		av.entityValues[0].setDoubleAggregate(0, a0);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcdirectionMagnitudegreaterzero(SdaiContext _context) throws SdaiException {
	



									
									Value _internal_aggregate_source96 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_real).set(_context, get(a0$));
									Value _result94 = Value.alloc(_internal_aggregate_source96).create();
									if (_internal_aggregate_source96.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i95 = 1; _i95 <= _internal_aggregate_source96.getMemberCount(); _i95++) {
											Value _implicit_23_Tmp = _internal_aggregate_source96.getByIndex(_i95);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_23_Tmp, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)).getLogical() == 2) {
												_result94.addMember(_context, _implicit_23_Tmp);
											} else
											if (_internal_aggregate_source96.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_23_Tmp.unset();
												_result94.addMember(_context, _implicit_23_Tmp);
											}
										}
									} else {
										_result94.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result94), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
