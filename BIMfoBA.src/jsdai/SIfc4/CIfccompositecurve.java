/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcCompositeCurve

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccompositecurve extends CIfcboundedcurve implements EIfccompositecurve {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccompositecurve.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	protected AIfccompositecurvesegment a0; // Segments - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected int a1; // SelfIntersect - current entity - LOGICAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// NSegments: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// ClosedCurve: protected int  - derived - current -  LOGICAL
	protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Segments - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfccompositecurvesegment a0;
	// SelfIntersect - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1;
	// NSegments - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// ClosedCurve - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3885=DERIVED_ATTRIBUTE('Dim',#3883,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfccurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfccurve type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: (new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfccompositecurve.definition).set(_context, this))
				return ((new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfccompositecurve.definition).set(_context, this)));
	}
	public int getDim(EIfccurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfccurve)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfccurve type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #3686=EXPLICIT_ATTRIBUTE('Segments',#3684,0,#6862,$,.F.);
	//<01> generating methods for consolidated attribute:  Segments
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Segments, base type: LIST OF ENTITY
	public static int usedinSegments(EIfccompositecurve type, EIfccompositecurvesegment instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testSegments(EIfccompositecurve type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfccompositecurvesegment getSegments(EIfccompositecurve type) throws SdaiException {
		return (AIfccompositecurvesegment)get_aggregate(a0);
	}
	public AIfccompositecurvesegment createSegments(EIfccompositecurve type) throws SdaiException {
		a0 = (AIfccompositecurvesegment)create_aggregate_class(a0, a0$,  AIfccompositecurvesegment.class, 0);
		return a0;
	}
	public void unsetSegments(EIfccompositecurve type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributeSegments(EIfccompositecurve type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3687=EXPLICIT_ATTRIBUTE('SelfIntersect',#3684,1,#5,$,.F.);
	//<01> generating methods for consolidated attribute:  SelfIntersect
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: SelfIntersect, base type: LOGICAL
	public boolean testSelfintersect(EIfccompositecurve type) throws SdaiException {
		return test_logical(a1);
	}
	public int getSelfintersect(EIfccompositecurve type) throws SdaiException {
		return get_logical(a1);
	}
	public void setSelfintersect(EIfccompositecurve type, int value) throws SdaiException {
		a1 = set_logical(value);
	}
	public void unsetSelfintersect(EIfccompositecurve type) throws SdaiException {
		a1 = unset_logical();
	}
	public static jsdai.dictionary.EAttribute attributeSelfintersect(EIfccompositecurve type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3688=DERIVED_ATTRIBUTE('NSegments',#3684,0,#2,$);
	//<01> generating methods for consolidated attribute:  NSegments
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: NSegments, base type: INTEGER
	public boolean testNsegments(EIfccompositecurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getNsegments(EIfccompositecurve type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$)))
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$))));
	}
	public int getNsegments(EIfccompositecurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getNsegments((EIfccompositecurve)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeNsegments(EIfccompositecurve type) throws SdaiException {
		return d1$;
	}

	//going through all the attributes: #3689=DERIVED_ATTRIBUTE('ClosedCurve',#3684,1,#5,$);
	//<01> generating methods for consolidated attribute:  ClosedCurve
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: ClosedCurve, base type: LOGICAL
	public boolean testClosedcurve(EIfccompositecurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getClosedcurve(EIfccompositecurve type, SdaiContext _context) throws SdaiException {





//###-01 jc.generated_java: Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(d1$)), null).getAttribute(jsdai.SIfc4.CIfccompositecurvesegment.attributeTransition(null), _context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTransitionCode).setEnum(_context, "Discontinuous"))
				return (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(d1$)), null).getAttribute(jsdai.SIfc4.CIfccompositecurvesegment.attributeTransition(null), _context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTransitionCode).setEnum(_context, "Discontinuous")));
	}
	public int getClosedcurve(EIfccompositecurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
		return getClosedcurve((EIfccompositecurve)null, _context).getLogical();
	}
	public static jsdai.dictionary.EAttribute attributeClosedcurve(EIfccompositecurve type) throws SdaiException {
		return d2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = 0;
			return;
		}
		a0 = (AIfccompositecurvesegment)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[1].getLogical(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = 0;
			return;
		}
		a0 = (AIfccompositecurvesegment)av.entityValues[1].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[1].getLogical(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcCompositeCurve
		av.entityValues[1].setInstanceAggregate(0, a0);
		av.entityValues[1].setLogical(1, a1);
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcCompositeCurve
		av.entityValues[1].setInstanceAggregate(0, a0);
		av.entityValues[1].setLogical(1, a1);
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfccompositecurveCurvecontinuous(SdaiContext _context) throws SdaiException {
	






													
													Value _internal_aggregate_source76 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$));
													Value _result74 = Value.alloc(_internal_aggregate_source76).create();
													if (_internal_aggregate_source76.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i75 = 1; _i75 <= _internal_aggregate_source76.getMemberCount(); _i75++) {
															Value _implicit_18_Temp = _internal_aggregate_source76.getByIndex(_i75);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _implicit_18_Temp.getAttribute("Transition", _context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTransitionCode).setEnum(_context, "Discontinuous")).getLogical() == 2) {
																_result74.addMember(_context, _implicit_18_Temp);
															} else
															if (_internal_aggregate_source76.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_18_Temp.unset();
																_result74.addMember(_context, _implicit_18_Temp);
															}
														}
													} else {
														_result74.unset();
													}
													
													Value _internal_aggregate_source80 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$));
													Value _result78 = Value.alloc(_internal_aggregate_source80).create();
													if (_internal_aggregate_source80.getActualJavaType() != Value.INDETERMINATE) {
														for (int _i79 = 1; _i79 <= _internal_aggregate_source80.getMemberCount(); _i79++) {
															Value _implicit_19_Temp = _internal_aggregate_source80.getByIndex(_i79);
															if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _implicit_19_Temp.getAttribute("Transition", _context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTransitionCode).setEnum(_context, "Discontinuous")).getLogical() == 2) {
																_result78.addMember(_context, _implicit_19_Temp);
															} else
															if (_internal_aggregate_source80.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
																_implicit_19_Temp.unset();
																_result78.addMember(_context, _implicit_19_Temp);
															}
														}
													} else {
														_result78.unset();
													}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, get(d2$))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result74), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, get(d2$)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result78), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))))).getLogical());
	}
	public int rIfccompositecurveSamedim(SdaiContext _context) throws SdaiException {
	






									
									Value _internal_aggregate_source84 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$));
									Value _result82 = Value.alloc(_internal_aggregate_source84).create();
									if (_internal_aggregate_source84.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i83 = 1; _i83 <= _internal_aggregate_source84.getMemberCount(); _i83++) {
											Value _implicit_20_Temp = _internal_aggregate_source84.getByIndex(_i83);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_20_Temp.getAttribute("dim", _context), Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifccompositecurvesegment).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("dim", _context)).getLogical() == 2) {
												_result82.addMember(_context, _implicit_20_Temp);
											} else
											if (_internal_aggregate_source84.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_20_Temp.unset();
												_result82.addMember(_context, _implicit_20_Temp);
											}
										}
									} else {
										_result82.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result82), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
