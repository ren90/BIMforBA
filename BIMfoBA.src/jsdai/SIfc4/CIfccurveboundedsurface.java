/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcCurveBoundedSurface

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccurveboundedsurface extends CIfcboundedsurface implements EIfccurveboundedsurface {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccurveboundedsurface.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	protected Object a0; // BasisSurface - current entity - ENTITY IfcSurface
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcboundarycurve a1; // Boundaries - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a2; // ImplicitOuter - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// BasisSurface - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// Boundaries - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcboundarycurve a1;
	// ImplicitOuter - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a1, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a1, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5954=DERIVED_ATTRIBUTE('Dim',#5952,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcsurface type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcsurface type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3));
	}
	public int getDim(EIfcsurface type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcsurface)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcsurface type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #3893=EXPLICIT_ATTRIBUTE('BasisSurface',#3891,0,#5952,$,.F.);
	//<01> generating methods for consolidated attribute:  BasisSurface
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : BasisSurface, base type: entity IfcSurface
	public static int usedinBasissurface(EIfccurveboundedsurface type, EIfcsurface instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testBasissurface(EIfccurveboundedsurface type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcsurface getBasissurface(EIfccurveboundedsurface type) throws SdaiException {
		return (EIfcsurface)get_instance(a0);
	}
	public void setBasissurface(EIfccurveboundedsurface type, EIfcsurface value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetBasissurface(EIfccurveboundedsurface type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeBasissurface(EIfccurveboundedsurface type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3894=EXPLICIT_ATTRIBUTE('Boundaries',#3891,1,#6887,$,.F.);
	//<01> generating methods for consolidated attribute:  Boundaries
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Boundaries, base type: SET OF ENTITY
	public static int usedinBoundaries(EIfccurveboundedsurface type, EIfcboundarycurve instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testBoundaries(EIfccurveboundedsurface type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfcboundarycurve getBoundaries(EIfccurveboundedsurface type) throws SdaiException {
		return (AIfcboundarycurve)get_aggregate(a1);
	}
	public AIfcboundarycurve createBoundaries(EIfccurveboundedsurface type) throws SdaiException {
		a1 = (AIfcboundarycurve)create_aggregate_class(a1, a1$,  AIfcboundarycurve.class, 0);
		return a1;
	}
	public void unsetBoundaries(EIfccurveboundedsurface type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeBoundaries(EIfccurveboundedsurface type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3895=EXPLICIT_ATTRIBUTE('ImplicitOuter',#3891,2,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  ImplicitOuter
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ImplicitOuter, base type: BOOLEAN
	public boolean testImplicitouter(EIfccurveboundedsurface type) throws SdaiException {
		return test_boolean(a2);
	}
	public boolean getImplicitouter(EIfccurveboundedsurface type) throws SdaiException {
		return get_boolean(a2);
	}
	public void setImplicitouter(EIfccurveboundedsurface type, boolean value) throws SdaiException {
		a2 = set_boolean(value);
	}
	public void unsetImplicitouter(EIfccurveboundedsurface type) throws SdaiException {
		a2 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeImplicitouter(EIfccurveboundedsurface type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = 0;
			return;
		}
		a0 = av.entityValues[1].getInstance(0, this, a0$);
		a1 = (AIfcboundarycurve)av.entityValues[1].getInstanceAggregate(1, a1$, this);
		a2 = av.entityValues[1].getBoolean(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = 0;
			return;
		}
		a0 = av.entityValues[1].getInstance(0, this, a0$);
		a1 = (AIfcboundarycurve)av.entityValues[1].getInstanceAggregate(1, a1$, this);
		a2 = av.entityValues[1].getBoolean(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedSurface
		// partial entity: IfcCurveBoundedSurface
		av.entityValues[1].setInstance(0, a0);
		av.entityValues[1].setInstanceAggregate(1, a1);
		av.entityValues[1].setBoolean(2, a2);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSurface
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedSurface
		// partial entity: IfcCurveBoundedSurface
		av.entityValues[1].setInstance(0, a0);
		av.entityValues[1].setInstanceAggregate(1, a1);
		av.entityValues[1].setBoolean(2, a2);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSurface
	}
}
