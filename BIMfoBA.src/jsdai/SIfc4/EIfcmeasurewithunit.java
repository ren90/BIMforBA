/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java interface for entity IfcMeasureWithUnit

package jsdai.SIfc4;
import jsdai.lang.*;

public interface EIfcmeasurewithunit extends EEntity {

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: ValueComponent
	int sValuecomponentIfcabsorbeddosemeasure = 2;
	int sValuecomponentIfcaccelerationmeasure = 3;
	int sValuecomponentIfcangularvelocitymeasure = 4;
	int sValuecomponentIfcareadensitymeasure = 5;
	int sValuecomponentIfccompoundplaneanglemeasure = 6;
	int sValuecomponentIfccurvaturemeasure = 7;
	int sValuecomponentIfcdoseequivalentmeasure = 8;
	int sValuecomponentIfcdynamicviscositymeasure = 9;
	int sValuecomponentIfcelectriccapacitancemeasure = 10;
	int sValuecomponentIfcelectricchargemeasure = 11;
	int sValuecomponentIfcelectricconductancemeasure = 12;
	int sValuecomponentIfcelectricresistancemeasure = 13;
	int sValuecomponentIfcelectricvoltagemeasure = 14;
	int sValuecomponentIfcenergymeasure = 15;
	int sValuecomponentIfcforcemeasure = 16;
	int sValuecomponentIfcfrequencymeasure = 17;
	int sValuecomponentIfcheatfluxdensitymeasure = 18;
	int sValuecomponentIfcheatingvaluemeasure = 19;
	int sValuecomponentIfcilluminancemeasure = 20;
	int sValuecomponentIfcinductancemeasure = 21;
	int sValuecomponentIfcintegercountratemeasure = 22;
	int sValuecomponentIfcionconcentrationmeasure = 23;
	int sValuecomponentIfcisothermalmoisturecapacitymeasure = 24;
	int sValuecomponentIfckinematicviscositymeasure = 25;
	int sValuecomponentIfclinearforcemeasure = 26;
	int sValuecomponentIfclinearmomentmeasure = 27;
	int sValuecomponentIfclinearstiffnessmeasure = 28;
	int sValuecomponentIfclinearvelocitymeasure = 29;
	int sValuecomponentIfcluminousfluxmeasure = 30;
	int sValuecomponentIfcluminousintensitydistributionmeasure = 31;
	int sValuecomponentIfcmagneticfluxdensitymeasure = 32;
	int sValuecomponentIfcmagneticfluxmeasure = 33;
	int sValuecomponentIfcmassdensitymeasure = 34;
	int sValuecomponentIfcmassflowratemeasure = 35;
	int sValuecomponentIfcmassperlengthmeasure = 36;
	int sValuecomponentIfcmodulusofelasticitymeasure = 37;
	int sValuecomponentIfcmodulusoflinearsubgradereactionmeasure = 38;
	int sValuecomponentIfcmodulusofrotationalsubgradereactionmeasure = 39;
	int sValuecomponentIfcmodulusofsubgradereactionmeasure = 40;
	int sValuecomponentIfcmoisturediffusivitymeasure = 41;
	int sValuecomponentIfcmolecularweightmeasure = 42;
	int sValuecomponentIfcmomentofinertiameasure = 43;
	int sValuecomponentIfcmonetarymeasure = 44;
	int sValuecomponentIfcphmeasure = 45;
	int sValuecomponentIfcplanarforcemeasure = 46;
	int sValuecomponentIfcpowermeasure = 47;
	int sValuecomponentIfcpressuremeasure = 48;
	int sValuecomponentIfcradioactivitymeasure = 49;
	int sValuecomponentIfcrotationalfrequencymeasure = 50;
	int sValuecomponentIfcrotationalmassmeasure = 51;
	int sValuecomponentIfcrotationalstiffnessmeasure = 52;
	int sValuecomponentIfcsectionmodulusmeasure = 53;
	int sValuecomponentIfcsectionalareaintegralmeasure = 54;
	int sValuecomponentIfcshearmodulusmeasure = 55;
	int sValuecomponentIfcsoundpowerlevelmeasure = 56;
	int sValuecomponentIfcsoundpowermeasure = 57;
	int sValuecomponentIfcsoundpressurelevelmeasure = 58;
	int sValuecomponentIfcsoundpressuremeasure = 59;
	int sValuecomponentIfcspecificheatcapacitymeasure = 60;
	int sValuecomponentIfctemperaturegradientmeasure = 61;
	int sValuecomponentIfctemperaturerateofchangemeasure = 62;
	int sValuecomponentIfcthermaladmittancemeasure = 63;
	int sValuecomponentIfcthermalconductivitymeasure = 64;
	int sValuecomponentIfcthermalexpansioncoefficientmeasure = 65;
	int sValuecomponentIfcthermalresistancemeasure = 66;
	int sValuecomponentIfcthermaltransmittancemeasure = 67;
	int sValuecomponentIfctorquemeasure = 68;
	int sValuecomponentIfcvaporpermeabilitymeasure = 69;
	int sValuecomponentIfcvolumetricflowratemeasure = 70;
	int sValuecomponentIfcwarpingconstantmeasure = 71;
	int sValuecomponentIfcwarpingmomentmeasure = 72;
	int sValuecomponentIfcamountofsubstancemeasure = 73;
	int sValuecomponentIfcareameasure = 74;
	int sValuecomponentIfccomplexnumber = 75;
	int sValuecomponentIfccontextdependentmeasure = 76;
	int sValuecomponentIfccountmeasure = 77;
	int sValuecomponentIfcdescriptivemeasure = 78;
	int sValuecomponentIfcelectriccurrentmeasure = 79;
	int sValuecomponentIfclengthmeasure = 80;
	int sValuecomponentIfcluminousintensitymeasure = 81;
	int sValuecomponentIfcmassmeasure = 82;
	int sValuecomponentIfcnonnegativelengthmeasure = 83;
	int sValuecomponentIfcnormalisedratiomeasure = 84;
	int sValuecomponentIfcnumericmeasure = 85;
	int sValuecomponentIfcparametervalue = 86;
	int sValuecomponentIfcplaneanglemeasure = 87;
	int sValuecomponentIfcpositivelengthmeasure = 88;
	int sValuecomponentIfcpositiveplaneanglemeasure = 89;
	int sValuecomponentIfcpositiveratiomeasure = 90;
	int sValuecomponentIfcratiomeasure = 91;
	int sValuecomponentIfcsolidanglemeasure = 92;
	int sValuecomponentIfcthermodynamictemperaturemeasure = 93;
	int sValuecomponentIfctimemeasure = 94;
	int sValuecomponentIfcvolumemeasure = 95;
	int sValuecomponentIfcboolean = 96;
	int sValuecomponentIfcdate = 97;
	int sValuecomponentIfcdatetime = 98;
	int sValuecomponentIfcduration = 99;
	int sValuecomponentIfcidentifier = 100;
	int sValuecomponentIfcinteger = 101;
	int sValuecomponentIfclabel = 102;
	int sValuecomponentIfclogical = 103;
	int sValuecomponentIfcreal = 104;
	int sValuecomponentIfctext = 105;
	int sValuecomponentIfctime = 106;
	int sValuecomponentIfctimestamp = 107;

	int testValuecomponent(EIfcmeasurewithunit type) throws SdaiException;

	double getValuecomponent(EIfcmeasurewithunit type, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	double getValuecomponent(EIfcmeasurewithunit type, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	double getValuecomponent(EIfcmeasurewithunit type, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	double getValuecomponent(EIfcmeasurewithunit type, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer getValuecomponent(EIfcmeasurewithunit type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	double getValuecomponent(EIfcmeasurewithunit type, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	double getValuecomponent(EIfcmeasurewithunit type, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	double getValuecomponent(EIfcmeasurewithunit type, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	double getValuecomponent(EIfcmeasurewithunit type, EIfcenergymeasure node1) throws SdaiException; // case 15
	double getValuecomponent(EIfcmeasurewithunit type, EIfcforcemeasure node1) throws SdaiException; // case 16
	double getValuecomponent(EIfcmeasurewithunit type, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	double getValuecomponent(EIfcmeasurewithunit type, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	double getValuecomponent(EIfcmeasurewithunit type, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	double getValuecomponent(EIfcmeasurewithunit type, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	double getValuecomponent(EIfcmeasurewithunit type, EIfcinductancemeasure node1) throws SdaiException; // case 21
	int getValuecomponent(EIfcmeasurewithunit type, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	double getValuecomponent(EIfcmeasurewithunit type, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	double getValuecomponent(EIfcmeasurewithunit type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	double getValuecomponent(EIfcmeasurewithunit type, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	double getValuecomponent(EIfcmeasurewithunit type, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	double getValuecomponent(EIfcmeasurewithunit type, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	double getValuecomponent(EIfcmeasurewithunit type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	double getValuecomponent(EIfcmeasurewithunit type, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	double getValuecomponent(EIfcmeasurewithunit type, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	double getValuecomponent(EIfcmeasurewithunit type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	double getValuecomponent(EIfcmeasurewithunit type, EIfcphmeasure node1) throws SdaiException; // case 45
	double getValuecomponent(EIfcmeasurewithunit type, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	double getValuecomponent(EIfcmeasurewithunit type, EIfcpowermeasure node1) throws SdaiException; // case 47
	double getValuecomponent(EIfcmeasurewithunit type, EIfcpressuremeasure node1) throws SdaiException; // case 48
	double getValuecomponent(EIfcmeasurewithunit type, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	double getValuecomponent(EIfcmeasurewithunit type, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	double getValuecomponent(EIfcmeasurewithunit type, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	double getValuecomponent(EIfcmeasurewithunit type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	double getValuecomponent(EIfcmeasurewithunit type, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	double getValuecomponent(EIfcmeasurewithunit type, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	double getValuecomponent(EIfcmeasurewithunit type, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	double getValuecomponent(EIfcmeasurewithunit type, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	double getValuecomponent(EIfcmeasurewithunit type, EIfctorquemeasure node1) throws SdaiException; // case 68
	double getValuecomponent(EIfcmeasurewithunit type, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	double getValuecomponent(EIfcmeasurewithunit type, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	double getValuecomponent(EIfcmeasurewithunit type, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	double getValuecomponent(EIfcmeasurewithunit type, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	double getValuecomponent(EIfcmeasurewithunit type, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	double getValuecomponent(EIfcmeasurewithunit type, EIfcareameasure node1) throws SdaiException; // case 74
	A_double getValuecomponent(EIfcmeasurewithunit type, EIfccomplexnumber node1) throws SdaiException; // case 75
	double getValuecomponent(EIfcmeasurewithunit type, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	double getValuecomponent(EIfcmeasurewithunit type, EIfccountmeasure node1) throws SdaiException; // case 77
	String getValuecomponent(EIfcmeasurewithunit type, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	double getValuecomponent(EIfcmeasurewithunit type, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	double getValuecomponent(EIfcmeasurewithunit type, EIfclengthmeasure node1) throws SdaiException; // case 80
	double getValuecomponent(EIfcmeasurewithunit type, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	double getValuecomponent(EIfcmeasurewithunit type, EIfcmassmeasure node1) throws SdaiException; // case 82
	double getValuecomponent(EIfcmeasurewithunit type, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	double getValuecomponent(EIfcmeasurewithunit type, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	double getValuecomponent(EIfcmeasurewithunit type, EIfcnumericmeasure node1) throws SdaiException; // case 85
	double getValuecomponent(EIfcmeasurewithunit type, EIfcparametervalue node1) throws SdaiException; // case 86
	double getValuecomponent(EIfcmeasurewithunit type, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	double getValuecomponent(EIfcmeasurewithunit type, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	double getValuecomponent(EIfcmeasurewithunit type, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	double getValuecomponent(EIfcmeasurewithunit type, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	double getValuecomponent(EIfcmeasurewithunit type, EIfcratiomeasure node1) throws SdaiException; // case 91
	double getValuecomponent(EIfcmeasurewithunit type, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	double getValuecomponent(EIfcmeasurewithunit type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	double getValuecomponent(EIfcmeasurewithunit type, EIfctimemeasure node1) throws SdaiException; // case 94
	double getValuecomponent(EIfcmeasurewithunit type, EIfcvolumemeasure node1) throws SdaiException; // case 95
	boolean getValuecomponent(EIfcmeasurewithunit type, EIfcboolean node1) throws SdaiException; // case 96
	String getValuecomponent(EIfcmeasurewithunit type, EIfcdate node1) throws SdaiException; // case 97
	String getValuecomponent(EIfcmeasurewithunit type, EIfcdatetime node1) throws SdaiException; // case 98
	String getValuecomponent(EIfcmeasurewithunit type, EIfcduration node1) throws SdaiException; // case 99
	String getValuecomponent(EIfcmeasurewithunit type, EIfcidentifier node1) throws SdaiException; // case 100
	int getValuecomponent(EIfcmeasurewithunit type, EIfcinteger node1) throws SdaiException; // case 101
	String getValuecomponent(EIfcmeasurewithunit type, EIfclabel node1) throws SdaiException; // case 102
	int getValuecomponent(EIfcmeasurewithunit type, EIfclogical node1) throws SdaiException; // case 103
	double getValuecomponent(EIfcmeasurewithunit type, EIfcreal node1) throws SdaiException; // case 104
	String getValuecomponent(EIfcmeasurewithunit type, EIfctext node1) throws SdaiException; // case 105
	String getValuecomponent(EIfcmeasurewithunit type, EIfctime node1) throws SdaiException; // case 106
	int getValuecomponent(EIfcmeasurewithunit type, EIfctimestamp node1) throws SdaiException; // case 107

	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer createValuecomponent(EIfcmeasurewithunit type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcenergymeasure node1) throws SdaiException; // case 15
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcforcemeasure node1) throws SdaiException; // case 16
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcinductancemeasure node1) throws SdaiException; // case 21
	void setValuecomponent(EIfcmeasurewithunit type, int value, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcphmeasure node1) throws SdaiException; // case 45
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcpowermeasure node1) throws SdaiException; // case 47
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcpressuremeasure node1) throws SdaiException; // case 48
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfctorquemeasure node1) throws SdaiException; // case 68
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcareameasure node1) throws SdaiException; // case 74
	A_double createValuecomponent(EIfcmeasurewithunit type, EIfccomplexnumber node1) throws SdaiException; // case 75
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfccountmeasure node1) throws SdaiException; // case 77
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfclengthmeasure node1) throws SdaiException; // case 80
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcmassmeasure node1) throws SdaiException; // case 82
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcnumericmeasure node1) throws SdaiException; // case 85
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcparametervalue node1) throws SdaiException; // case 86
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcratiomeasure node1) throws SdaiException; // case 91
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfctimemeasure node1) throws SdaiException; // case 94
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcvolumemeasure node1) throws SdaiException; // case 95
	void setValuecomponent(EIfcmeasurewithunit type, boolean value, EIfcboolean node1) throws SdaiException; // case 96
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfcdate node1) throws SdaiException; // case 97
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfcdatetime node1) throws SdaiException; // case 98
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfcduration node1) throws SdaiException; // case 99
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfcidentifier node1) throws SdaiException; // case 100
	void setValuecomponent(EIfcmeasurewithunit type, int value, EIfcinteger node1) throws SdaiException; // case 101
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfclabel node1) throws SdaiException; // case 102
	void setValuecomponent(EIfcmeasurewithunit type, int value, EIfclogical node1) throws SdaiException; // case 103
	void setValuecomponent(EIfcmeasurewithunit type, double value, EIfcreal node1) throws SdaiException; // case 104
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfctext node1) throws SdaiException; // case 105
	void setValuecomponent(EIfcmeasurewithunit type, String value, EIfctime node1) throws SdaiException; // case 106
	void setValuecomponent(EIfcmeasurewithunit type, int value, EIfctimestamp node1) throws SdaiException; // case 107

	void unsetValuecomponent(EIfcmeasurewithunit type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: UnitComponent
	boolean testUnitcomponent(EIfcmeasurewithunit type) throws SdaiException;

	EEntity getUnitcomponent(EIfcmeasurewithunit type) throws SdaiException; // case 1

	void setUnitcomponent(EIfcmeasurewithunit type, EEntity value) throws SdaiException; // case 1

	void unsetUnitcomponent(EIfcmeasurewithunit type) throws SdaiException;

}
