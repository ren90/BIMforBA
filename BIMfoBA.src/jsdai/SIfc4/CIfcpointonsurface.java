/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPointOnSurface

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpointonsurface extends CIfcpoint implements EIfcpointonsurface {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpointonsurface.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected Object a0; // BasisSurface - current entity - ENTITY IfcSurface
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected double a1; // PointParameterU - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a2; // PointParameterV - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// Dim: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// BasisSurface - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// PointParameterU - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected double a1;
	// PointParameterV - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a2;
	// Dim - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4980=EXPLICIT_ATTRIBUTE('BasisSurface',#4978,0,#5952,$,.F.);
	//<01> generating methods for consolidated attribute:  BasisSurface
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : BasisSurface, base type: entity IfcSurface
	public static int usedinBasissurface(EIfcpointonsurface type, EIfcsurface instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testBasissurface(EIfcpointonsurface type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcsurface getBasissurface(EIfcpointonsurface type) throws SdaiException {
		return (EIfcsurface)get_instance(a0);
	}
	public void setBasissurface(EIfcpointonsurface type, EIfcsurface value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetBasissurface(EIfcpointonsurface type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeBasissurface(EIfcpointonsurface type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4981=EXPLICIT_ATTRIBUTE('PointParameterU',#4978,1,#2599,$,.F.);
	//<01> generating methods for consolidated attribute:  PointParameterU
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: PointParameterU, base type: REAL
	public boolean testPointparameteru(EIfcpointonsurface type) throws SdaiException {
		return test_double(a1);
	}
	public double getPointparameteru(EIfcpointonsurface type) throws SdaiException {
		return get_double(a1);
	}
	public void setPointparameteru(EIfcpointonsurface type, double value) throws SdaiException {
		a1 = set_double(value);
	}
	public void unsetPointparameteru(EIfcpointonsurface type) throws SdaiException {
		a1 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributePointparameteru(EIfcpointonsurface type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4982=EXPLICIT_ATTRIBUTE('PointParameterV',#4978,2,#2599,$,.F.);
	//<01> generating methods for consolidated attribute:  PointParameterV
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: PointParameterV, base type: REAL
	public boolean testPointparameterv(EIfcpointonsurface type) throws SdaiException {
		return test_double(a2);
	}
	public double getPointparameterv(EIfcpointonsurface type) throws SdaiException {
		return get_double(a2);
	}
	public void setPointparameterv(EIfcpointonsurface type, double value) throws SdaiException {
		a2 = set_double(value);
	}
	public void unsetPointparameterv(EIfcpointonsurface type) throws SdaiException {
		a2 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributePointparameterv(EIfcpointonsurface type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4983=DERIVED_ATTRIBUTE('Dim',#4978,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcpointonsurface type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcpointonsurface type, SdaiContext _context) throws SdaiException {




//###-01 jc.generated_java: Value.alloc(jsdai.SIfc4.CIfcsurface.definition).set(_context, get(a0$)).getAttribute(jsdai.SIfc4.CIfcsurface.attributeDim(null), _context)
				return (Value.alloc(jsdai.SIfc4.CIfcsurface.definition).set(_context, get(a0$)).getAttribute(jsdai.SIfc4.CIfcsurface.attributeDim(null), _context));
	}
	public int getDim(EIfcpointonsurface type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcpointonsurface)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcpointonsurface type) throws SdaiException {
		return d0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Double.NaN;
			a2 = Double.NaN;
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
		a1 = av.entityValues[2].getDouble(1);
		a2 = av.entityValues[2].getDouble(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Double.NaN;
			a2 = Double.NaN;
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
		a1 = av.entityValues[2].getDouble(1);
		a2 = av.entityValues[2].getDouble(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPoint
		// partial entity: IfcPointOnSurface
		av.entityValues[2].setInstance(0, a0);
		av.entityValues[2].setDouble(1, a1);
		av.entityValues[2].setDouble(2, a2);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPoint
		// partial entity: IfcPointOnSurface
		av.entityValues[2].setInstance(0, a0);
		av.entityValues[2].setDouble(1, a1);
		av.entityValues[2].setDouble(2, a2);
		// partial entity: IfcRepresentationItem
	}
}
