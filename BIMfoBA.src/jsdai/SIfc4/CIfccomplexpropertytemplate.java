/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcComplexPropertyTemplate

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccomplexpropertytemplate extends CIfcpropertytemplate implements EIfccomplexpropertytemplate {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccomplexpropertytemplate.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	// HasContext: protected Object  - inverse - java inheritance -  ENTITY IfcRelDeclares
	// HasAssociations: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssociates
	// PartOfComplexTemplate: protected Object  - inverse - java inheritance -  ENTITY IfcComplexPropertyTemplate
	// PartOfPsetTemplate: protected Object  - inverse - java inheritance -  ENTITY IfcPropertySetTemplate
	protected String a4; // UsageName - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a5; // TemplateType - current entity - ENUMERATION IfcComplexPropertyTemplateTypeEnum
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected AIfcpropertytemplate a6; // HasPropertyTemplates - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// HasContext - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// HasAssociations - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PartOfComplexTemplate - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// PartOfPsetTemplate - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// UsageName - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// TemplateType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a5;
	// HasPropertyTemplates - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected AIfcpropertytemplate a6;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a6, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a6, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5113=INVERSE_ATTRIBUTE('HasContext',#5111,0,#5450,$,#5453,#8928,#8929,.F.);
	//<01> generating methods for consolidated attribute:  HasContext
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5114=INVERSE_ATTRIBUTE('HasAssociations',#5111,1,#5375,$,#5377,#8931,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssociations
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5165=INVERSE_ATTRIBUTE('PartOfComplexTemplate',#5163,0,#3679,$,#3683,#8976,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplexTemplate
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5166=INVERSE_ATTRIBUTE('PartOfPsetTemplate',#5163,1,#5145,$,#5149,#8978,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfPsetTemplate
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3681=EXPLICIT_ATTRIBUTE('UsageName',#3679,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UsageName
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: UsageName, base type: STRING
	public boolean testUsagename(EIfccomplexpropertytemplate type) throws SdaiException {
		return test_string(a4);
	}
	public String getUsagename(EIfccomplexpropertytemplate type) throws SdaiException {
		return get_string(a4);
	}
	public void setUsagename(EIfccomplexpropertytemplate type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetUsagename(EIfccomplexpropertytemplate type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeUsagename(EIfccomplexpropertytemplate type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #3682=EXPLICIT_ATTRIBUTE('TemplateType',#3679,1,#2767,$,.T.);
	//<01> generating methods for consolidated attribute:  TemplateType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:TemplateType, base type: ENUMERATION
	public boolean testTemplatetype(EIfccomplexpropertytemplate type) throws SdaiException {
		return test_enumeration(a5);
	}
	public int getTemplatetype(EIfccomplexpropertytemplate type) throws SdaiException {
		return get_enumeration(a5);
	}
	public void setTemplatetype(EIfccomplexpropertytemplate type, int value) throws SdaiException {
		a5 = set_enumeration(value, a5$);
	}
	public void unsetTemplatetype(EIfccomplexpropertytemplate type) throws SdaiException {
		a5 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeTemplatetype(EIfccomplexpropertytemplate type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #3683=EXPLICIT_ATTRIBUTE('HasPropertyTemplates',#3679,2,#6860,$,.T.);
	//<01> generating methods for consolidated attribute:  HasPropertyTemplates
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: HasPropertyTemplates, base type: SET OF ENTITY
	public static int usedinHaspropertytemplates(EIfccomplexpropertytemplate type, EIfcpropertytemplate instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	public boolean testHaspropertytemplates(EIfccomplexpropertytemplate type) throws SdaiException {
		return test_aggregate(a6);
	}
	public AIfcpropertytemplate getHaspropertytemplates(EIfccomplexpropertytemplate type) throws SdaiException {
		return (AIfcpropertytemplate)get_aggregate(a6);
	}
	public AIfcpropertytemplate createHaspropertytemplates(EIfccomplexpropertytemplate type) throws SdaiException {
		a6 = (AIfcpropertytemplate)create_aggregate_class(a6, a6$,  AIfcpropertytemplate.class, 0);
		return a6;
	}
	public void unsetHaspropertytemplates(EIfccomplexpropertytemplate type) throws SdaiException {
		unset_aggregate(a6);
		a6 = null;
	}
	public static jsdai.dictionary.EAttribute attributeHaspropertytemplates(EIfccomplexpropertytemplate type) throws SdaiException {
		return a6$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = null;
			a5 = 0;
			if (a6 instanceof CAggregate)
				a6.unsetAll();
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[0].getString(0);
		a5 = av.entityValues[0].getEnumeration(1, a5$);
		a6 = (AIfcpropertytemplate)av.entityValues[0].getInstanceAggregate(2, a6$, this);
		a0 = av.entityValues[4].getString(0);
		a1 = av.entityValues[4].getInstance(1, this, a1$);
		a2 = av.entityValues[4].getString(2);
		a3 = av.entityValues[4].getString(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = null;
			a5 = 0;
			if (a6 instanceof CAggregate)
				a6.unsetAll();
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[0].getString(0);
		a5 = av.entityValues[0].getEnumeration(1, a5$);
		a6 = (AIfcpropertytemplate)av.entityValues[0].getInstanceAggregate(2, a6$, this);
		a0 = av.entityValues[4].getString(0);
		a1 = av.entityValues[4].getInstance(1, this, a1$);
		a2 = av.entityValues[4].getString(2);
		a3 = av.entityValues[4].getString(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcComplexPropertyTemplate
		av.entityValues[0].setString(0, a4);
		av.entityValues[0].setEnumeration(1, a5, a5$);
		av.entityValues[0].setInstanceAggregate(2, a6);
		// partial entity: IfcPropertyDefinition
		// partial entity: IfcPropertyTemplate
		// partial entity: IfcPropertyTemplateDefinition
		// partial entity: IfcRoot
		av.entityValues[4].setString(0, a0);
		av.entityValues[4].setInstance(1, a1);
		av.entityValues[4].setString(2, a2);
		av.entityValues[4].setString(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcComplexPropertyTemplate
		av.entityValues[0].setString(0, a4);
		av.entityValues[0].setEnumeration(1, a5, a5$);
		av.entityValues[0].setInstanceAggregate(2, a6);
		// partial entity: IfcPropertyDefinition
		// partial entity: IfcPropertyTemplate
		// partial entity: IfcPropertyTemplateDefinition
		// partial entity: IfcRoot
		av.entityValues[4].setString(0, a0);
		av.entityValues[4].setInstance(1, a1);
		av.entityValues[4].setString(2, a2);
		av.entityValues[4].setString(3, a3);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfccomplexpropertytemplateUniquepropertynames(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfcuniquepropertytemplatenames()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a6$)))).getLogical());
	}
	public int rIfccomplexpropertytemplateNoselfreference(SdaiContext _context) throws SdaiException {
	



									
									Value _internal_aggregate_source72 = Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a6$));
									Value _result70 = Value.alloc(_internal_aggregate_source72).create();
									if (_internal_aggregate_source72.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i71 = 1; _i71 <= _internal_aggregate_source72.getMemberCount(); _i71++) {
											Value _implicit_17_temp = _internal_aggregate_source72.getByIndex(_i71);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).instanceEqual(_context, Value.alloc(jsdai.SIfc4.CIfccomplexpropertytemplate.definition).set(_context, this), _implicit_17_temp).getLogical() == 2) {
												_result70.addMember(_context, _implicit_17_temp);
											} else
											if (_internal_aggregate_source72.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_17_temp.unset();
												_result70.addMember(_context, _implicit_17_temp);
											}
										}
									} else {
										_result70.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result70), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
