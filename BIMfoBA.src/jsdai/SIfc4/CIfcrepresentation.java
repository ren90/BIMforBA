/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRepresentation

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcrepresentation extends CEntity implements EIfcrepresentation {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcrepresentation.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // ContextOfItems - current entity - ENTITY IfcRepresentationContext
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // RepresentationIdentifier - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // RepresentationType - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcrepresentationitem a3; // Items - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// RepresentationMap: protected Object  - inverse - current -  ENTITY IfcRepresentationMap
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// LayerAssignments: protected Object  - inverse - current -  ENTITY IfcPresentationLayerAssignment
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// OfProductRepresentation: protected Object  - inverse - current -  ENTITY IfcProductRepresentation
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// ContextOfItems - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// RepresentationIdentifier - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// RepresentationType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// Items - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected AIfcrepresentationitem a3;
	// RepresentationMap - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// LayerAssignments - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// OfProductRepresentation - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a3, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a3, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5538=EXPLICIT_ATTRIBUTE('ContextOfItems',#5536,0,#5545,$,.F.);
	//<01> generating methods for consolidated attribute:  ContextOfItems
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ContextOfItems, base type: entity IfcRepresentationContext
	public static int usedinContextofitems(EIfcrepresentation type, EIfcrepresentationcontext instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testContextofitems(EIfcrepresentation type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcrepresentationcontext getContextofitems(EIfcrepresentation type) throws SdaiException {
		return (EIfcrepresentationcontext)get_instance(a0);
	}
	public void setContextofitems(EIfcrepresentation type, EIfcrepresentationcontext value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetContextofitems(EIfcrepresentation type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeContextofitems(EIfcrepresentation type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #5539=EXPLICIT_ATTRIBUTE('RepresentationIdentifier',#5536,1,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  RepresentationIdentifier
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: RepresentationIdentifier, base type: STRING
	public boolean testRepresentationidentifier(EIfcrepresentation type) throws SdaiException {
		return test_string(a1);
	}
	public String getRepresentationidentifier(EIfcrepresentation type) throws SdaiException {
		return get_string(a1);
	}
	public void setRepresentationidentifier(EIfcrepresentation type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetRepresentationidentifier(EIfcrepresentation type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeRepresentationidentifier(EIfcrepresentation type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5540=EXPLICIT_ATTRIBUTE('RepresentationType',#5536,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  RepresentationType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: RepresentationType, base type: STRING
	public boolean testRepresentationtype(EIfcrepresentation type) throws SdaiException {
		return test_string(a2);
	}
	public String getRepresentationtype(EIfcrepresentation type) throws SdaiException {
		return get_string(a2);
	}
	public void setRepresentationtype(EIfcrepresentation type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetRepresentationtype(EIfcrepresentation type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeRepresentationtype(EIfcrepresentation type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5541=EXPLICIT_ATTRIBUTE('Items',#5536,3,#7108,$,.F.);
	//<01> generating methods for consolidated attribute:  Items
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Items, base type: SET OF ENTITY
	public static int usedinItems(EIfcrepresentation type, EIfcrepresentationitem instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testItems(EIfcrepresentation type) throws SdaiException {
		return test_aggregate(a3);
	}
	public AIfcrepresentationitem getItems(EIfcrepresentation type) throws SdaiException {
		return (AIfcrepresentationitem)get_aggregate(a3);
	}
	public AIfcrepresentationitem createItems(EIfcrepresentation type) throws SdaiException {
		a3 = (AIfcrepresentationitem)create_aggregate_class(a3, a3$,  AIfcrepresentationitem.class, 0);
		return a3;
	}
	public void unsetItems(EIfcrepresentation type) throws SdaiException {
		unset_aggregate(a3);
		a3 = null;
	}
	public static jsdai.dictionary.EAttribute attributeItems(EIfcrepresentation type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #5542=INVERSE_ATTRIBUTE('RepresentationMap',#5536,0,#5554,$,#5557,#9208,#9209,.F.);
	//<01> generating methods for consolidated attribute:  RepresentationMap
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	public AIfcrepresentationmap getRepresentationmap(EIfcrepresentation type, ASdaiModel domain) throws SdaiException {
		AIfcrepresentationmap result = (AIfcrepresentationmap)get_inverse_aggregate(i0$);
		CIfcrepresentationmap.usedinMappedrepresentation(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeRepresentationmap(EIfcrepresentation type) throws SdaiException {
		return i0$;
	}

	//going through all the attributes: #5543=INVERSE_ATTRIBUTE('LayerAssignments',#5536,1,#5023,$,#5027,#9211,$,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignments
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - LayerAssignments : SET[0:-2147483648] OF IfcPresentationLayerAssignment FOR AssignedItems
	public AIfcpresentationlayerassignment getLayerassignments(EIfcrepresentation type, ASdaiModel domain) throws SdaiException {
		AIfcpresentationlayerassignment result = (AIfcpresentationlayerassignment)get_inverse_aggregate(i1$);
		CIfcpresentationlayerassignment.usedinAssigneditems(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeLayerassignments(EIfcrepresentation type) throws SdaiException {
		return i1$;
	}

	//going through all the attributes: #5544=INVERSE_ATTRIBUTE('OfProductRepresentation',#5536,2,#5063,$,#5067,#9213,$,.F.);
	//<01> generating methods for consolidated attribute:  OfProductRepresentation
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - OfProductRepresentation : SET[0:-2147483648] OF IfcProductRepresentation FOR Representations
	public AIfcproductrepresentation getOfproductrepresentation(EIfcrepresentation type, ASdaiModel domain) throws SdaiException {
		AIfcproductrepresentation result = (AIfcproductrepresentation)get_inverse_aggregate(i2$);
		CIfcproductrepresentation.usedinRepresentations(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeOfproductrepresentation(EIfcrepresentation type) throws SdaiException {
		return i2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = null;
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
		a3 = (AIfcrepresentationitem)av.entityValues[0].getInstanceAggregate(3, a3$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = null;
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
		a3 = (AIfcrepresentationitem)av.entityValues[0].getInstanceAggregate(3, a3$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRepresentation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
		av.entityValues[0].setInstanceAggregate(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRepresentation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
		av.entityValues[0].setInstanceAggregate(3, a3);
	}
}
