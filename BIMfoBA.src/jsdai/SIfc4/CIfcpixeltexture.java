/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPixelTexture

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpixeltexture extends CIfcsurfacetexture implements EIfcpixeltexture {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpixeltexture.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// RepeatS: protected int a0;   RepeatS - java inheritance - BOOLEAN
	// RepeatT: protected int a1;   RepeatT - java inheritance - BOOLEAN
	// Mode: protected String a2;   Mode - java inheritance - STRING
	// TextureTransform: protected Object a3;   TextureTransform - java inheritance - ENTITY IfcCartesianTransformationOperator2D
	// Parameter: protected A_string a4;   Parameter - java inheritance - LIST OF STRING
	// IsMappedBy: protected Object  - inverse - java inheritance -  ENTITY IfcTextureCoordinate
	// UsedInStyles: protected Object  - inverse - java inheritance -  ENTITY IfcSurfaceStyleWithTextures
	protected int a5; // Width - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a6; // Height - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a7; // ColourComponents - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected A_binary a8; // Pixel - current entity - LIST OF BINARY
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// RepeatS - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected int a0;
	// RepeatT - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected int a1;
	// Mode - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// TextureTransform - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected Object a3;
	// Parameter - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected A_string a4;
	// IsMappedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// UsedInStyles - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Width - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a5;
	// Height - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a6;
	// ColourComponents - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a7;
	// Pixel - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected A_binary a8;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6010=EXPLICIT_ATTRIBUTE('RepeatS',#6008,0,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  RepeatS
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6011=EXPLICIT_ATTRIBUTE('RepeatT',#6008,1,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  RepeatT
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6012=EXPLICIT_ATTRIBUTE('Mode',#6008,2,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Mode
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6013=EXPLICIT_ATTRIBUTE('TextureTransform',#6008,3,#3579,$,.T.);
	//<01> generating methods for consolidated attribute:  TextureTransform
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): TextureTransform, base type: entity IfcCartesianTransformationOperator2D
	public static int usedinTexturetransform(EIfcsurfacetexture type, EIfccartesiantransformationoperator2d instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	//going through all the attributes: #6014=EXPLICIT_ATTRIBUTE('Parameter',#6008,4,#7160,$,.T.);
	//<01> generating methods for consolidated attribute:  Parameter
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6015=INVERSE_ATTRIBUTE('IsMappedBy',#6008,0,#6195,$,#6197,#9546,$,.F.);
	//<01> generating methods for consolidated attribute:  IsMappedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6016=INVERSE_ATTRIBUTE('UsedInStyles',#6008,1,#6005,$,#6007,#9548,$,.F.);
	//<01> generating methods for consolidated attribute:  UsedInStyles
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4946=EXPLICIT_ATTRIBUTE('Width',#4944,0,#2529,$,.F.);
	//<01> generating methods for consolidated attribute:  Width
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Width, base type: INTEGER
	public boolean testWidth(EIfcpixeltexture type) throws SdaiException {
		return test_integer(a5);
	}
	public int getWidth(EIfcpixeltexture type) throws SdaiException {
		return get_integer(a5);
	}
	public void setWidth(EIfcpixeltexture type, int value) throws SdaiException {
		a5 = set_integer(value);
	}
	public void unsetWidth(EIfcpixeltexture type) throws SdaiException {
		a5 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeWidth(EIfcpixeltexture type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #4947=EXPLICIT_ATTRIBUTE('Height',#4944,1,#2529,$,.F.);
	//<01> generating methods for consolidated attribute:  Height
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Height, base type: INTEGER
	public boolean testHeight(EIfcpixeltexture type) throws SdaiException {
		return test_integer(a6);
	}
	public int getHeight(EIfcpixeltexture type) throws SdaiException {
		return get_integer(a6);
	}
	public void setHeight(EIfcpixeltexture type, int value) throws SdaiException {
		a6 = set_integer(value);
	}
	public void unsetHeight(EIfcpixeltexture type) throws SdaiException {
		a6 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeHeight(EIfcpixeltexture type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #4948=EXPLICIT_ATTRIBUTE('ColourComponents',#4944,2,#2529,$,.F.);
	//<01> generating methods for consolidated attribute:  ColourComponents
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ColourComponents, base type: INTEGER
	public boolean testColourcomponents(EIfcpixeltexture type) throws SdaiException {
		return test_integer(a7);
	}
	public int getColourcomponents(EIfcpixeltexture type) throws SdaiException {
		return get_integer(a7);
	}
	public void setColourcomponents(EIfcpixeltexture type, int value) throws SdaiException {
		a7 = set_integer(value);
	}
	public void unsetColourcomponents(EIfcpixeltexture type) throws SdaiException {
		a7 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeColourcomponents(EIfcpixeltexture type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #4949=EXPLICIT_ATTRIBUTE('Pixel',#4944,3,#7004,$,.F.);
	//<01> generating methods for consolidated attribute:  Pixel
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Pixel, base type: LIST OF BINARY
	public boolean testPixel(EIfcpixeltexture type) throws SdaiException {
		return test_aggregate(a8);
	}
	public A_binary getPixel(EIfcpixeltexture type) throws SdaiException {
		return (A_binary)get_aggregate(a8);
	}
	public A_binary createPixel(EIfcpixeltexture type) throws SdaiException {
		a8 = create_aggregate_binary(a8, a8$, 0);
		return a8;
	}
	public void unsetPixel(EIfcpixeltexture type) throws SdaiException {
		unset_aggregate(a8);
		a8 = null;
	}
	public static jsdai.dictionary.EAttribute attributePixel(EIfcpixeltexture type) throws SdaiException {
		return a8$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a5 = Integer.MIN_VALUE;
			a6 = Integer.MIN_VALUE;
			a7 = Integer.MIN_VALUE;
			if (a8 instanceof CAggregate)
				a8.unsetAll();
			a8 = null;
			a0 = 0;
			a1 = 0;
			a2 = null;
			a3 = unset_instance(a3);
			if (a4 instanceof CAggregate)
				a4.unsetAll();
			a4 = null;
			return;
		}
		a5 = av.entityValues[0].getInteger(0);
		a6 = av.entityValues[0].getInteger(1);
		a7 = av.entityValues[0].getInteger(2);
		a8 = av.entityValues[0].getBinaryAggregate(3, a8$, this);
		a0 = av.entityValues[2].getBoolean(0);
		a1 = av.entityValues[2].getBoolean(1);
		a2 = av.entityValues[2].getString(2);
		a3 = av.entityValues[2].getInstance(3, this, a3$);
		a4 = av.entityValues[2].getStringAggregate(4, a4$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a5 = Integer.MIN_VALUE;
			a6 = Integer.MIN_VALUE;
			a7 = Integer.MIN_VALUE;
			if (a8 instanceof CAggregate)
				a8.unsetAll();
			a8 = null;
			a0 = 0;
			a1 = 0;
			a2 = null;
			a3 = unset_instance(a3);
			if (a4 instanceof CAggregate)
				a4.unsetAll();
			a4 = null;
			return;
		}
		a5 = av.entityValues[0].getInteger(0);
		a6 = av.entityValues[0].getInteger(1);
		a7 = av.entityValues[0].getInteger(2);
		a8 = av.entityValues[0].getBinaryAggregate(3, a8$, this);
		a0 = av.entityValues[2].getBoolean(0);
		a1 = av.entityValues[2].getBoolean(1);
		a2 = av.entityValues[2].getString(2);
		a3 = av.entityValues[2].getInstance(3, this, a3$);
		a4 = av.entityValues[2].getStringAggregate(4, a4$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPixelTexture
		av.entityValues[0].setInteger(0, a5);
		av.entityValues[0].setInteger(1, a6);
		av.entityValues[0].setInteger(2, a7);
		av.entityValues[0].setBinaryAggregate(3, a8);
		// partial entity: IfcPresentationItem
		// partial entity: IfcSurfaceTexture
		av.entityValues[2].setBoolean(0, a0);
		av.entityValues[2].setBoolean(1, a1);
		av.entityValues[2].setString(2, a2);
		av.entityValues[2].setInstance(3, a3);
		av.entityValues[2].setStringAggregate(4, a4);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPixelTexture
		av.entityValues[0].setInteger(0, a5);
		av.entityValues[0].setInteger(1, a6);
		av.entityValues[0].setInteger(2, a7);
		av.entityValues[0].setBinaryAggregate(3, a8);
		// partial entity: IfcPresentationItem
		// partial entity: IfcSurfaceTexture
		av.entityValues[2].setBoolean(0, a0);
		av.entityValues[2].setBoolean(1, a1);
		av.entityValues[2].setString(2, a2);
		av.entityValues[2].setInstance(3, a3);
		av.entityValues[2].setStringAggregate(4, a4);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpixeltextureSizeofpixellist(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_binary).set(_context, get(a8$))), Value.alloc().mulOrIntersect(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a5$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a6$))))).getLogical());
	}
	public int rIfcpixeltextureMinpixelins(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a5$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).getLogical());
	}
	public int rIfcpixeltextureMinpixelint(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a6$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).getLogical());
	}
	public int rIfcpixeltextureNumberofcolours(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a7$))), Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcInteger).set(_context, get(a7$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 4)))).getLogical());
	}
	public int rIfcpixeltexturePixelasbyteandsamelength(SdaiContext _context) throws SdaiException {
	





									
									Value _internal_aggregate_source139 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_binary).set(_context, get(a8$));
									Value _result137 = Value.alloc(_internal_aggregate_source139).create();
									if (_internal_aggregate_source139.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i138 = 1; _i138 <= _internal_aggregate_source139.getMemberCount(); _i138++) {
											Value _implicit_32_temp = _internal_aggregate_source139.getByIndex(_i138);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.NUMBER_TYPE).MOD(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).bLength(_implicit_32_temp), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 8)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).bLength(_implicit_32_temp), Value.alloc(ExpressTypes.INTEGER_TYPE).bLength(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_binary).set(_context, get(a8$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null)))).getLogical() == 2) {
												_result137.addMember(_context, _implicit_32_temp);
											} else
											if (_internal_aggregate_source139.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_32_temp.unset();
												_result137.addMember(_context, _implicit_32_temp);
											}
										}
									} else {
										_result137.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result137), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_binary).set(_context, get(a8$))))).getLogical());
	}
}
