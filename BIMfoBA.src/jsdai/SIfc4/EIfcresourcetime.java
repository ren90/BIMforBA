/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java interface for entity IfcResourceTime

package jsdai.SIfc4;
import jsdai.lang.*;

public interface EIfcresourcetime extends EIfcschedulingtime {

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ScheduleWork, base type: STRING
	public boolean testSchedulework(EIfcresourcetime type) throws SdaiException;
	public String getSchedulework(EIfcresourcetime type) throws SdaiException;
	public void setSchedulework(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetSchedulework(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ScheduleUsage, base type: REAL
	public boolean testScheduleusage(EIfcresourcetime type) throws SdaiException;
	public double getScheduleusage(EIfcresourcetime type) throws SdaiException;
	public void setScheduleusage(EIfcresourcetime type, double value) throws SdaiException;
	public void unsetScheduleusage(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ScheduleStart, base type: STRING
	public boolean testSchedulestart(EIfcresourcetime type) throws SdaiException;
	public String getSchedulestart(EIfcresourcetime type) throws SdaiException;
	public void setSchedulestart(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetSchedulestart(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ScheduleFinish, base type: STRING
	public boolean testSchedulefinish(EIfcresourcetime type) throws SdaiException;
	public String getSchedulefinish(EIfcresourcetime type) throws SdaiException;
	public void setSchedulefinish(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetSchedulefinish(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ScheduleContour, base type: STRING
	public boolean testSchedulecontour(EIfcresourcetime type) throws SdaiException;
	public String getSchedulecontour(EIfcresourcetime type) throws SdaiException;
	public void setSchedulecontour(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetSchedulecontour(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:LevelingDelay, base type: STRING
	public boolean testLevelingdelay(EIfcresourcetime type) throws SdaiException;
	public String getLevelingdelay(EIfcresourcetime type) throws SdaiException;
	public void setLevelingdelay(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetLevelingdelay(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:IsOverAllocated, base type: BOOLEAN
	public boolean testIsoverallocated(EIfcresourcetime type) throws SdaiException;
	public boolean getIsoverallocated(EIfcresourcetime type) throws SdaiException;
	public void setIsoverallocated(EIfcresourcetime type, boolean value) throws SdaiException;
	public void unsetIsoverallocated(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:StatusTime, base type: STRING
	public boolean testStatustime(EIfcresourcetime type) throws SdaiException;
	public String getStatustime(EIfcresourcetime type) throws SdaiException;
	public void setStatustime(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetStatustime(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ActualWork, base type: STRING
	public boolean testActualwork(EIfcresourcetime type) throws SdaiException;
	public String getActualwork(EIfcresourcetime type) throws SdaiException;
	public void setActualwork(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetActualwork(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ActualUsage, base type: REAL
	public boolean testActualusage(EIfcresourcetime type) throws SdaiException;
	public double getActualusage(EIfcresourcetime type) throws SdaiException;
	public void setActualusage(EIfcresourcetime type, double value) throws SdaiException;
	public void unsetActualusage(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ActualStart, base type: STRING
	public boolean testActualstart(EIfcresourcetime type) throws SdaiException;
	public String getActualstart(EIfcresourcetime type) throws SdaiException;
	public void setActualstart(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetActualstart(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:ActualFinish, base type: STRING
	public boolean testActualfinish(EIfcresourcetime type) throws SdaiException;
	public String getActualfinish(EIfcresourcetime type) throws SdaiException;
	public void setActualfinish(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetActualfinish(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:RemainingWork, base type: STRING
	public boolean testRemainingwork(EIfcresourcetime type) throws SdaiException;
	public String getRemainingwork(EIfcresourcetime type) throws SdaiException;
	public void setRemainingwork(EIfcresourcetime type, String value) throws SdaiException;
	public void unsetRemainingwork(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:RemainingUsage, base type: REAL
	public boolean testRemainingusage(EIfcresourcetime type) throws SdaiException;
	public double getRemainingusage(EIfcresourcetime type) throws SdaiException;
	public void setRemainingusage(EIfcresourcetime type, double value) throws SdaiException;
	public void unsetRemainingusage(EIfcresourcetime type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	/// methods for attribute:Completion, base type: REAL
	public boolean testCompletion(EIfcresourcetime type) throws SdaiException;
	public double getCompletion(EIfcresourcetime type) throws SdaiException;
	public void setCompletion(EIfcresourcetime type, double value) throws SdaiException;
	public void unsetCompletion(EIfcresourcetime type) throws SdaiException;

}
