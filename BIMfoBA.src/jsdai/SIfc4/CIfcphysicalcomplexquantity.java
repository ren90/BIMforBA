/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPhysicalComplexQuantity

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcphysicalcomplexquantity extends CIfcphysicalquantity implements EIfcphysicalcomplexquantity {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcphysicalcomplexquantity.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// PartOfComplex: protected Object  - inverse - java inheritance -  ENTITY IfcPhysicalComplexQuantity
	protected AIfcphysicalquantity a2; // HasQuantities - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a3; // Discrimination - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // Quality - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a5; // Usage - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// PartOfComplex - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// HasQuantities - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcphysicalquantity a2;
	// Discrimination - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a3;
	// Quality - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// Usage - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected String a5;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a2, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a2, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4918=EXPLICIT_ATTRIBUTE('Name',#4916,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4919=EXPLICIT_ATTRIBUTE('Description',#4916,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4920=INVERSE_ATTRIBUTE('HasExternalReferences',#4916,0,#4231,$,#4234,#8755,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4921=INVERSE_ATTRIBUTE('PartOfComplex',#4916,1,#4910,$,#4912,#8757,#8758,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplex
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4912=EXPLICIT_ATTRIBUTE('HasQuantities',#4910,0,#7000,$,.F.);
	//<01> generating methods for consolidated attribute:  HasQuantities
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: HasQuantities, base type: SET OF ENTITY
	public static int usedinHasquantities(EIfcphysicalcomplexquantity type, EIfcphysicalquantity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testHasquantities(EIfcphysicalcomplexquantity type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfcphysicalquantity getHasquantities(EIfcphysicalcomplexquantity type) throws SdaiException {
		return (AIfcphysicalquantity)get_aggregate(a2);
	}
	public AIfcphysicalquantity createHasquantities(EIfcphysicalcomplexquantity type) throws SdaiException {
		a2 = (AIfcphysicalquantity)create_aggregate_class(a2, a2$,  AIfcphysicalquantity.class, 0);
		return a2;
	}
	public void unsetHasquantities(EIfcphysicalcomplexquantity type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeHasquantities(EIfcphysicalcomplexquantity type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4913=EXPLICIT_ATTRIBUTE('Discrimination',#4910,1,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Discrimination
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Discrimination, base type: STRING
	public boolean testDiscrimination(EIfcphysicalcomplexquantity type) throws SdaiException {
		return test_string(a3);
	}
	public String getDiscrimination(EIfcphysicalcomplexquantity type) throws SdaiException {
		return get_string(a3);
	}
	public void setDiscrimination(EIfcphysicalcomplexquantity type, String value) throws SdaiException {
		a3 = set_string(value);
	}
	public void unsetDiscrimination(EIfcphysicalcomplexquantity type) throws SdaiException {
		a3 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeDiscrimination(EIfcphysicalcomplexquantity type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #4914=EXPLICIT_ATTRIBUTE('Quality',#4910,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Quality
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Quality, base type: STRING
	public boolean testQuality(EIfcphysicalcomplexquantity type) throws SdaiException {
		return test_string(a4);
	}
	public String getQuality(EIfcphysicalcomplexquantity type) throws SdaiException {
		return get_string(a4);
	}
	public void setQuality(EIfcphysicalcomplexquantity type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetQuality(EIfcphysicalcomplexquantity type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeQuality(EIfcphysicalcomplexquantity type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #4915=EXPLICIT_ATTRIBUTE('Usage',#4910,3,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Usage
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Usage, base type: STRING
	public boolean testUsage(EIfcphysicalcomplexquantity type) throws SdaiException {
		return test_string(a5);
	}
	public String getUsage(EIfcphysicalcomplexquantity type) throws SdaiException {
		return get_string(a5);
	}
	public void setUsage(EIfcphysicalcomplexquantity type, String value) throws SdaiException {
		a5 = set_string(value);
	}
	public void unsetUsage(EIfcphysicalcomplexquantity type) throws SdaiException {
		a5 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeUsage(EIfcphysicalcomplexquantity type) throws SdaiException {
		return a5$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = null;
			a4 = null;
			a5 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = (AIfcphysicalquantity)av.entityValues[0].getInstanceAggregate(0, a2$, this);
		a3 = av.entityValues[0].getString(1);
		a4 = av.entityValues[0].getString(2);
		a5 = av.entityValues[0].getString(3);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			a3 = null;
			a4 = null;
			a5 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = (AIfcphysicalquantity)av.entityValues[0].getInstanceAggregate(0, a2$, this);
		a3 = av.entityValues[0].getString(1);
		a4 = av.entityValues[0].getString(2);
		a5 = av.entityValues[0].getString(3);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPhysicalComplexQuantity
		av.entityValues[0].setInstanceAggregate(0, a2);
		av.entityValues[0].setString(1, a3);
		av.entityValues[0].setString(2, a4);
		av.entityValues[0].setString(3, a5);
		// partial entity: IfcPhysicalQuantity
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPhysicalComplexQuantity
		av.entityValues[0].setInstanceAggregate(0, a2);
		av.entityValues[0].setString(1, a3);
		av.entityValues[0].setString(2, a4);
		av.entityValues[0].setString(3, a5);
		// partial entity: IfcPhysicalQuantity
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcphysicalcomplexquantityNoselfreference(SdaiContext _context) throws SdaiException {
	



									
									Value _internal_aggregate_source135 = Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a2$));
									Value _result133 = Value.alloc(_internal_aggregate_source135).create();
									if (_internal_aggregate_source135.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i134 = 1; _i134 <= _internal_aggregate_source135.getMemberCount(); _i134++) {
											Value _implicit_31_temp = _internal_aggregate_source135.getByIndex(_i134);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).instanceEqual(_context, Value.alloc(jsdai.SIfc4.CIfcphysicalcomplexquantity.definition).set(_context, this), _implicit_31_temp).getLogical() == 2) {
												_result133.addMember(_context, _implicit_31_temp);
											} else
											if (_internal_aggregate_source135.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_31_temp.unset();
												_result133.addMember(_context, _implicit_31_temp);
											}
										}
									} else {
										_result133.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result133), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
	public int rIfcphysicalcomplexquantityUniquequantitynames(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfcuniquequantitynames()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a2$)))).getLogical());
	}
}
