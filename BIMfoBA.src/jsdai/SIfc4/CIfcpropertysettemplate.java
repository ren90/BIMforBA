/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertySetTemplate

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertysettemplate extends CIfcpropertytemplatedefinition implements EIfcpropertysettemplate {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertysettemplate.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	// HasContext: protected Object  - inverse - java inheritance -  ENTITY IfcRelDeclares
	// HasAssociations: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssociates
	protected int a4; // TemplateType - current entity - ENUMERATION IfcPropertySetTemplateTypeEnum
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a5; // ApplicableEntity - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected AIfcpropertytemplate a6; // HasPropertyTemplates - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// Defines: protected Object  - inverse - current -  ENTITY IfcRelDefinesByTemplate
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// HasContext - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// HasAssociations - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// TemplateType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a4;
	// ApplicableEntity - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected String a5;
	// HasPropertyTemplates - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected AIfcpropertytemplate a6;
	// Defines - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a6, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a6, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5113=INVERSE_ATTRIBUTE('HasContext',#5111,0,#5450,$,#5453,#8928,#8929,.F.);
	//<01> generating methods for consolidated attribute:  HasContext
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5114=INVERSE_ATTRIBUTE('HasAssociations',#5111,1,#5375,$,#5377,#8931,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssociations
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5147=EXPLICIT_ATTRIBUTE('TemplateType',#5145,0,#2971,$,.T.);
	//<01> generating methods for consolidated attribute:  TemplateType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:TemplateType, base type: ENUMERATION
	public boolean testTemplatetype(EIfcpropertysettemplate type) throws SdaiException {
		return test_enumeration(a4);
	}
	public int getTemplatetype(EIfcpropertysettemplate type) throws SdaiException {
		return get_enumeration(a4);
	}
	public void setTemplatetype(EIfcpropertysettemplate type, int value) throws SdaiException {
		a4 = set_enumeration(value, a4$);
	}
	public void unsetTemplatetype(EIfcpropertysettemplate type) throws SdaiException {
		a4 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeTemplatetype(EIfcpropertysettemplate type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #5148=EXPLICIT_ATTRIBUTE('ApplicableEntity',#5145,1,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  ApplicableEntity
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ApplicableEntity, base type: STRING
	public boolean testApplicableentity(EIfcpropertysettemplate type) throws SdaiException {
		return test_string(a5);
	}
	public String getApplicableentity(EIfcpropertysettemplate type) throws SdaiException {
		return get_string(a5);
	}
	public void setApplicableentity(EIfcpropertysettemplate type, String value) throws SdaiException {
		a5 = set_string(value);
	}
	public void unsetApplicableentity(EIfcpropertysettemplate type) throws SdaiException {
		a5 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeApplicableentity(EIfcpropertysettemplate type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #5149=EXPLICIT_ATTRIBUTE('HasPropertyTemplates',#5145,2,#7049,$,.F.);
	//<01> generating methods for consolidated attribute:  HasPropertyTemplates
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: HasPropertyTemplates, base type: SET OF ENTITY
	public static int usedinHaspropertytemplates(EIfcpropertysettemplate type, EIfcpropertytemplate instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	public boolean testHaspropertytemplates(EIfcpropertysettemplate type) throws SdaiException {
		return test_aggregate(a6);
	}
	public AIfcpropertytemplate getHaspropertytemplates(EIfcpropertysettemplate type) throws SdaiException {
		return (AIfcpropertytemplate)get_aggregate(a6);
	}
	public AIfcpropertytemplate createHaspropertytemplates(EIfcpropertysettemplate type) throws SdaiException {
		a6 = (AIfcpropertytemplate)create_aggregate_class(a6, a6$,  AIfcpropertytemplate.class, 0);
		return a6;
	}
	public void unsetHaspropertytemplates(EIfcpropertysettemplate type) throws SdaiException {
		unset_aggregate(a6);
		a6 = null;
	}
	public static jsdai.dictionary.EAttribute attributeHaspropertytemplates(EIfcpropertysettemplate type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #5150=INVERSE_ATTRIBUTE('Defines',#5145,0,#5466,$,#5469,#8960,$,.F.);
	//<01> generating methods for consolidated attribute:  Defines
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - Defines : SET[0:-2147483648] OF IfcRelDefinesByTemplate FOR RelatingTemplate
	public AIfcreldefinesbytemplate getDefines(EIfcpropertysettemplate type, ASdaiModel domain) throws SdaiException {
		AIfcreldefinesbytemplate result = (AIfcreldefinesbytemplate)get_inverse_aggregate(i2$);
		CIfcreldefinesbytemplate.usedinRelatingtemplate(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeDefines(EIfcpropertysettemplate type) throws SdaiException {
		return i2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = 0;
			a5 = null;
			if (a6 instanceof CAggregate)
				a6.unsetAll();
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[1].getEnumeration(0, a4$);
		a5 = av.entityValues[1].getString(1);
		a6 = (AIfcpropertytemplate)av.entityValues[1].getInstanceAggregate(2, a6$, this);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = 0;
			a5 = null;
			if (a6 instanceof CAggregate)
				a6.unsetAll();
			a6 = null;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[1].getEnumeration(0, a4$);
		a5 = av.entityValues[1].getString(1);
		a6 = (AIfcpropertytemplate)av.entityValues[1].getInstanceAggregate(2, a6$, this);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyDefinition
		// partial entity: IfcPropertySetTemplate
		av.entityValues[1].setEnumeration(0, a4, a4$);
		av.entityValues[1].setString(1, a5);
		av.entityValues[1].setInstanceAggregate(2, a6);
		// partial entity: IfcPropertyTemplateDefinition
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyDefinition
		// partial entity: IfcPropertySetTemplate
		av.entityValues[1].setEnumeration(0, a4, a4$);
		av.entityValues[1].setString(1, a5);
		av.entityValues[1].setInstanceAggregate(2, a6);
		// partial entity: IfcPropertyTemplateDefinition
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertysettemplateUniquepropertynames(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfcuniquepropertytemplatenames()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a6$)))).getLogical());
	}
	public int rIfcpropertysettemplateExistsname(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfcpropertysettemplate.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcroot.class).getAttribute(jsdai.SIfc4.CIfcroot.attributeName(null), _context))).getLogical());
	}
}
