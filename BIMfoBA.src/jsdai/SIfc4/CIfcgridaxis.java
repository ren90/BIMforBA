/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcGridAxis

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcgridaxis extends CEntity implements EIfcgridaxis {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcgridaxis.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // AxisTag - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // AxisCurve - current entity - ENTITY IfcCurve
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a2; // SameSense - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// PartOfW: protected Object  - inverse - current -  ENTITY IfcGrid
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// PartOfV: protected Object  - inverse - current -  ENTITY IfcGrid
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PartOfU: protected Object  - inverse - current -  ENTITY IfcGrid
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// HasIntersections: protected Object  - inverse - current -  ENTITY IfcVirtualGridIntersection
	protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// AxisTag - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// AxisCurve - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// SameSense - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2;
	// PartOfW - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// PartOfV - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PartOfU - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// HasIntersections - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4436=EXPLICIT_ATTRIBUTE('AxisTag',#4434,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  AxisTag
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: AxisTag, base type: STRING
	public boolean testAxistag(EIfcgridaxis type) throws SdaiException {
		return test_string(a0);
	}
	public String getAxistag(EIfcgridaxis type) throws SdaiException {
		return get_string(a0);
	}
	public void setAxistag(EIfcgridaxis type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetAxistag(EIfcgridaxis type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeAxistag(EIfcgridaxis type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4437=EXPLICIT_ATTRIBUTE('AxisCurve',#4434,1,#3883,$,.F.);
	//<01> generating methods for consolidated attribute:  AxisCurve
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : AxisCurve, base type: entity IfcCurve
	public static int usedinAxiscurve(EIfcgridaxis type, EIfccurve instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testAxiscurve(EIfcgridaxis type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfccurve getAxiscurve(EIfcgridaxis type) throws SdaiException {
		return (EIfccurve)get_instance(a1);
	}
	public void setAxiscurve(EIfcgridaxis type, EIfccurve value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetAxiscurve(EIfcgridaxis type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeAxiscurve(EIfcgridaxis type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4438=EXPLICIT_ATTRIBUTE('SameSense',#4434,2,#2459,$,.F.);
	//<01> generating methods for consolidated attribute:  SameSense
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: SameSense, base type: BOOLEAN
	public boolean testSamesense(EIfcgridaxis type) throws SdaiException {
		return test_boolean(a2);
	}
	public boolean getSamesense(EIfcgridaxis type) throws SdaiException {
		return get_boolean(a2);
	}
	public void setSamesense(EIfcgridaxis type, boolean value) throws SdaiException {
		a2 = set_boolean(value);
	}
	public void unsetSamesense(EIfcgridaxis type) throws SdaiException {
		a2 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeSamesense(EIfcgridaxis type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4439=INVERSE_ATTRIBUTE('PartOfW',#4434,0,#4427,$,#4431,#8486,#8487,.F.);
	//<01> generating methods for consolidated attribute:  PartOfW
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	public AIfcgrid getPartofw(EIfcgridaxis type, ASdaiModel domain) throws SdaiException {
		AIfcgrid result = (AIfcgrid)get_inverse_aggregate(i0$);
		CIfcgrid.usedinWaxes(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributePartofw(EIfcgridaxis type) throws SdaiException {
		return i0$;
	}

	//going through all the attributes: #4440=INVERSE_ATTRIBUTE('PartOfV',#4434,1,#4427,$,#4430,#8489,#8490,.F.);
	//<01> generating methods for consolidated attribute:  PartOfV
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	public AIfcgrid getPartofv(EIfcgridaxis type, ASdaiModel domain) throws SdaiException {
		AIfcgrid result = (AIfcgrid)get_inverse_aggregate(i1$);
		CIfcgrid.usedinVaxes(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributePartofv(EIfcgridaxis type) throws SdaiException {
		return i1$;
	}

	//going through all the attributes: #4441=INVERSE_ATTRIBUTE('PartOfU',#4434,2,#4427,$,#4429,#8492,#8493,.F.);
	//<01> generating methods for consolidated attribute:  PartOfU
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	public AIfcgrid getPartofu(EIfcgridaxis type, ASdaiModel domain) throws SdaiException {
		AIfcgrid result = (AIfcgrid)get_inverse_aggregate(i2$);
		CIfcgrid.usedinUaxes(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributePartofu(EIfcgridaxis type) throws SdaiException {
		return i2$;
	}

	//going through all the attributes: #4442=INVERSE_ATTRIBUTE('HasIntersections',#4434,3,#6343,$,#6345,#8495,$,.F.);
	//<01> generating methods for consolidated attribute:  HasIntersections
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - HasIntersections : SET[0:-2147483648] OF IfcVirtualGridIntersection FOR IntersectingAxes
	public AIfcvirtualgridintersection getHasintersections(EIfcgridaxis type, ASdaiModel domain) throws SdaiException {
		AIfcvirtualgridintersection result = (AIfcvirtualgridintersection)get_inverse_aggregate(i3$);
		CIfcvirtualgridintersection.usedinIntersectingaxes(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeHasintersections(EIfcgridaxis type) throws SdaiException {
		return i3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[0].getBoolean(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[0].getBoolean(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGridAxis
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setBoolean(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGridAxis
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setBoolean(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcgridaxisWr1(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfccurve.definition).set(_context, get(a1$)).getAttribute(jsdai.SIfc4.CIfccurve.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).getLogical());
	}
	public int rIfcgridaxisWr2(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).XOR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).XOR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(i2$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(i1$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(i0$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)))).getLogical());
	}
}
