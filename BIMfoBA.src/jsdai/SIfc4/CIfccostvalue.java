/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcCostValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccostvalue extends CIfcappliedvalue implements EIfccostvalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccostvalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// AppliedValue: protected Object a2;   AppliedValue - java inheritance - SELECT IfcAppliedValueSelect
	// protected int a2$$; // current SELECT path indicator
	// UnitBasis: protected Object a3;   UnitBasis - java inheritance - ENTITY IfcMeasureWithUnit
	// ApplicableDate: protected String a4;   ApplicableDate - java inheritance - STRING
	// FixedUntilDate: protected String a5;   FixedUntilDate - java inheritance - STRING
	// Category: protected String a6;   Category - java inheritance - STRING
	// Condition: protected String a7;   Condition - java inheritance - STRING
	// ArithmeticOperator: protected int a8;   ArithmeticOperator - java inheritance - ENUMERATION IfcArithmeticOperatorEnum
	// Components: protected AIfcappliedvalue a9;   Components - java inheritance - LIST OF ENTITY
	// HasExternalReference: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// AppliedValue - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected Object a2;
	// protected int a2$$;
	// UnitBasis - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected Object a3;
	// ApplicableDate - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected String a4;
	// FixedUntilDate - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected String a5;
	// Category - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected String a6;
	// Condition - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	// protected String a7;
	// ArithmeticOperator - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	// protected int a8;
	// Components - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	// protected AIfcappliedvalue a9;
	// HasExternalReference - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3303=EXPLICIT_ATTRIBUTE('Name',#3301,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3304=EXPLICIT_ATTRIBUTE('Description',#3301,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3305=EXPLICIT_ATTRIBUTE('AppliedValue',#3301,2,#3113,$,.T.);
	//<01> generating methods for consolidated attribute:  AppliedValue
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// -1- methods for SELECT attribute: AppliedValue
	public static int usedinAppliedvalue(EIfcappliedvalue type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	//going through all the attributes: #3306=EXPLICIT_ATTRIBUTE('UnitBasis',#3301,3,#4732,$,.T.);
	//<01> generating methods for consolidated attribute:  UnitBasis
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): UnitBasis, base type: entity IfcMeasureWithUnit
	public static int usedinUnitbasis(EIfcappliedvalue type, EIfcmeasurewithunit instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	//going through all the attributes: #3307=EXPLICIT_ATTRIBUTE('ApplicableDate',#3301,4,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  ApplicableDate
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3308=EXPLICIT_ATTRIBUTE('FixedUntilDate',#3301,5,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  FixedUntilDate
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3309=EXPLICIT_ATTRIBUTE('Category',#3301,6,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Category
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3310=EXPLICIT_ATTRIBUTE('Condition',#3301,7,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Condition
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3311=EXPLICIT_ATTRIBUTE('ArithmeticOperator',#3301,8,#2721,$,.T.);
	//<01> generating methods for consolidated attribute:  ArithmeticOperator
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3312=EXPLICIT_ATTRIBUTE('Components',#3301,9,#6816,$,.T.);
	//<01> generating methods for consolidated attribute:  Components
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Components, base type: LIST OF ENTITY
	public static int usedinComponents(EIfcappliedvalue type, EIfcappliedvalue instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	//going through all the attributes: #3313=INVERSE_ATTRIBUTE('HasExternalReference',#3301,0,#4231,$,#4234,#7588,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReference
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()

	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = 0;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getMixed(2,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getString(4);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[0].getString(7);
		a8 = av.entityValues[0].getEnumeration(8, a8$);
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(9, a9$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = 0;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getMixed(2,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getString(4);
		a5 = av.entityValues[0].getString(5);
		a6 = av.entityValues[0].getString(6);
		a7 = av.entityValues[0].getString(7);
		a8 = av.entityValues[0].getEnumeration(8, a8$);
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(9, a9$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAppliedValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setMixed(2, a2, a2$, a2$$);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setString(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		av.entityValues[0].setString(7, a7);
		av.entityValues[0].setEnumeration(8, a8, a8$);
		av.entityValues[0].setInstanceAggregate(9, a9);
		// partial entity: IfcCostValue
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAppliedValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setMixed(2, a2, a2$, a2$$);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setString(4, a4);
		av.entityValues[0].setString(5, a5);
		av.entityValues[0].setString(6, a6);
		av.entityValues[0].setString(7, a7);
		av.entityValues[0].setEnumeration(8, a8, a8$);
		av.entityValues[0].setInstanceAggregate(9, a9);
		// partial entity: IfcCostValue
	}
}
