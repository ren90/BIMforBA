/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing aggregate of  IfcValue of level 1

package jsdai.SIfc4;
import jsdai.lang.*;


public class AIfcvalue extends CAggregate {
	public static final int sIfcabsorbeddosemeasure = 2;
	public static final int sIfcaccelerationmeasure = 3;
	public static final int sIfcangularvelocitymeasure = 4;
	public static final int sIfcareadensitymeasure = 5;
	public static final int sIfccompoundplaneanglemeasure = 6;
	public static final int sIfccurvaturemeasure = 7;
	public static final int sIfcdoseequivalentmeasure = 8;
	public static final int sIfcdynamicviscositymeasure = 9;
	public static final int sIfcelectriccapacitancemeasure = 10;
	public static final int sIfcelectricchargemeasure = 11;
	public static final int sIfcelectricconductancemeasure = 12;
	public static final int sIfcelectricresistancemeasure = 13;
	public static final int sIfcelectricvoltagemeasure = 14;
	public static final int sIfcenergymeasure = 15;
	public static final int sIfcforcemeasure = 16;
	public static final int sIfcfrequencymeasure = 17;
	public static final int sIfcheatfluxdensitymeasure = 18;
	public static final int sIfcheatingvaluemeasure = 19;
	public static final int sIfcilluminancemeasure = 20;
	public static final int sIfcinductancemeasure = 21;
	public static final int sIfcintegercountratemeasure = 22;
	public static final int sIfcionconcentrationmeasure = 23;
	public static final int sIfcisothermalmoisturecapacitymeasure = 24;
	public static final int sIfckinematicviscositymeasure = 25;
	public static final int sIfclinearforcemeasure = 26;
	public static final int sIfclinearmomentmeasure = 27;
	public static final int sIfclinearstiffnessmeasure = 28;
	public static final int sIfclinearvelocitymeasure = 29;
	public static final int sIfcluminousfluxmeasure = 30;
	public static final int sIfcluminousintensitydistributionmeasure = 31;
	public static final int sIfcmagneticfluxdensitymeasure = 32;
	public static final int sIfcmagneticfluxmeasure = 33;
	public static final int sIfcmassdensitymeasure = 34;
	public static final int sIfcmassflowratemeasure = 35;
	public static final int sIfcmassperlengthmeasure = 36;
	public static final int sIfcmodulusofelasticitymeasure = 37;
	public static final int sIfcmodulusoflinearsubgradereactionmeasure = 38;
	public static final int sIfcmodulusofrotationalsubgradereactionmeasure = 39;
	public static final int sIfcmodulusofsubgradereactionmeasure = 40;
	public static final int sIfcmoisturediffusivitymeasure = 41;
	public static final int sIfcmolecularweightmeasure = 42;
	public static final int sIfcmomentofinertiameasure = 43;
	public static final int sIfcmonetarymeasure = 44;
	public static final int sIfcphmeasure = 45;
	public static final int sIfcplanarforcemeasure = 46;
	public static final int sIfcpowermeasure = 47;
	public static final int sIfcpressuremeasure = 48;
	public static final int sIfcradioactivitymeasure = 49;
	public static final int sIfcrotationalfrequencymeasure = 50;
	public static final int sIfcrotationalmassmeasure = 51;
	public static final int sIfcrotationalstiffnessmeasure = 52;
	public static final int sIfcsectionmodulusmeasure = 53;
	public static final int sIfcsectionalareaintegralmeasure = 54;
	public static final int sIfcshearmodulusmeasure = 55;
	public static final int sIfcsoundpowerlevelmeasure = 56;
	public static final int sIfcsoundpowermeasure = 57;
	public static final int sIfcsoundpressurelevelmeasure = 58;
	public static final int sIfcsoundpressuremeasure = 59;
	public static final int sIfcspecificheatcapacitymeasure = 60;
	public static final int sIfctemperaturegradientmeasure = 61;
	public static final int sIfctemperaturerateofchangemeasure = 62;
	public static final int sIfcthermaladmittancemeasure = 63;
	public static final int sIfcthermalconductivitymeasure = 64;
	public static final int sIfcthermalexpansioncoefficientmeasure = 65;
	public static final int sIfcthermalresistancemeasure = 66;
	public static final int sIfcthermaltransmittancemeasure = 67;
	public static final int sIfctorquemeasure = 68;
	public static final int sIfcvaporpermeabilitymeasure = 69;
	public static final int sIfcvolumetricflowratemeasure = 70;
	public static final int sIfcwarpingconstantmeasure = 71;
	public static final int sIfcwarpingmomentmeasure = 72;
	public static final int sIfcamountofsubstancemeasure = 73;
	public static final int sIfcareameasure = 74;
	public static final int sIfccomplexnumber = 75;
	public static final int sIfccontextdependentmeasure = 76;
	public static final int sIfccountmeasure = 77;
	public static final int sIfcdescriptivemeasure = 78;
	public static final int sIfcelectriccurrentmeasure = 79;
	public static final int sIfclengthmeasure = 80;
	public static final int sIfcluminousintensitymeasure = 81;
	public static final int sIfcmassmeasure = 82;
	public static final int sIfcnonnegativelengthmeasure = 83;
	public static final int sIfcnormalisedratiomeasure = 84;
	public static final int sIfcnumericmeasure = 85;
	public static final int sIfcparametervalue = 86;
	public static final int sIfcplaneanglemeasure = 87;
	public static final int sIfcpositivelengthmeasure = 88;
	public static final int sIfcpositiveplaneanglemeasure = 89;
	public static final int sIfcpositiveratiomeasure = 90;
	public static final int sIfcratiomeasure = 91;
	public static final int sIfcsolidanglemeasure = 92;
	public static final int sIfcthermodynamictemperaturemeasure = 93;
	public static final int sIfctimemeasure = 94;
	public static final int sIfcvolumemeasure = 95;
	public static final int sIfcboolean = 96;
	public static final int sIfcdate = 97;
	public static final int sIfcdatetime = 98;
	public static final int sIfcduration = 99;
	public static final int sIfcidentifier = 100;
	public static final int sIfcinteger = 101;
	public static final int sIfclabel = 102;
	public static final int sIfclogical = 103;
	public static final int sIfcreal = 104;
	public static final int sIfctext = 105;
	public static final int sIfctime = 106;
	public static final int sIfctimestamp = 107;

	public int testByIndex(int index) throws SdaiException {
		return pTestByIndex(index);
	}

	public int testCurrentMember(SdaiIterator iter) throws SdaiException {
		return pTestCurrentMember(iter);
	}

	public boolean isMember(double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return pIsMember(value, 2);
	}
	public boolean isMember(double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return pIsMember(value, 3);
	}
	public boolean isMember(double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return pIsMember(value, 4);
	}
	public boolean isMember(double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return pIsMember(value, 5);
	}
	public boolean isMember(A_integer value, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return pIsMember(value, 6);
	}
	public boolean isMember(double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return pIsMember(value, 7);
	}
	public boolean isMember(double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return pIsMember(value, 8);
	}
	public boolean isMember(double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return pIsMember(value, 9);
	}
	public boolean isMember(double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return pIsMember(value, 10);
	}
	public boolean isMember(double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return pIsMember(value, 11);
	}
	public boolean isMember(double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return pIsMember(value, 12);
	}
	public boolean isMember(double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return pIsMember(value, 13);
	}
	public boolean isMember(double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return pIsMember(value, 14);
	}
	public boolean isMember(double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		return pIsMember(value, 15);
	}
	public boolean isMember(double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		return pIsMember(value, 16);
	}
	public boolean isMember(double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return pIsMember(value, 17);
	}
	public boolean isMember(double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return pIsMember(value, 18);
	}
	public boolean isMember(double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return pIsMember(value, 19);
	}
	public boolean isMember(double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return pIsMember(value, 20);
	}
	public boolean isMember(double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return pIsMember(value, 21);
	}
	public boolean isMember(int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return pIsMember(value, 22);
	}
	public boolean isMember(double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return pIsMember(value, 23);
	}
	public boolean isMember(double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return pIsMember(value, 24);
	}
	public boolean isMember(double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return pIsMember(value, 25);
	}
	public boolean isMember(double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return pIsMember(value, 26);
	}
	public boolean isMember(double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return pIsMember(value, 27);
	}
	public boolean isMember(double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return pIsMember(value, 28);
	}
	public boolean isMember(double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return pIsMember(value, 29);
	}
	public boolean isMember(double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return pIsMember(value, 30);
	}
	public boolean isMember(double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return pIsMember(value, 31);
	}
	public boolean isMember(double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return pIsMember(value, 32);
	}
	public boolean isMember(double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return pIsMember(value, 33);
	}
	public boolean isMember(double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return pIsMember(value, 34);
	}
	public boolean isMember(double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return pIsMember(value, 35);
	}
	public boolean isMember(double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return pIsMember(value, 36);
	}
	public boolean isMember(double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return pIsMember(value, 37);
	}
	public boolean isMember(double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return pIsMember(value, 38);
	}
	public boolean isMember(double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return pIsMember(value, 39);
	}
	public boolean isMember(double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return pIsMember(value, 40);
	}
	public boolean isMember(double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return pIsMember(value, 41);
	}
	public boolean isMember(double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return pIsMember(value, 42);
	}
	public boolean isMember(double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return pIsMember(value, 43);
	}
	public boolean isMember(double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return pIsMember(value, 44);
	}
	public boolean isMember(double value, EIfcphmeasure node1) throws SdaiException { // case 45
		return pIsMember(value, 45);
	}
	public boolean isMember(double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return pIsMember(value, 46);
	}
	public boolean isMember(double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		return pIsMember(value, 47);
	}
	public boolean isMember(double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return pIsMember(value, 48);
	}
	public boolean isMember(double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return pIsMember(value, 49);
	}
	public boolean isMember(double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return pIsMember(value, 50);
	}
	public boolean isMember(double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return pIsMember(value, 51);
	}
	public boolean isMember(double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return pIsMember(value, 52);
	}
	public boolean isMember(double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return pIsMember(value, 53);
	}
	public boolean isMember(double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return pIsMember(value, 54);
	}
	public boolean isMember(double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return pIsMember(value, 55);
	}
	public boolean isMember(double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return pIsMember(value, 56);
	}
	public boolean isMember(double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return pIsMember(value, 57);
	}
	public boolean isMember(double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return pIsMember(value, 58);
	}
	public boolean isMember(double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return pIsMember(value, 59);
	}
	public boolean isMember(double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return pIsMember(value, 60);
	}
	public boolean isMember(double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return pIsMember(value, 61);
	}
	public boolean isMember(double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return pIsMember(value, 62);
	}
	public boolean isMember(double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return pIsMember(value, 63);
	}
	public boolean isMember(double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return pIsMember(value, 64);
	}
	public boolean isMember(double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return pIsMember(value, 65);
	}
	public boolean isMember(double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return pIsMember(value, 66);
	}
	public boolean isMember(double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return pIsMember(value, 67);
	}
	public boolean isMember(double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		return pIsMember(value, 68);
	}
	public boolean isMember(double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return pIsMember(value, 69);
	}
	public boolean isMember(double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return pIsMember(value, 70);
	}
	public boolean isMember(double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return pIsMember(value, 71);
	}
	public boolean isMember(double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return pIsMember(value, 72);
	}
	public boolean isMember(double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return pIsMember(value, 73);
	}
	public boolean isMember(double value, EIfcareameasure node1) throws SdaiException { // case 74
		return pIsMember(value, 74);
	}
	public boolean isMember(A_double value, EIfccomplexnumber node1) throws SdaiException { // case 75
		return pIsMember(value, 75);
	}
	public boolean isMember(double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return pIsMember(value, 76);
	}
	public boolean isMember(double value, EIfccountmeasure node1) throws SdaiException { // case 77
		return pIsMember(value, 77);
	}
	public boolean isMember(String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return pIsMember(value, 78);
	}
	public boolean isMember(double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return pIsMember(value, 79);
	}
	public boolean isMember(double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		return pIsMember(value, 80);
	}
	public boolean isMember(double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return pIsMember(value, 81);
	}
	public boolean isMember(double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		return pIsMember(value, 82);
	}
	public boolean isMember(double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return pIsMember(value, 83);
	}
	public boolean isMember(double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return pIsMember(value, 84);
	}
	public boolean isMember(double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return pIsMember(value, 85);
	}
	public boolean isMember(double value, EIfcparametervalue node1) throws SdaiException { // case 86
		return pIsMember(value, 86);
	}
	public boolean isMember(double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return pIsMember(value, 87);
	}
	public boolean isMember(double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return pIsMember(value, 88);
	}
	public boolean isMember(double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return pIsMember(value, 89);
	}
	public boolean isMember(double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return pIsMember(value, 90);
	}
	public boolean isMember(double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		return pIsMember(value, 91);
	}
	public boolean isMember(double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return pIsMember(value, 92);
	}
	public boolean isMember(double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return pIsMember(value, 93);
	}
	public boolean isMember(double value, EIfctimemeasure node1) throws SdaiException { // case 94
		return pIsMember(value, 94);
	}
	public boolean isMember(double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return pIsMember(value, 95);
	}
	public boolean isMember(boolean value, EIfcboolean node1) throws SdaiException { // case 96
		return pIsMember(value, 96);
	}
	public boolean isMember(String value, EIfcdate node1) throws SdaiException { // case 97
		return pIsMember(value, 97);
	}
	public boolean isMember(String value, EIfcdatetime node1) throws SdaiException { // case 98
		return pIsMember(value, 98);
	}
	public boolean isMember(String value, EIfcduration node1) throws SdaiException { // case 99
		return pIsMember(value, 99);
	}
	public boolean isMember(String value, EIfcidentifier node1) throws SdaiException { // case 100
		return pIsMember(value, 100);
	}
	public boolean isMember(int value, EIfcinteger node1) throws SdaiException { // case 101
		return pIsMember(value, 101);
	}
	public boolean isMember(String value, EIfclabel node1) throws SdaiException { // case 102
		return pIsMember(value, 102);
	}
	public boolean isMember(int value, EIfclogical node1) throws SdaiException { // case 103
		return pIsMember(value, 103);
	}
	public boolean isMember(double value, EIfcreal node1) throws SdaiException { // case 104
		return pIsMember(value, 104);
	}
	public boolean isMember(String value, EIfctext node1) throws SdaiException { // case 105
		return pIsMember(value, 105);
	}
	public boolean isMember(String value, EIfctime node1) throws SdaiException { // case 106
		return pIsMember(value, 106);
	}
	public boolean isMember(int value, EIfctimestamp node1) throws SdaiException { // case 107
		return pIsMember(value, 107);
	}
	public double getByIndex(int index, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return pGetByIndexDouble(index, 2);
	}
	public double getByIndex(int index, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return pGetByIndexDouble(index, 3);
	}
	public double getByIndex(int index, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return pGetByIndexDouble(index, 4);
	}
	public double getByIndex(int index, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return pGetByIndexDouble(index, 5);
	}
	public A_integer getByIndex(int index, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pGetByIndexObject(index, 6);
	}
	public double getByIndex(int index, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return pGetByIndexDouble(index, 7);
	}
	public double getByIndex(int index, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return pGetByIndexDouble(index, 8);
	}
	public double getByIndex(int index, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return pGetByIndexDouble(index, 9);
	}
	public double getByIndex(int index, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return pGetByIndexDouble(index, 10);
	}
	public double getByIndex(int index, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return pGetByIndexDouble(index, 11);
	}
	public double getByIndex(int index, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return pGetByIndexDouble(index, 12);
	}
	public double getByIndex(int index, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return pGetByIndexDouble(index, 13);
	}
	public double getByIndex(int index, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return pGetByIndexDouble(index, 14);
	}
	public double getByIndex(int index, EIfcenergymeasure node1) throws SdaiException { // case 15
		return pGetByIndexDouble(index, 15);
	}
	public double getByIndex(int index, EIfcforcemeasure node1) throws SdaiException { // case 16
		return pGetByIndexDouble(index, 16);
	}
	public double getByIndex(int index, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return pGetByIndexDouble(index, 17);
	}
	public double getByIndex(int index, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return pGetByIndexDouble(index, 18);
	}
	public double getByIndex(int index, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return pGetByIndexDouble(index, 19);
	}
	public double getByIndex(int index, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return pGetByIndexDouble(index, 20);
	}
	public double getByIndex(int index, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return pGetByIndexDouble(index, 21);
	}
	public int getByIndex(int index, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return pGetByIndexInt(index, 22);
	}
	public double getByIndex(int index, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return pGetByIndexDouble(index, 23);
	}
	public double getByIndex(int index, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return pGetByIndexDouble(index, 24);
	}
	public double getByIndex(int index, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return pGetByIndexDouble(index, 25);
	}
	public double getByIndex(int index, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return pGetByIndexDouble(index, 26);
	}
	public double getByIndex(int index, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return pGetByIndexDouble(index, 27);
	}
	public double getByIndex(int index, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return pGetByIndexDouble(index, 28);
	}
	public double getByIndex(int index, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return pGetByIndexDouble(index, 29);
	}
	public double getByIndex(int index, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return pGetByIndexDouble(index, 30);
	}
	public double getByIndex(int index, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return pGetByIndexDouble(index, 31);
	}
	public double getByIndex(int index, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return pGetByIndexDouble(index, 32);
	}
	public double getByIndex(int index, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return pGetByIndexDouble(index, 33);
	}
	public double getByIndex(int index, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return pGetByIndexDouble(index, 34);
	}
	public double getByIndex(int index, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return pGetByIndexDouble(index, 35);
	}
	public double getByIndex(int index, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return pGetByIndexDouble(index, 36);
	}
	public double getByIndex(int index, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return pGetByIndexDouble(index, 37);
	}
	public double getByIndex(int index, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return pGetByIndexDouble(index, 38);
	}
	public double getByIndex(int index, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return pGetByIndexDouble(index, 39);
	}
	public double getByIndex(int index, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return pGetByIndexDouble(index, 40);
	}
	public double getByIndex(int index, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return pGetByIndexDouble(index, 41);
	}
	public double getByIndex(int index, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return pGetByIndexDouble(index, 42);
	}
	public double getByIndex(int index, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return pGetByIndexDouble(index, 43);
	}
	public double getByIndex(int index, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return pGetByIndexDouble(index, 44);
	}
	public double getByIndex(int index, EIfcphmeasure node1) throws SdaiException { // case 45
		return pGetByIndexDouble(index, 45);
	}
	public double getByIndex(int index, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return pGetByIndexDouble(index, 46);
	}
	public double getByIndex(int index, EIfcpowermeasure node1) throws SdaiException { // case 47
		return pGetByIndexDouble(index, 47);
	}
	public double getByIndex(int index, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return pGetByIndexDouble(index, 48);
	}
	public double getByIndex(int index, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return pGetByIndexDouble(index, 49);
	}
	public double getByIndex(int index, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return pGetByIndexDouble(index, 50);
	}
	public double getByIndex(int index, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return pGetByIndexDouble(index, 51);
	}
	public double getByIndex(int index, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return pGetByIndexDouble(index, 52);
	}
	public double getByIndex(int index, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return pGetByIndexDouble(index, 53);
	}
	public double getByIndex(int index, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return pGetByIndexDouble(index, 54);
	}
	public double getByIndex(int index, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return pGetByIndexDouble(index, 55);
	}
	public double getByIndex(int index, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return pGetByIndexDouble(index, 56);
	}
	public double getByIndex(int index, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return pGetByIndexDouble(index, 57);
	}
	public double getByIndex(int index, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return pGetByIndexDouble(index, 58);
	}
	public double getByIndex(int index, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return pGetByIndexDouble(index, 59);
	}
	public double getByIndex(int index, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return pGetByIndexDouble(index, 60);
	}
	public double getByIndex(int index, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return pGetByIndexDouble(index, 61);
	}
	public double getByIndex(int index, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return pGetByIndexDouble(index, 62);
	}
	public double getByIndex(int index, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return pGetByIndexDouble(index, 63);
	}
	public double getByIndex(int index, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return pGetByIndexDouble(index, 64);
	}
	public double getByIndex(int index, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return pGetByIndexDouble(index, 65);
	}
	public double getByIndex(int index, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return pGetByIndexDouble(index, 66);
	}
	public double getByIndex(int index, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return pGetByIndexDouble(index, 67);
	}
	public double getByIndex(int index, EIfctorquemeasure node1) throws SdaiException { // case 68
		return pGetByIndexDouble(index, 68);
	}
	public double getByIndex(int index, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return pGetByIndexDouble(index, 69);
	}
	public double getByIndex(int index, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return pGetByIndexDouble(index, 70);
	}
	public double getByIndex(int index, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return pGetByIndexDouble(index, 71);
	}
	public double getByIndex(int index, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return pGetByIndexDouble(index, 72);
	}
	public double getByIndex(int index, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return pGetByIndexDouble(index, 73);
	}
	public double getByIndex(int index, EIfcareameasure node1) throws SdaiException { // case 74
		return pGetByIndexDouble(index, 74);
	}
	public A_double getByIndex(int index, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pGetByIndexObject(index, 75);
	}
	public double getByIndex(int index, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return pGetByIndexDouble(index, 76);
	}
	public double getByIndex(int index, EIfccountmeasure node1) throws SdaiException { // case 77
		return pGetByIndexDouble(index, 77);
	}
	public String getByIndex(int index, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return (String)pGetByIndexObject(index, 78);
	}
	public double getByIndex(int index, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return pGetByIndexDouble(index, 79);
	}
	public double getByIndex(int index, EIfclengthmeasure node1) throws SdaiException { // case 80
		return pGetByIndexDouble(index, 80);
	}
	public double getByIndex(int index, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return pGetByIndexDouble(index, 81);
	}
	public double getByIndex(int index, EIfcmassmeasure node1) throws SdaiException { // case 82
		return pGetByIndexDouble(index, 82);
	}
	public double getByIndex(int index, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return pGetByIndexDouble(index, 83);
	}
	public double getByIndex(int index, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return pGetByIndexDouble(index, 84);
	}
	public double getByIndex(int index, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return pGetByIndexDouble(index, 85);
	}
	public double getByIndex(int index, EIfcparametervalue node1) throws SdaiException { // case 86
		return pGetByIndexDouble(index, 86);
	}
	public double getByIndex(int index, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return pGetByIndexDouble(index, 87);
	}
	public double getByIndex(int index, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return pGetByIndexDouble(index, 88);
	}
	public double getByIndex(int index, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return pGetByIndexDouble(index, 89);
	}
	public double getByIndex(int index, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return pGetByIndexDouble(index, 90);
	}
	public double getByIndex(int index, EIfcratiomeasure node1) throws SdaiException { // case 91
		return pGetByIndexDouble(index, 91);
	}
	public double getByIndex(int index, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return pGetByIndexDouble(index, 92);
	}
	public double getByIndex(int index, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return pGetByIndexDouble(index, 93);
	}
	public double getByIndex(int index, EIfctimemeasure node1) throws SdaiException { // case 94
		return pGetByIndexDouble(index, 94);
	}
	public double getByIndex(int index, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return pGetByIndexDouble(index, 95);
	}
	public boolean getByIndex(int index, EIfcboolean node1) throws SdaiException { // case 96
		return pGetByIndexBoolean(index, 96);
	}
	public String getByIndex(int index, EIfcdate node1) throws SdaiException { // case 97
		return (String)pGetByIndexObject(index, 97);
	}
	public String getByIndex(int index, EIfcdatetime node1) throws SdaiException { // case 98
		return (String)pGetByIndexObject(index, 98);
	}
	public String getByIndex(int index, EIfcduration node1) throws SdaiException { // case 99
		return (String)pGetByIndexObject(index, 99);
	}
	public String getByIndex(int index, EIfcidentifier node1) throws SdaiException { // case 100
		return (String)pGetByIndexObject(index, 100);
	}
	public int getByIndex(int index, EIfcinteger node1) throws SdaiException { // case 101
		return pGetByIndexInt(index, 101);
	}
	public String getByIndex(int index, EIfclabel node1) throws SdaiException { // case 102
		return (String)pGetByIndexObject(index, 102);
	}
	public int getByIndex(int index, EIfclogical node1) throws SdaiException { // case 103
		return pGetByIndexInt(index, 103);
	}
	public double getByIndex(int index, EIfcreal node1) throws SdaiException { // case 104
		return pGetByIndexDouble(index, 104);
	}
	public String getByIndex(int index, EIfctext node1) throws SdaiException { // case 105
		return (String)pGetByIndexObject(index, 105);
	}
	public String getByIndex(int index, EIfctime node1) throws SdaiException { // case 106
		return (String)pGetByIndexObject(index, 106);
	}
	public int getByIndex(int index, EIfctimestamp node1) throws SdaiException { // case 107
		return pGetByIndexInt(index, 107);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return pGetCurrentMemberDouble(iter, 2);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return pGetCurrentMemberDouble(iter, 3);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return pGetCurrentMemberDouble(iter, 4);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return pGetCurrentMemberDouble(iter, 5);
	}
	public A_integer getCurrentMember(SdaiIterator iter, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pGetCurrentMemberObject(iter, 6);
	}
	public double getCurrentMember(SdaiIterator iter, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return pGetCurrentMemberDouble(iter, 7);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return pGetCurrentMemberDouble(iter, 8);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return pGetCurrentMemberDouble(iter, 9);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return pGetCurrentMemberDouble(iter, 10);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return pGetCurrentMemberDouble(iter, 11);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return pGetCurrentMemberDouble(iter, 12);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return pGetCurrentMemberDouble(iter, 13);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return pGetCurrentMemberDouble(iter, 14);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcenergymeasure node1) throws SdaiException { // case 15
		return pGetCurrentMemberDouble(iter, 15);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcforcemeasure node1) throws SdaiException { // case 16
		return pGetCurrentMemberDouble(iter, 16);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return pGetCurrentMemberDouble(iter, 17);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return pGetCurrentMemberDouble(iter, 18);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return pGetCurrentMemberDouble(iter, 19);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return pGetCurrentMemberDouble(iter, 20);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return pGetCurrentMemberDouble(iter, 21);
	}
	public int getCurrentMember(SdaiIterator iter, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return pGetCurrentMemberInt(iter, 22);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return pGetCurrentMemberDouble(iter, 23);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return pGetCurrentMemberDouble(iter, 24);
	}
	public double getCurrentMember(SdaiIterator iter, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return pGetCurrentMemberDouble(iter, 25);
	}
	public double getCurrentMember(SdaiIterator iter, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return pGetCurrentMemberDouble(iter, 26);
	}
	public double getCurrentMember(SdaiIterator iter, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return pGetCurrentMemberDouble(iter, 27);
	}
	public double getCurrentMember(SdaiIterator iter, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return pGetCurrentMemberDouble(iter, 28);
	}
	public double getCurrentMember(SdaiIterator iter, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return pGetCurrentMemberDouble(iter, 29);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return pGetCurrentMemberDouble(iter, 30);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return pGetCurrentMemberDouble(iter, 31);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return pGetCurrentMemberDouble(iter, 32);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return pGetCurrentMemberDouble(iter, 33);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return pGetCurrentMemberDouble(iter, 34);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return pGetCurrentMemberDouble(iter, 35);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return pGetCurrentMemberDouble(iter, 36);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return pGetCurrentMemberDouble(iter, 37);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return pGetCurrentMemberDouble(iter, 38);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return pGetCurrentMemberDouble(iter, 39);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return pGetCurrentMemberDouble(iter, 40);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return pGetCurrentMemberDouble(iter, 41);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return pGetCurrentMemberDouble(iter, 42);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return pGetCurrentMemberDouble(iter, 43);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return pGetCurrentMemberDouble(iter, 44);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcphmeasure node1) throws SdaiException { // case 45
		return pGetCurrentMemberDouble(iter, 45);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return pGetCurrentMemberDouble(iter, 46);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcpowermeasure node1) throws SdaiException { // case 47
		return pGetCurrentMemberDouble(iter, 47);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return pGetCurrentMemberDouble(iter, 48);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return pGetCurrentMemberDouble(iter, 49);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return pGetCurrentMemberDouble(iter, 50);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return pGetCurrentMemberDouble(iter, 51);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return pGetCurrentMemberDouble(iter, 52);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return pGetCurrentMemberDouble(iter, 53);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return pGetCurrentMemberDouble(iter, 54);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return pGetCurrentMemberDouble(iter, 55);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return pGetCurrentMemberDouble(iter, 56);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return pGetCurrentMemberDouble(iter, 57);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return pGetCurrentMemberDouble(iter, 58);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return pGetCurrentMemberDouble(iter, 59);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return pGetCurrentMemberDouble(iter, 60);
	}
	public double getCurrentMember(SdaiIterator iter, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return pGetCurrentMemberDouble(iter, 61);
	}
	public double getCurrentMember(SdaiIterator iter, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return pGetCurrentMemberDouble(iter, 62);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return pGetCurrentMemberDouble(iter, 63);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return pGetCurrentMemberDouble(iter, 64);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return pGetCurrentMemberDouble(iter, 65);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return pGetCurrentMemberDouble(iter, 66);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return pGetCurrentMemberDouble(iter, 67);
	}
	public double getCurrentMember(SdaiIterator iter, EIfctorquemeasure node1) throws SdaiException { // case 68
		return pGetCurrentMemberDouble(iter, 68);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return pGetCurrentMemberDouble(iter, 69);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return pGetCurrentMemberDouble(iter, 70);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return pGetCurrentMemberDouble(iter, 71);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return pGetCurrentMemberDouble(iter, 72);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return pGetCurrentMemberDouble(iter, 73);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcareameasure node1) throws SdaiException { // case 74
		return pGetCurrentMemberDouble(iter, 74);
	}
	public A_double getCurrentMember(SdaiIterator iter, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pGetCurrentMemberObject(iter, 75);
	}
	public double getCurrentMember(SdaiIterator iter, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return pGetCurrentMemberDouble(iter, 76);
	}
	public double getCurrentMember(SdaiIterator iter, EIfccountmeasure node1) throws SdaiException { // case 77
		return pGetCurrentMemberDouble(iter, 77);
	}
	public String getCurrentMember(SdaiIterator iter, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return (String)pGetCurrentMemberObject(iter, 78);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return pGetCurrentMemberDouble(iter, 79);
	}
	public double getCurrentMember(SdaiIterator iter, EIfclengthmeasure node1) throws SdaiException { // case 80
		return pGetCurrentMemberDouble(iter, 80);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return pGetCurrentMemberDouble(iter, 81);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcmassmeasure node1) throws SdaiException { // case 82
		return pGetCurrentMemberDouble(iter, 82);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return pGetCurrentMemberDouble(iter, 83);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return pGetCurrentMemberDouble(iter, 84);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return pGetCurrentMemberDouble(iter, 85);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcparametervalue node1) throws SdaiException { // case 86
		return pGetCurrentMemberDouble(iter, 86);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return pGetCurrentMemberDouble(iter, 87);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return pGetCurrentMemberDouble(iter, 88);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return pGetCurrentMemberDouble(iter, 89);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return pGetCurrentMemberDouble(iter, 90);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcratiomeasure node1) throws SdaiException { // case 91
		return pGetCurrentMemberDouble(iter, 91);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return pGetCurrentMemberDouble(iter, 92);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return pGetCurrentMemberDouble(iter, 93);
	}
	public double getCurrentMember(SdaiIterator iter, EIfctimemeasure node1) throws SdaiException { // case 94
		return pGetCurrentMemberDouble(iter, 94);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return pGetCurrentMemberDouble(iter, 95);
	}
	public boolean getCurrentMember(SdaiIterator iter, EIfcboolean node1) throws SdaiException { // case 96
		return pGetCurrentMemberBoolean(iter, 96);
	}
	public String getCurrentMember(SdaiIterator iter, EIfcdate node1) throws SdaiException { // case 97
		return (String)pGetCurrentMemberObject(iter, 97);
	}
	public String getCurrentMember(SdaiIterator iter, EIfcdatetime node1) throws SdaiException { // case 98
		return (String)pGetCurrentMemberObject(iter, 98);
	}
	public String getCurrentMember(SdaiIterator iter, EIfcduration node1) throws SdaiException { // case 99
		return (String)pGetCurrentMemberObject(iter, 99);
	}
	public String getCurrentMember(SdaiIterator iter, EIfcidentifier node1) throws SdaiException { // case 100
		return (String)pGetCurrentMemberObject(iter, 100);
	}
	public int getCurrentMember(SdaiIterator iter, EIfcinteger node1) throws SdaiException { // case 101
		return pGetCurrentMemberInt(iter, 101);
	}
	public String getCurrentMember(SdaiIterator iter, EIfclabel node1) throws SdaiException { // case 102
		return (String)pGetCurrentMemberObject(iter, 102);
	}
	public int getCurrentMember(SdaiIterator iter, EIfclogical node1) throws SdaiException { // case 103
		return pGetCurrentMemberInt(iter, 103);
	}
	public double getCurrentMember(SdaiIterator iter, EIfcreal node1) throws SdaiException { // case 104
		return pGetCurrentMemberDouble(iter, 104);
	}
	public String getCurrentMember(SdaiIterator iter, EIfctext node1) throws SdaiException { // case 105
		return (String)pGetCurrentMemberObject(iter, 105);
	}
	public String getCurrentMember(SdaiIterator iter, EIfctime node1) throws SdaiException { // case 106
		return (String)pGetCurrentMemberObject(iter, 106);
	}
	public int getCurrentMember(SdaiIterator iter, EIfctimestamp node1) throws SdaiException { // case 107
		return pGetCurrentMemberInt(iter, 107);
	}
	public void setByIndex(int index, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pSetByIndex(index, value, 2);
	}
	public void setByIndex(int index, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pSetByIndex(index, value, 3);
	}
	public void setByIndex(int index, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pSetByIndex(index, value, 4);
	}
	public void setByIndex(int index, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pSetByIndex(index, value, 5);
	}
	public A_integer createAggregateByIndex(int index, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pCreateAggregateByIndex(index, 6);
	}
	public void setByIndex(int index, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pSetByIndex(index, value, 7);
	}
	public void setByIndex(int index, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pSetByIndex(index, value, 8);
	}
	public void setByIndex(int index, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pSetByIndex(index, value, 9);
	}
	public void setByIndex(int index, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pSetByIndex(index, value, 10);
	}
	public void setByIndex(int index, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pSetByIndex(index, value, 11);
	}
	public void setByIndex(int index, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pSetByIndex(index, value, 12);
	}
	public void setByIndex(int index, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pSetByIndex(index, value, 13);
	}
	public void setByIndex(int index, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pSetByIndex(index, value, 14);
	}
	public void setByIndex(int index, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pSetByIndex(index, value, 15);
	}
	public void setByIndex(int index, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pSetByIndex(index, value, 16);
	}
	public void setByIndex(int index, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pSetByIndex(index, value, 17);
	}
	public void setByIndex(int index, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pSetByIndex(index, value, 18);
	}
	public void setByIndex(int index, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pSetByIndex(index, value, 19);
	}
	public void setByIndex(int index, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pSetByIndex(index, value, 20);
	}
	public void setByIndex(int index, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pSetByIndex(index, value, 21);
	}
	public void setByIndex(int index, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pSetByIndex(index, value, 22);
	}
	public void setByIndex(int index, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pSetByIndex(index, value, 23);
	}
	public void setByIndex(int index, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pSetByIndex(index, value, 24);
	}
	public void setByIndex(int index, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pSetByIndex(index, value, 25);
	}
	public void setByIndex(int index, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pSetByIndex(index, value, 26);
	}
	public void setByIndex(int index, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pSetByIndex(index, value, 27);
	}
	public void setByIndex(int index, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pSetByIndex(index, value, 28);
	}
	public void setByIndex(int index, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pSetByIndex(index, value, 29);
	}
	public void setByIndex(int index, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pSetByIndex(index, value, 30);
	}
	public void setByIndex(int index, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pSetByIndex(index, value, 31);
	}
	public void setByIndex(int index, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pSetByIndex(index, value, 32);
	}
	public void setByIndex(int index, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pSetByIndex(index, value, 33);
	}
	public void setByIndex(int index, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pSetByIndex(index, value, 34);
	}
	public void setByIndex(int index, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pSetByIndex(index, value, 35);
	}
	public void setByIndex(int index, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pSetByIndex(index, value, 36);
	}
	public void setByIndex(int index, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pSetByIndex(index, value, 37);
	}
	public void setByIndex(int index, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pSetByIndex(index, value, 38);
	}
	public void setByIndex(int index, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pSetByIndex(index, value, 39);
	}
	public void setByIndex(int index, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pSetByIndex(index, value, 40);
	}
	public void setByIndex(int index, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pSetByIndex(index, value, 41);
	}
	public void setByIndex(int index, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pSetByIndex(index, value, 42);
	}
	public void setByIndex(int index, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pSetByIndex(index, value, 43);
	}
	public void setByIndex(int index, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pSetByIndex(index, value, 44);
	}
	public void setByIndex(int index, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pSetByIndex(index, value, 45);
	}
	public void setByIndex(int index, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pSetByIndex(index, value, 46);
	}
	public void setByIndex(int index, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pSetByIndex(index, value, 47);
	}
	public void setByIndex(int index, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pSetByIndex(index, value, 48);
	}
	public void setByIndex(int index, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pSetByIndex(index, value, 49);
	}
	public void setByIndex(int index, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pSetByIndex(index, value, 50);
	}
	public void setByIndex(int index, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pSetByIndex(index, value, 51);
	}
	public void setByIndex(int index, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pSetByIndex(index, value, 52);
	}
	public void setByIndex(int index, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pSetByIndex(index, value, 53);
	}
	public void setByIndex(int index, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pSetByIndex(index, value, 54);
	}
	public void setByIndex(int index, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pSetByIndex(index, value, 55);
	}
	public void setByIndex(int index, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pSetByIndex(index, value, 56);
	}
	public void setByIndex(int index, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pSetByIndex(index, value, 57);
	}
	public void setByIndex(int index, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pSetByIndex(index, value, 58);
	}
	public void setByIndex(int index, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pSetByIndex(index, value, 59);
	}
	public void setByIndex(int index, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pSetByIndex(index, value, 60);
	}
	public void setByIndex(int index, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pSetByIndex(index, value, 61);
	}
	public void setByIndex(int index, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pSetByIndex(index, value, 62);
	}
	public void setByIndex(int index, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pSetByIndex(index, value, 63);
	}
	public void setByIndex(int index, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pSetByIndex(index, value, 64);
	}
	public void setByIndex(int index, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pSetByIndex(index, value, 65);
	}
	public void setByIndex(int index, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pSetByIndex(index, value, 66);
	}
	public void setByIndex(int index, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pSetByIndex(index, value, 67);
	}
	public void setByIndex(int index, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pSetByIndex(index, value, 68);
	}
	public void setByIndex(int index, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pSetByIndex(index, value, 69);
	}
	public void setByIndex(int index, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pSetByIndex(index, value, 70);
	}
	public void setByIndex(int index, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pSetByIndex(index, value, 71);
	}
	public void setByIndex(int index, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pSetByIndex(index, value, 72);
	}
	public void setByIndex(int index, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pSetByIndex(index, value, 73);
	}
	public void setByIndex(int index, double value, EIfcareameasure node1) throws SdaiException { // case 74
		pSetByIndex(index, value, 74);
	}
	public A_double createAggregateByIndex(int index, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pCreateAggregateByIndex(index, 75);
	}
	public void setByIndex(int index, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pSetByIndex(index, value, 76);
	}
	public void setByIndex(int index, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pSetByIndex(index, value, 77);
	}
	public void setByIndex(int index, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pSetByIndex(index, value, 78);
	}
	public void setByIndex(int index, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pSetByIndex(index, value, 79);
	}
	public void setByIndex(int index, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pSetByIndex(index, value, 80);
	}
	public void setByIndex(int index, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pSetByIndex(index, value, 81);
	}
	public void setByIndex(int index, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pSetByIndex(index, value, 82);
	}
	public void setByIndex(int index, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pSetByIndex(index, value, 83);
	}
	public void setByIndex(int index, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pSetByIndex(index, value, 84);
	}
	public void setByIndex(int index, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pSetByIndex(index, value, 85);
	}
	public void setByIndex(int index, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pSetByIndex(index, value, 86);
	}
	public void setByIndex(int index, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pSetByIndex(index, value, 87);
	}
	public void setByIndex(int index, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pSetByIndex(index, value, 88);
	}
	public void setByIndex(int index, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pSetByIndex(index, value, 89);
	}
	public void setByIndex(int index, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pSetByIndex(index, value, 90);
	}
	public void setByIndex(int index, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pSetByIndex(index, value, 91);
	}
	public void setByIndex(int index, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pSetByIndex(index, value, 92);
	}
	public void setByIndex(int index, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pSetByIndex(index, value, 93);
	}
	public void setByIndex(int index, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pSetByIndex(index, value, 94);
	}
	public void setByIndex(int index, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pSetByIndex(index, value, 95);
	}
	public void setByIndex(int index, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pSetByIndex(index, value, 96);
	}
	public void setByIndex(int index, String value, EIfcdate node1) throws SdaiException { // case 97
		pSetByIndex(index, value, 97);
	}
	public void setByIndex(int index, String value, EIfcdatetime node1) throws SdaiException { // case 98
		pSetByIndex(index, value, 98);
	}
	public void setByIndex(int index, String value, EIfcduration node1) throws SdaiException { // case 99
		pSetByIndex(index, value, 99);
	}
	public void setByIndex(int index, String value, EIfcidentifier node1) throws SdaiException { // case 100
		pSetByIndex(index, value, 100);
	}
	public void setByIndex(int index, int value, EIfcinteger node1) throws SdaiException { // case 101
		pSetByIndex(index, value, 101);
	}
	public void setByIndex(int index, String value, EIfclabel node1) throws SdaiException { // case 102
		pSetByIndex(index, value, 102);
	}
	public void setByIndex(int index, int value, EIfclogical node1) throws SdaiException { // case 103
		pSetByIndex(index, value, 103);
	}
	public void setByIndex(int index, double value, EIfcreal node1) throws SdaiException { // case 104
		pSetByIndex(index, value, 104);
	}
	public void setByIndex(int index, String value, EIfctext node1) throws SdaiException { // case 105
		pSetByIndex(index, value, 105);
	}
	public void setByIndex(int index, String value, EIfctime node1) throws SdaiException { // case 106
		pSetByIndex(index, value, 106);
	}
	public void setByIndex(int index, int value, EIfctimestamp node1) throws SdaiException { // case 107
		pSetByIndex(index, value, 107);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pSetCurrentMember(iter, value, 2);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pSetCurrentMember(iter, value, 3);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pSetCurrentMember(iter, value, 4);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pSetCurrentMember(iter, value, 5);
	}
	public A_integer createAggregateAsCurrentMember(SdaiIterator iter, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pCreateAggregateAsCurrentMember(iter, 6);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pSetCurrentMember(iter, value, 7);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pSetCurrentMember(iter, value, 8);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pSetCurrentMember(iter, value, 9);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pSetCurrentMember(iter, value, 10);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pSetCurrentMember(iter, value, 11);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pSetCurrentMember(iter, value, 12);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pSetCurrentMember(iter, value, 13);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pSetCurrentMember(iter, value, 14);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pSetCurrentMember(iter, value, 15);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pSetCurrentMember(iter, value, 16);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pSetCurrentMember(iter, value, 17);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pSetCurrentMember(iter, value, 18);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pSetCurrentMember(iter, value, 19);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pSetCurrentMember(iter, value, 20);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pSetCurrentMember(iter, value, 21);
	}
	public void setCurrentMember(SdaiIterator iter, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pSetCurrentMember(iter, value, 22);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pSetCurrentMember(iter, value, 23);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pSetCurrentMember(iter, value, 24);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pSetCurrentMember(iter, value, 25);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pSetCurrentMember(iter, value, 26);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pSetCurrentMember(iter, value, 27);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pSetCurrentMember(iter, value, 28);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pSetCurrentMember(iter, value, 29);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pSetCurrentMember(iter, value, 30);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pSetCurrentMember(iter, value, 31);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pSetCurrentMember(iter, value, 32);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pSetCurrentMember(iter, value, 33);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pSetCurrentMember(iter, value, 34);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pSetCurrentMember(iter, value, 35);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pSetCurrentMember(iter, value, 36);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pSetCurrentMember(iter, value, 37);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pSetCurrentMember(iter, value, 38);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pSetCurrentMember(iter, value, 39);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pSetCurrentMember(iter, value, 40);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pSetCurrentMember(iter, value, 41);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pSetCurrentMember(iter, value, 42);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pSetCurrentMember(iter, value, 43);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pSetCurrentMember(iter, value, 44);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pSetCurrentMember(iter, value, 45);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pSetCurrentMember(iter, value, 46);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pSetCurrentMember(iter, value, 47);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pSetCurrentMember(iter, value, 48);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pSetCurrentMember(iter, value, 49);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pSetCurrentMember(iter, value, 50);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pSetCurrentMember(iter, value, 51);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pSetCurrentMember(iter, value, 52);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pSetCurrentMember(iter, value, 53);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pSetCurrentMember(iter, value, 54);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pSetCurrentMember(iter, value, 55);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pSetCurrentMember(iter, value, 56);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pSetCurrentMember(iter, value, 57);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pSetCurrentMember(iter, value, 58);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pSetCurrentMember(iter, value, 59);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pSetCurrentMember(iter, value, 60);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pSetCurrentMember(iter, value, 61);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pSetCurrentMember(iter, value, 62);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pSetCurrentMember(iter, value, 63);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pSetCurrentMember(iter, value, 64);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pSetCurrentMember(iter, value, 65);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pSetCurrentMember(iter, value, 66);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pSetCurrentMember(iter, value, 67);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pSetCurrentMember(iter, value, 68);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pSetCurrentMember(iter, value, 69);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pSetCurrentMember(iter, value, 70);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pSetCurrentMember(iter, value, 71);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pSetCurrentMember(iter, value, 72);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pSetCurrentMember(iter, value, 73);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcareameasure node1) throws SdaiException { // case 74
		pSetCurrentMember(iter, value, 74);
	}
	public A_double createAggregateAsCurrentMember(SdaiIterator iter, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pCreateAggregateAsCurrentMember(iter, 75);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pSetCurrentMember(iter, value, 76);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pSetCurrentMember(iter, value, 77);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pSetCurrentMember(iter, value, 78);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pSetCurrentMember(iter, value, 79);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pSetCurrentMember(iter, value, 80);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pSetCurrentMember(iter, value, 81);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pSetCurrentMember(iter, value, 82);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pSetCurrentMember(iter, value, 83);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pSetCurrentMember(iter, value, 84);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pSetCurrentMember(iter, value, 85);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pSetCurrentMember(iter, value, 86);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pSetCurrentMember(iter, value, 87);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pSetCurrentMember(iter, value, 88);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pSetCurrentMember(iter, value, 89);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pSetCurrentMember(iter, value, 90);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pSetCurrentMember(iter, value, 91);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pSetCurrentMember(iter, value, 92);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pSetCurrentMember(iter, value, 93);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pSetCurrentMember(iter, value, 94);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pSetCurrentMember(iter, value, 95);
	}
	public void setCurrentMember(SdaiIterator iter, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pSetCurrentMember(iter, value, 96);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfcdate node1) throws SdaiException { // case 97
		pSetCurrentMember(iter, value, 97);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfcdatetime node1) throws SdaiException { // case 98
		pSetCurrentMember(iter, value, 98);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfcduration node1) throws SdaiException { // case 99
		pSetCurrentMember(iter, value, 99);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfcidentifier node1) throws SdaiException { // case 100
		pSetCurrentMember(iter, value, 100);
	}
	public void setCurrentMember(SdaiIterator iter, int value, EIfcinteger node1) throws SdaiException { // case 101
		pSetCurrentMember(iter, value, 101);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfclabel node1) throws SdaiException { // case 102
		pSetCurrentMember(iter, value, 102);
	}
	public void setCurrentMember(SdaiIterator iter, int value, EIfclogical node1) throws SdaiException { // case 103
		pSetCurrentMember(iter, value, 103);
	}
	public void setCurrentMember(SdaiIterator iter, double value, EIfcreal node1) throws SdaiException { // case 104
		pSetCurrentMember(iter, value, 104);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfctext node1) throws SdaiException { // case 105
		pSetCurrentMember(iter, value, 105);
	}
	public void setCurrentMember(SdaiIterator iter, String value, EIfctime node1) throws SdaiException { // case 106
		pSetCurrentMember(iter, value, 106);
	}
	public void setCurrentMember(SdaiIterator iter, int value, EIfctimestamp node1) throws SdaiException { // case 107
		pSetCurrentMember(iter, value, 107);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pAddBefore(iter, value, 2);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pAddBefore(iter, value, 3);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pAddBefore(iter, value, 4);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pAddBefore(iter, value, 5);
	}
	public A_integer createAggregateBefore(SdaiIterator iter, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pCreateAggregateBefore(iter, 6);
	}
	public void addBefore(SdaiIterator iter, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pAddBefore(iter, value, 7);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pAddBefore(iter, value, 8);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pAddBefore(iter, value, 9);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pAddBefore(iter, value, 10);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pAddBefore(iter, value, 11);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pAddBefore(iter, value, 12);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pAddBefore(iter, value, 13);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pAddBefore(iter, value, 14);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pAddBefore(iter, value, 15);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pAddBefore(iter, value, 16);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pAddBefore(iter, value, 17);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pAddBefore(iter, value, 18);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pAddBefore(iter, value, 19);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pAddBefore(iter, value, 20);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pAddBefore(iter, value, 21);
	}
	public void addBefore(SdaiIterator iter, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pAddBefore(iter, value, 22);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pAddBefore(iter, value, 23);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pAddBefore(iter, value, 24);
	}
	public void addBefore(SdaiIterator iter, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pAddBefore(iter, value, 25);
	}
	public void addBefore(SdaiIterator iter, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pAddBefore(iter, value, 26);
	}
	public void addBefore(SdaiIterator iter, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pAddBefore(iter, value, 27);
	}
	public void addBefore(SdaiIterator iter, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pAddBefore(iter, value, 28);
	}
	public void addBefore(SdaiIterator iter, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pAddBefore(iter, value, 29);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pAddBefore(iter, value, 30);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pAddBefore(iter, value, 31);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pAddBefore(iter, value, 32);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pAddBefore(iter, value, 33);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pAddBefore(iter, value, 34);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pAddBefore(iter, value, 35);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pAddBefore(iter, value, 36);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pAddBefore(iter, value, 37);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pAddBefore(iter, value, 38);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pAddBefore(iter, value, 39);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pAddBefore(iter, value, 40);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pAddBefore(iter, value, 41);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pAddBefore(iter, value, 42);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pAddBefore(iter, value, 43);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pAddBefore(iter, value, 44);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pAddBefore(iter, value, 45);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pAddBefore(iter, value, 46);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pAddBefore(iter, value, 47);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pAddBefore(iter, value, 48);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pAddBefore(iter, value, 49);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pAddBefore(iter, value, 50);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pAddBefore(iter, value, 51);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pAddBefore(iter, value, 52);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pAddBefore(iter, value, 53);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pAddBefore(iter, value, 54);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pAddBefore(iter, value, 55);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pAddBefore(iter, value, 56);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pAddBefore(iter, value, 57);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pAddBefore(iter, value, 58);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pAddBefore(iter, value, 59);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pAddBefore(iter, value, 60);
	}
	public void addBefore(SdaiIterator iter, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pAddBefore(iter, value, 61);
	}
	public void addBefore(SdaiIterator iter, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pAddBefore(iter, value, 62);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pAddBefore(iter, value, 63);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pAddBefore(iter, value, 64);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pAddBefore(iter, value, 65);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pAddBefore(iter, value, 66);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pAddBefore(iter, value, 67);
	}
	public void addBefore(SdaiIterator iter, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pAddBefore(iter, value, 68);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pAddBefore(iter, value, 69);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pAddBefore(iter, value, 70);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pAddBefore(iter, value, 71);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pAddBefore(iter, value, 72);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pAddBefore(iter, value, 73);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcareameasure node1) throws SdaiException { // case 74
		pAddBefore(iter, value, 74);
	}
	public A_double createAggregateBefore(SdaiIterator iter, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pCreateAggregateBefore(iter, 75);
	}
	public void addBefore(SdaiIterator iter, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pAddBefore(iter, value, 76);
	}
	public void addBefore(SdaiIterator iter, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pAddBefore(iter, value, 77);
	}
	public void addBefore(SdaiIterator iter, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pAddBefore(iter, value, 78);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pAddBefore(iter, value, 79);
	}
	public void addBefore(SdaiIterator iter, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pAddBefore(iter, value, 80);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pAddBefore(iter, value, 81);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pAddBefore(iter, value, 82);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pAddBefore(iter, value, 83);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pAddBefore(iter, value, 84);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pAddBefore(iter, value, 85);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pAddBefore(iter, value, 86);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pAddBefore(iter, value, 87);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pAddBefore(iter, value, 88);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pAddBefore(iter, value, 89);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pAddBefore(iter, value, 90);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pAddBefore(iter, value, 91);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pAddBefore(iter, value, 92);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pAddBefore(iter, value, 93);
	}
	public void addBefore(SdaiIterator iter, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pAddBefore(iter, value, 94);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pAddBefore(iter, value, 95);
	}
	public void addBefore(SdaiIterator iter, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pAddBefore(iter, value, 96);
	}
	public void addBefore(SdaiIterator iter, String value, EIfcdate node1) throws SdaiException { // case 97
		pAddBefore(iter, value, 97);
	}
	public void addBefore(SdaiIterator iter, String value, EIfcdatetime node1) throws SdaiException { // case 98
		pAddBefore(iter, value, 98);
	}
	public void addBefore(SdaiIterator iter, String value, EIfcduration node1) throws SdaiException { // case 99
		pAddBefore(iter, value, 99);
	}
	public void addBefore(SdaiIterator iter, String value, EIfcidentifier node1) throws SdaiException { // case 100
		pAddBefore(iter, value, 100);
	}
	public void addBefore(SdaiIterator iter, int value, EIfcinteger node1) throws SdaiException { // case 101
		pAddBefore(iter, value, 101);
	}
	public void addBefore(SdaiIterator iter, String value, EIfclabel node1) throws SdaiException { // case 102
		pAddBefore(iter, value, 102);
	}
	public void addBefore(SdaiIterator iter, int value, EIfclogical node1) throws SdaiException { // case 103
		pAddBefore(iter, value, 103);
	}
	public void addBefore(SdaiIterator iter, double value, EIfcreal node1) throws SdaiException { // case 104
		pAddBefore(iter, value, 104);
	}
	public void addBefore(SdaiIterator iter, String value, EIfctext node1) throws SdaiException { // case 105
		pAddBefore(iter, value, 105);
	}
	public void addBefore(SdaiIterator iter, String value, EIfctime node1) throws SdaiException { // case 106
		pAddBefore(iter, value, 106);
	}
	public void addBefore(SdaiIterator iter, int value, EIfctimestamp node1) throws SdaiException { // case 107
		pAddBefore(iter, value, 107);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pAddAfter(iter, value, 2);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pAddAfter(iter, value, 3);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pAddAfter(iter, value, 4);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pAddAfter(iter, value, 5);
	}
	public A_integer createAggregateAfter(SdaiIterator iter, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pCreateAggregateAfter(iter, 6);
	}
	public void addAfter(SdaiIterator iter, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pAddAfter(iter, value, 7);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pAddAfter(iter, value, 8);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pAddAfter(iter, value, 9);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pAddAfter(iter, value, 10);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pAddAfter(iter, value, 11);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pAddAfter(iter, value, 12);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pAddAfter(iter, value, 13);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pAddAfter(iter, value, 14);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pAddAfter(iter, value, 15);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pAddAfter(iter, value, 16);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pAddAfter(iter, value, 17);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pAddAfter(iter, value, 18);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pAddAfter(iter, value, 19);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pAddAfter(iter, value, 20);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pAddAfter(iter, value, 21);
	}
	public void addAfter(SdaiIterator iter, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pAddAfter(iter, value, 22);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pAddAfter(iter, value, 23);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pAddAfter(iter, value, 24);
	}
	public void addAfter(SdaiIterator iter, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pAddAfter(iter, value, 25);
	}
	public void addAfter(SdaiIterator iter, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pAddAfter(iter, value, 26);
	}
	public void addAfter(SdaiIterator iter, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pAddAfter(iter, value, 27);
	}
	public void addAfter(SdaiIterator iter, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pAddAfter(iter, value, 28);
	}
	public void addAfter(SdaiIterator iter, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pAddAfter(iter, value, 29);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pAddAfter(iter, value, 30);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pAddAfter(iter, value, 31);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pAddAfter(iter, value, 32);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pAddAfter(iter, value, 33);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pAddAfter(iter, value, 34);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pAddAfter(iter, value, 35);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pAddAfter(iter, value, 36);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pAddAfter(iter, value, 37);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pAddAfter(iter, value, 38);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pAddAfter(iter, value, 39);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pAddAfter(iter, value, 40);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pAddAfter(iter, value, 41);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pAddAfter(iter, value, 42);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pAddAfter(iter, value, 43);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pAddAfter(iter, value, 44);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pAddAfter(iter, value, 45);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pAddAfter(iter, value, 46);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pAddAfter(iter, value, 47);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pAddAfter(iter, value, 48);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pAddAfter(iter, value, 49);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pAddAfter(iter, value, 50);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pAddAfter(iter, value, 51);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pAddAfter(iter, value, 52);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pAddAfter(iter, value, 53);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pAddAfter(iter, value, 54);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pAddAfter(iter, value, 55);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pAddAfter(iter, value, 56);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pAddAfter(iter, value, 57);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pAddAfter(iter, value, 58);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pAddAfter(iter, value, 59);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pAddAfter(iter, value, 60);
	}
	public void addAfter(SdaiIterator iter, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pAddAfter(iter, value, 61);
	}
	public void addAfter(SdaiIterator iter, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pAddAfter(iter, value, 62);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pAddAfter(iter, value, 63);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pAddAfter(iter, value, 64);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pAddAfter(iter, value, 65);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pAddAfter(iter, value, 66);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pAddAfter(iter, value, 67);
	}
	public void addAfter(SdaiIterator iter, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pAddAfter(iter, value, 68);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pAddAfter(iter, value, 69);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pAddAfter(iter, value, 70);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pAddAfter(iter, value, 71);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pAddAfter(iter, value, 72);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pAddAfter(iter, value, 73);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcareameasure node1) throws SdaiException { // case 74
		pAddAfter(iter, value, 74);
	}
	public A_double createAggregateAfter(SdaiIterator iter, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pCreateAggregateAfter(iter, 75);
	}
	public void addAfter(SdaiIterator iter, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pAddAfter(iter, value, 76);
	}
	public void addAfter(SdaiIterator iter, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pAddAfter(iter, value, 77);
	}
	public void addAfter(SdaiIterator iter, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pAddAfter(iter, value, 78);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pAddAfter(iter, value, 79);
	}
	public void addAfter(SdaiIterator iter, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pAddAfter(iter, value, 80);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pAddAfter(iter, value, 81);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pAddAfter(iter, value, 82);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pAddAfter(iter, value, 83);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pAddAfter(iter, value, 84);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pAddAfter(iter, value, 85);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pAddAfter(iter, value, 86);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pAddAfter(iter, value, 87);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pAddAfter(iter, value, 88);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pAddAfter(iter, value, 89);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pAddAfter(iter, value, 90);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pAddAfter(iter, value, 91);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pAddAfter(iter, value, 92);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pAddAfter(iter, value, 93);
	}
	public void addAfter(SdaiIterator iter, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pAddAfter(iter, value, 94);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pAddAfter(iter, value, 95);
	}
	public void addAfter(SdaiIterator iter, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pAddAfter(iter, value, 96);
	}
	public void addAfter(SdaiIterator iter, String value, EIfcdate node1) throws SdaiException { // case 97
		pAddAfter(iter, value, 97);
	}
	public void addAfter(SdaiIterator iter, String value, EIfcdatetime node1) throws SdaiException { // case 98
		pAddAfter(iter, value, 98);
	}
	public void addAfter(SdaiIterator iter, String value, EIfcduration node1) throws SdaiException { // case 99
		pAddAfter(iter, value, 99);
	}
	public void addAfter(SdaiIterator iter, String value, EIfcidentifier node1) throws SdaiException { // case 100
		pAddAfter(iter, value, 100);
	}
	public void addAfter(SdaiIterator iter, int value, EIfcinteger node1) throws SdaiException { // case 101
		pAddAfter(iter, value, 101);
	}
	public void addAfter(SdaiIterator iter, String value, EIfclabel node1) throws SdaiException { // case 102
		pAddAfter(iter, value, 102);
	}
	public void addAfter(SdaiIterator iter, int value, EIfclogical node1) throws SdaiException { // case 103
		pAddAfter(iter, value, 103);
	}
	public void addAfter(SdaiIterator iter, double value, EIfcreal node1) throws SdaiException { // case 104
		pAddAfter(iter, value, 104);
	}
	public void addAfter(SdaiIterator iter, String value, EIfctext node1) throws SdaiException { // case 105
		pAddAfter(iter, value, 105);
	}
	public void addAfter(SdaiIterator iter, String value, EIfctime node1) throws SdaiException { // case 106
		pAddAfter(iter, value, 106);
	}
	public void addAfter(SdaiIterator iter, int value, EIfctimestamp node1) throws SdaiException { // case 107
		pAddAfter(iter, value, 107);
	}
	public void addUnordered(double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pAddUnordered(value, 2);
	}
	public void addUnordered(double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pAddUnordered(value, 3);
	}
	public void addUnordered(double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pAddUnordered(value, 4);
	}
	public void addUnordered(double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pAddUnordered(value, 5);
	}
	public A_integer createAggregateUnordered(EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pCreateAggregateUnordered(6);
	}
	public void addUnordered(double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pAddUnordered(value, 7);
	}
	public void addUnordered(double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pAddUnordered(value, 8);
	}
	public void addUnordered(double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pAddUnordered(value, 9);
	}
	public void addUnordered(double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pAddUnordered(value, 10);
	}
	public void addUnordered(double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pAddUnordered(value, 11);
	}
	public void addUnordered(double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pAddUnordered(value, 12);
	}
	public void addUnordered(double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pAddUnordered(value, 13);
	}
	public void addUnordered(double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pAddUnordered(value, 14);
	}
	public void addUnordered(double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pAddUnordered(value, 15);
	}
	public void addUnordered(double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pAddUnordered(value, 16);
	}
	public void addUnordered(double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pAddUnordered(value, 17);
	}
	public void addUnordered(double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pAddUnordered(value, 18);
	}
	public void addUnordered(double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pAddUnordered(value, 19);
	}
	public void addUnordered(double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pAddUnordered(value, 20);
	}
	public void addUnordered(double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pAddUnordered(value, 21);
	}
	public void addUnordered(int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pAddUnordered(value, 22);
	}
	public void addUnordered(double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pAddUnordered(value, 23);
	}
	public void addUnordered(double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pAddUnordered(value, 24);
	}
	public void addUnordered(double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pAddUnordered(value, 25);
	}
	public void addUnordered(double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pAddUnordered(value, 26);
	}
	public void addUnordered(double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pAddUnordered(value, 27);
	}
	public void addUnordered(double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pAddUnordered(value, 28);
	}
	public void addUnordered(double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pAddUnordered(value, 29);
	}
	public void addUnordered(double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pAddUnordered(value, 30);
	}
	public void addUnordered(double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pAddUnordered(value, 31);
	}
	public void addUnordered(double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pAddUnordered(value, 32);
	}
	public void addUnordered(double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pAddUnordered(value, 33);
	}
	public void addUnordered(double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pAddUnordered(value, 34);
	}
	public void addUnordered(double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pAddUnordered(value, 35);
	}
	public void addUnordered(double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pAddUnordered(value, 36);
	}
	public void addUnordered(double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pAddUnordered(value, 37);
	}
	public void addUnordered(double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pAddUnordered(value, 38);
	}
	public void addUnordered(double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pAddUnordered(value, 39);
	}
	public void addUnordered(double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pAddUnordered(value, 40);
	}
	public void addUnordered(double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pAddUnordered(value, 41);
	}
	public void addUnordered(double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pAddUnordered(value, 42);
	}
	public void addUnordered(double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pAddUnordered(value, 43);
	}
	public void addUnordered(double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pAddUnordered(value, 44);
	}
	public void addUnordered(double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pAddUnordered(value, 45);
	}
	public void addUnordered(double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pAddUnordered(value, 46);
	}
	public void addUnordered(double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pAddUnordered(value, 47);
	}
	public void addUnordered(double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pAddUnordered(value, 48);
	}
	public void addUnordered(double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pAddUnordered(value, 49);
	}
	public void addUnordered(double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pAddUnordered(value, 50);
	}
	public void addUnordered(double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pAddUnordered(value, 51);
	}
	public void addUnordered(double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pAddUnordered(value, 52);
	}
	public void addUnordered(double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pAddUnordered(value, 53);
	}
	public void addUnordered(double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pAddUnordered(value, 54);
	}
	public void addUnordered(double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pAddUnordered(value, 55);
	}
	public void addUnordered(double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pAddUnordered(value, 56);
	}
	public void addUnordered(double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pAddUnordered(value, 57);
	}
	public void addUnordered(double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pAddUnordered(value, 58);
	}
	public void addUnordered(double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pAddUnordered(value, 59);
	}
	public void addUnordered(double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pAddUnordered(value, 60);
	}
	public void addUnordered(double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pAddUnordered(value, 61);
	}
	public void addUnordered(double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pAddUnordered(value, 62);
	}
	public void addUnordered(double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pAddUnordered(value, 63);
	}
	public void addUnordered(double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pAddUnordered(value, 64);
	}
	public void addUnordered(double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pAddUnordered(value, 65);
	}
	public void addUnordered(double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pAddUnordered(value, 66);
	}
	public void addUnordered(double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pAddUnordered(value, 67);
	}
	public void addUnordered(double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pAddUnordered(value, 68);
	}
	public void addUnordered(double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pAddUnordered(value, 69);
	}
	public void addUnordered(double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pAddUnordered(value, 70);
	}
	public void addUnordered(double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pAddUnordered(value, 71);
	}
	public void addUnordered(double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pAddUnordered(value, 72);
	}
	public void addUnordered(double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pAddUnordered(value, 73);
	}
	public void addUnordered(double value, EIfcareameasure node1) throws SdaiException { // case 74
		pAddUnordered(value, 74);
	}
	public A_double createAggregateUnordered(EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pCreateAggregateUnordered(75);
	}
	public void addUnordered(double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pAddUnordered(value, 76);
	}
	public void addUnordered(double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pAddUnordered(value, 77);
	}
	public void addUnordered(String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pAddUnordered(value, 78);
	}
	public void addUnordered(double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pAddUnordered(value, 79);
	}
	public void addUnordered(double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pAddUnordered(value, 80);
	}
	public void addUnordered(double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pAddUnordered(value, 81);
	}
	public void addUnordered(double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pAddUnordered(value, 82);
	}
	public void addUnordered(double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pAddUnordered(value, 83);
	}
	public void addUnordered(double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pAddUnordered(value, 84);
	}
	public void addUnordered(double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pAddUnordered(value, 85);
	}
	public void addUnordered(double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pAddUnordered(value, 86);
	}
	public void addUnordered(double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pAddUnordered(value, 87);
	}
	public void addUnordered(double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pAddUnordered(value, 88);
	}
	public void addUnordered(double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pAddUnordered(value, 89);
	}
	public void addUnordered(double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pAddUnordered(value, 90);
	}
	public void addUnordered(double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pAddUnordered(value, 91);
	}
	public void addUnordered(double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pAddUnordered(value, 92);
	}
	public void addUnordered(double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pAddUnordered(value, 93);
	}
	public void addUnordered(double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pAddUnordered(value, 94);
	}
	public void addUnordered(double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pAddUnordered(value, 95);
	}
	public void addUnordered(boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pAddUnordered(value, 96);
	}
	public void addUnordered(String value, EIfcdate node1) throws SdaiException { // case 97
		pAddUnordered(value, 97);
	}
	public void addUnordered(String value, EIfcdatetime node1) throws SdaiException { // case 98
		pAddUnordered(value, 98);
	}
	public void addUnordered(String value, EIfcduration node1) throws SdaiException { // case 99
		pAddUnordered(value, 99);
	}
	public void addUnordered(String value, EIfcidentifier node1) throws SdaiException { // case 100
		pAddUnordered(value, 100);
	}
	public void addUnordered(int value, EIfcinteger node1) throws SdaiException { // case 101
		pAddUnordered(value, 101);
	}
	public void addUnordered(String value, EIfclabel node1) throws SdaiException { // case 102
		pAddUnordered(value, 102);
	}
	public void addUnordered(int value, EIfclogical node1) throws SdaiException { // case 103
		pAddUnordered(value, 103);
	}
	public void addUnordered(double value, EIfcreal node1) throws SdaiException { // case 104
		pAddUnordered(value, 104);
	}
	public void addUnordered(String value, EIfctext node1) throws SdaiException { // case 105
		pAddUnordered(value, 105);
	}
	public void addUnordered(String value, EIfctime node1) throws SdaiException { // case 106
		pAddUnordered(value, 106);
	}
	public void addUnordered(int value, EIfctimestamp node1) throws SdaiException { // case 107
		pAddUnordered(value, 107);
	}
	public void addByIndex(int index, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pAddByIndex(index, value, 2);
	}
	public void addByIndex(int index, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pAddByIndex(index, value, 3);
	}
	public void addByIndex(int index, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pAddByIndex(index, value, 4);
	}
	public void addByIndex(int index, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pAddByIndex(index, value, 5);
	}
	public A_integer addAggregateByIndex(int index, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)pAddAggregateByIndex(index, 6);
	}
	public void addByIndex(int index, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pAddByIndex(index, value, 7);
	}
	public void addByIndex(int index, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pAddByIndex(index, value, 8);
	}
	public void addByIndex(int index, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pAddByIndex(index, value, 9);
	}
	public void addByIndex(int index, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pAddByIndex(index, value, 10);
	}
	public void addByIndex(int index, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pAddByIndex(index, value, 11);
	}
	public void addByIndex(int index, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pAddByIndex(index, value, 12);
	}
	public void addByIndex(int index, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pAddByIndex(index, value, 13);
	}
	public void addByIndex(int index, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pAddByIndex(index, value, 14);
	}
	public void addByIndex(int index, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pAddByIndex(index, value, 15);
	}
	public void addByIndex(int index, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pAddByIndex(index, value, 16);
	}
	public void addByIndex(int index, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pAddByIndex(index, value, 17);
	}
	public void addByIndex(int index, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pAddByIndex(index, value, 18);
	}
	public void addByIndex(int index, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pAddByIndex(index, value, 19);
	}
	public void addByIndex(int index, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pAddByIndex(index, value, 20);
	}
	public void addByIndex(int index, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pAddByIndex(index, value, 21);
	}
	public void addByIndex(int index, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pAddByIndex(index, value, 22);
	}
	public void addByIndex(int index, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pAddByIndex(index, value, 23);
	}
	public void addByIndex(int index, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pAddByIndex(index, value, 24);
	}
	public void addByIndex(int index, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pAddByIndex(index, value, 25);
	}
	public void addByIndex(int index, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pAddByIndex(index, value, 26);
	}
	public void addByIndex(int index, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pAddByIndex(index, value, 27);
	}
	public void addByIndex(int index, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pAddByIndex(index, value, 28);
	}
	public void addByIndex(int index, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pAddByIndex(index, value, 29);
	}
	public void addByIndex(int index, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pAddByIndex(index, value, 30);
	}
	public void addByIndex(int index, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pAddByIndex(index, value, 31);
	}
	public void addByIndex(int index, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pAddByIndex(index, value, 32);
	}
	public void addByIndex(int index, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pAddByIndex(index, value, 33);
	}
	public void addByIndex(int index, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pAddByIndex(index, value, 34);
	}
	public void addByIndex(int index, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pAddByIndex(index, value, 35);
	}
	public void addByIndex(int index, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pAddByIndex(index, value, 36);
	}
	public void addByIndex(int index, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pAddByIndex(index, value, 37);
	}
	public void addByIndex(int index, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pAddByIndex(index, value, 38);
	}
	public void addByIndex(int index, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pAddByIndex(index, value, 39);
	}
	public void addByIndex(int index, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pAddByIndex(index, value, 40);
	}
	public void addByIndex(int index, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pAddByIndex(index, value, 41);
	}
	public void addByIndex(int index, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pAddByIndex(index, value, 42);
	}
	public void addByIndex(int index, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pAddByIndex(index, value, 43);
	}
	public void addByIndex(int index, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pAddByIndex(index, value, 44);
	}
	public void addByIndex(int index, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pAddByIndex(index, value, 45);
	}
	public void addByIndex(int index, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pAddByIndex(index, value, 46);
	}
	public void addByIndex(int index, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pAddByIndex(index, value, 47);
	}
	public void addByIndex(int index, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pAddByIndex(index, value, 48);
	}
	public void addByIndex(int index, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pAddByIndex(index, value, 49);
	}
	public void addByIndex(int index, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pAddByIndex(index, value, 50);
	}
	public void addByIndex(int index, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pAddByIndex(index, value, 51);
	}
	public void addByIndex(int index, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pAddByIndex(index, value, 52);
	}
	public void addByIndex(int index, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pAddByIndex(index, value, 53);
	}
	public void addByIndex(int index, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pAddByIndex(index, value, 54);
	}
	public void addByIndex(int index, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pAddByIndex(index, value, 55);
	}
	public void addByIndex(int index, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pAddByIndex(index, value, 56);
	}
	public void addByIndex(int index, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pAddByIndex(index, value, 57);
	}
	public void addByIndex(int index, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pAddByIndex(index, value, 58);
	}
	public void addByIndex(int index, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pAddByIndex(index, value, 59);
	}
	public void addByIndex(int index, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pAddByIndex(index, value, 60);
	}
	public void addByIndex(int index, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pAddByIndex(index, value, 61);
	}
	public void addByIndex(int index, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pAddByIndex(index, value, 62);
	}
	public void addByIndex(int index, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pAddByIndex(index, value, 63);
	}
	public void addByIndex(int index, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pAddByIndex(index, value, 64);
	}
	public void addByIndex(int index, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pAddByIndex(index, value, 65);
	}
	public void addByIndex(int index, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pAddByIndex(index, value, 66);
	}
	public void addByIndex(int index, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pAddByIndex(index, value, 67);
	}
	public void addByIndex(int index, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pAddByIndex(index, value, 68);
	}
	public void addByIndex(int index, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pAddByIndex(index, value, 69);
	}
	public void addByIndex(int index, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pAddByIndex(index, value, 70);
	}
	public void addByIndex(int index, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pAddByIndex(index, value, 71);
	}
	public void addByIndex(int index, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pAddByIndex(index, value, 72);
	}
	public void addByIndex(int index, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pAddByIndex(index, value, 73);
	}
	public void addByIndex(int index, double value, EIfcareameasure node1) throws SdaiException { // case 74
		pAddByIndex(index, value, 74);
	}
	public A_double addAggregateByIndex(int index, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)pAddAggregateByIndex(index, 75);
	}
	public void addByIndex(int index, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pAddByIndex(index, value, 76);
	}
	public void addByIndex(int index, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pAddByIndex(index, value, 77);
	}
	public void addByIndex(int index, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pAddByIndex(index, value, 78);
	}
	public void addByIndex(int index, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pAddByIndex(index, value, 79);
	}
	public void addByIndex(int index, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pAddByIndex(index, value, 80);
	}
	public void addByIndex(int index, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pAddByIndex(index, value, 81);
	}
	public void addByIndex(int index, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pAddByIndex(index, value, 82);
	}
	public void addByIndex(int index, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pAddByIndex(index, value, 83);
	}
	public void addByIndex(int index, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pAddByIndex(index, value, 84);
	}
	public void addByIndex(int index, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pAddByIndex(index, value, 85);
	}
	public void addByIndex(int index, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pAddByIndex(index, value, 86);
	}
	public void addByIndex(int index, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pAddByIndex(index, value, 87);
	}
	public void addByIndex(int index, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pAddByIndex(index, value, 88);
	}
	public void addByIndex(int index, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pAddByIndex(index, value, 89);
	}
	public void addByIndex(int index, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pAddByIndex(index, value, 90);
	}
	public void addByIndex(int index, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pAddByIndex(index, value, 91);
	}
	public void addByIndex(int index, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pAddByIndex(index, value, 92);
	}
	public void addByIndex(int index, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pAddByIndex(index, value, 93);
	}
	public void addByIndex(int index, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pAddByIndex(index, value, 94);
	}
	public void addByIndex(int index, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pAddByIndex(index, value, 95);
	}
	public void addByIndex(int index, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pAddByIndex(index, value, 96);
	}
	public void addByIndex(int index, String value, EIfcdate node1) throws SdaiException { // case 97
		pAddByIndex(index, value, 97);
	}
	public void addByIndex(int index, String value, EIfcdatetime node1) throws SdaiException { // case 98
		pAddByIndex(index, value, 98);
	}
	public void addByIndex(int index, String value, EIfcduration node1) throws SdaiException { // case 99
		pAddByIndex(index, value, 99);
	}
	public void addByIndex(int index, String value, EIfcidentifier node1) throws SdaiException { // case 100
		pAddByIndex(index, value, 100);
	}
	public void addByIndex(int index, int value, EIfcinteger node1) throws SdaiException { // case 101
		pAddByIndex(index, value, 101);
	}
	public void addByIndex(int index, String value, EIfclabel node1) throws SdaiException { // case 102
		pAddByIndex(index, value, 102);
	}
	public void addByIndex(int index, int value, EIfclogical node1) throws SdaiException { // case 103
		pAddByIndex(index, value, 103);
	}
	public void addByIndex(int index, double value, EIfcreal node1) throws SdaiException { // case 104
		pAddByIndex(index, value, 104);
	}
	public void addByIndex(int index, String value, EIfctext node1) throws SdaiException { // case 105
		pAddByIndex(index, value, 105);
	}
	public void addByIndex(int index, String value, EIfctime node1) throws SdaiException { // case 106
		pAddByIndex(index, value, 106);
	}
	public void addByIndex(int index, int value, EIfctimestamp node1) throws SdaiException { // case 107
		pAddByIndex(index, value, 107);
	}
	public void removeUnordered(double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		pRemoveUnordered(value, 2);
	}
	public void removeUnordered(double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		pRemoveUnordered(value, 3);
	}
	public void removeUnordered(double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		pRemoveUnordered(value, 4);
	}
	public void removeUnordered(double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		pRemoveUnordered(value, 5);
	}
	public void removeUnordered(A_integer value, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		pRemoveUnordered(value, 6);
	}
	public void removeUnordered(double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		pRemoveUnordered(value, 7);
	}
	public void removeUnordered(double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		pRemoveUnordered(value, 8);
	}
	public void removeUnordered(double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		pRemoveUnordered(value, 9);
	}
	public void removeUnordered(double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		pRemoveUnordered(value, 10);
	}
	public void removeUnordered(double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		pRemoveUnordered(value, 11);
	}
	public void removeUnordered(double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		pRemoveUnordered(value, 12);
	}
	public void removeUnordered(double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		pRemoveUnordered(value, 13);
	}
	public void removeUnordered(double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		pRemoveUnordered(value, 14);
	}
	public void removeUnordered(double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		pRemoveUnordered(value, 15);
	}
	public void removeUnordered(double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		pRemoveUnordered(value, 16);
	}
	public void removeUnordered(double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		pRemoveUnordered(value, 17);
	}
	public void removeUnordered(double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		pRemoveUnordered(value, 18);
	}
	public void removeUnordered(double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		pRemoveUnordered(value, 19);
	}
	public void removeUnordered(double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		pRemoveUnordered(value, 20);
	}
	public void removeUnordered(double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		pRemoveUnordered(value, 21);
	}
	public void removeUnordered(int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		pRemoveUnordered(value, 22);
	}
	public void removeUnordered(double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		pRemoveUnordered(value, 23);
	}
	public void removeUnordered(double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		pRemoveUnordered(value, 24);
	}
	public void removeUnordered(double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		pRemoveUnordered(value, 25);
	}
	public void removeUnordered(double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		pRemoveUnordered(value, 26);
	}
	public void removeUnordered(double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		pRemoveUnordered(value, 27);
	}
	public void removeUnordered(double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		pRemoveUnordered(value, 28);
	}
	public void removeUnordered(double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		pRemoveUnordered(value, 29);
	}
	public void removeUnordered(double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		pRemoveUnordered(value, 30);
	}
	public void removeUnordered(double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		pRemoveUnordered(value, 31);
	}
	public void removeUnordered(double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		pRemoveUnordered(value, 32);
	}
	public void removeUnordered(double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		pRemoveUnordered(value, 33);
	}
	public void removeUnordered(double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		pRemoveUnordered(value, 34);
	}
	public void removeUnordered(double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		pRemoveUnordered(value, 35);
	}
	public void removeUnordered(double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		pRemoveUnordered(value, 36);
	}
	public void removeUnordered(double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		pRemoveUnordered(value, 37);
	}
	public void removeUnordered(double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		pRemoveUnordered(value, 38);
	}
	public void removeUnordered(double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		pRemoveUnordered(value, 39);
	}
	public void removeUnordered(double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		pRemoveUnordered(value, 40);
	}
	public void removeUnordered(double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		pRemoveUnordered(value, 41);
	}
	public void removeUnordered(double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		pRemoveUnordered(value, 42);
	}
	public void removeUnordered(double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		pRemoveUnordered(value, 43);
	}
	public void removeUnordered(double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		pRemoveUnordered(value, 44);
	}
	public void removeUnordered(double value, EIfcphmeasure node1) throws SdaiException { // case 45
		pRemoveUnordered(value, 45);
	}
	public void removeUnordered(double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		pRemoveUnordered(value, 46);
	}
	public void removeUnordered(double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		pRemoveUnordered(value, 47);
	}
	public void removeUnordered(double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		pRemoveUnordered(value, 48);
	}
	public void removeUnordered(double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		pRemoveUnordered(value, 49);
	}
	public void removeUnordered(double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		pRemoveUnordered(value, 50);
	}
	public void removeUnordered(double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		pRemoveUnordered(value, 51);
	}
	public void removeUnordered(double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		pRemoveUnordered(value, 52);
	}
	public void removeUnordered(double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		pRemoveUnordered(value, 53);
	}
	public void removeUnordered(double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		pRemoveUnordered(value, 54);
	}
	public void removeUnordered(double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		pRemoveUnordered(value, 55);
	}
	public void removeUnordered(double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		pRemoveUnordered(value, 56);
	}
	public void removeUnordered(double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		pRemoveUnordered(value, 57);
	}
	public void removeUnordered(double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		pRemoveUnordered(value, 58);
	}
	public void removeUnordered(double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		pRemoveUnordered(value, 59);
	}
	public void removeUnordered(double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		pRemoveUnordered(value, 60);
	}
	public void removeUnordered(double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		pRemoveUnordered(value, 61);
	}
	public void removeUnordered(double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		pRemoveUnordered(value, 62);
	}
	public void removeUnordered(double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		pRemoveUnordered(value, 63);
	}
	public void removeUnordered(double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		pRemoveUnordered(value, 64);
	}
	public void removeUnordered(double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		pRemoveUnordered(value, 65);
	}
	public void removeUnordered(double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		pRemoveUnordered(value, 66);
	}
	public void removeUnordered(double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		pRemoveUnordered(value, 67);
	}
	public void removeUnordered(double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		pRemoveUnordered(value, 68);
	}
	public void removeUnordered(double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		pRemoveUnordered(value, 69);
	}
	public void removeUnordered(double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		pRemoveUnordered(value, 70);
	}
	public void removeUnordered(double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		pRemoveUnordered(value, 71);
	}
	public void removeUnordered(double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		pRemoveUnordered(value, 72);
	}
	public void removeUnordered(double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		pRemoveUnordered(value, 73);
	}
	public void removeUnordered(double value, EIfcareameasure node1) throws SdaiException { // case 74
		pRemoveUnordered(value, 74);
	}
	public void removeUnordered(A_double value, EIfccomplexnumber node1) throws SdaiException { // case 75
		pRemoveUnordered(value, 75);
	}
	public void removeUnordered(double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		pRemoveUnordered(value, 76);
	}
	public void removeUnordered(double value, EIfccountmeasure node1) throws SdaiException { // case 77
		pRemoveUnordered(value, 77);
	}
	public void removeUnordered(String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		pRemoveUnordered(value, 78);
	}
	public void removeUnordered(double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		pRemoveUnordered(value, 79);
	}
	public void removeUnordered(double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		pRemoveUnordered(value, 80);
	}
	public void removeUnordered(double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		pRemoveUnordered(value, 81);
	}
	public void removeUnordered(double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		pRemoveUnordered(value, 82);
	}
	public void removeUnordered(double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		pRemoveUnordered(value, 83);
	}
	public void removeUnordered(double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		pRemoveUnordered(value, 84);
	}
	public void removeUnordered(double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		pRemoveUnordered(value, 85);
	}
	public void removeUnordered(double value, EIfcparametervalue node1) throws SdaiException { // case 86
		pRemoveUnordered(value, 86);
	}
	public void removeUnordered(double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		pRemoveUnordered(value, 87);
	}
	public void removeUnordered(double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		pRemoveUnordered(value, 88);
	}
	public void removeUnordered(double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		pRemoveUnordered(value, 89);
	}
	public void removeUnordered(double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		pRemoveUnordered(value, 90);
	}
	public void removeUnordered(double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		pRemoveUnordered(value, 91);
	}
	public void removeUnordered(double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		pRemoveUnordered(value, 92);
	}
	public void removeUnordered(double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		pRemoveUnordered(value, 93);
	}
	public void removeUnordered(double value, EIfctimemeasure node1) throws SdaiException { // case 94
		pRemoveUnordered(value, 94);
	}
	public void removeUnordered(double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		pRemoveUnordered(value, 95);
	}
	public void removeUnordered(boolean value, EIfcboolean node1) throws SdaiException { // case 96
		pRemoveUnordered(value, 96);
	}
	public void removeUnordered(String value, EIfcdate node1) throws SdaiException { // case 97
		pRemoveUnordered(value, 97);
	}
	public void removeUnordered(String value, EIfcdatetime node1) throws SdaiException { // case 98
		pRemoveUnordered(value, 98);
	}
	public void removeUnordered(String value, EIfcduration node1) throws SdaiException { // case 99
		pRemoveUnordered(value, 99);
	}
	public void removeUnordered(String value, EIfcidentifier node1) throws SdaiException { // case 100
		pRemoveUnordered(value, 100);
	}
	public void removeUnordered(int value, EIfcinteger node1) throws SdaiException { // case 101
		pRemoveUnordered(value, 101);
	}
	public void removeUnordered(String value, EIfclabel node1) throws SdaiException { // case 102
		pRemoveUnordered(value, 102);
	}
	public void removeUnordered(int value, EIfclogical node1) throws SdaiException { // case 103
		pRemoveUnordered(value, 103);
	}
	public void removeUnordered(double value, EIfcreal node1) throws SdaiException { // case 104
		pRemoveUnordered(value, 104);
	}
	public void removeUnordered(String value, EIfctext node1) throws SdaiException { // case 105
		pRemoveUnordered(value, 105);
	}
	public void removeUnordered(String value, EIfctime node1) throws SdaiException { // case 106
		pRemoveUnordered(value, 106);
	}
	public void removeUnordered(int value, EIfctimestamp node1) throws SdaiException { // case 107
		pRemoveUnordered(value, 107);
	}
}
