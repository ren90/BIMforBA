/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertyBoundedValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertyboundedvalue extends CIfcsimpleproperty implements EIfcpropertyboundedvalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertyboundedvalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// PartOfPset: protected Object  - inverse - java inheritance -  ENTITY IfcPropertySet
	// PropertyForDependance: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PropertyDependsOn: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PartOfComplex: protected Object  - inverse - java inheritance -  ENTITY IfcComplexProperty
	protected Object a2; // UpperBoundValue - current entity - SELECT IfcValue
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2$$; // current SELECT path indicator
	protected Object a3; // LowerBoundValue - current entity - SELECT IfcValue
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a3$$; // current SELECT path indicator
	protected Object a4; // Unit - current entity - SELECT IfcUnit
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // SetPointValue - current entity - SELECT IfcValue
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a5$$; // current SELECT path indicator
*/

	/*----------------------------- Attributes (new version) -----------*/

	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// PartOfPset - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PropertyForDependance - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// PropertyDependsOn - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// PartOfComplex - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// UpperBoundValue - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	protected int a2$$;
	// LowerBoundValue - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	protected int a3$$;
	// Unit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a4;
	// SetPointValue - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	protected int a5$$;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5104=INVERSE_ATTRIBUTE('HasExternalReferences',#5102,0,#4231,$,#4234,#8918,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5096=EXPLICIT_ATTRIBUTE('Name',#5094,0,#2523,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5097=EXPLICIT_ATTRIBUTE('Description',#5094,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5098=INVERSE_ATTRIBUTE('PartOfPset',#5094,0,#5137,$,#5139,#8908,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfPset
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5099=INVERSE_ATTRIBUTE('PropertyForDependance',#5094,1,#5115,$,#5117,#8910,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyForDependance
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5100=INVERSE_ATTRIBUTE('PropertyDependsOn',#5094,2,#5115,$,#5118,#8912,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyDependsOn
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5101=INVERSE_ATTRIBUTE('PartOfComplex',#5094,3,#3675,$,#3678,#8914,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplex
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5107=EXPLICIT_ATTRIBUTE('UpperBoundValue',#5105,0,#3223,$,.T.);
	//<01> generating methods for consolidated attribute:  UpperBoundValue
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: UpperBoundValue
	public int testUpperboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return test_select(a2, a2$$);
	}

	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return get_double_select(a2, a2$$, 2);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return get_double_select(a2, a2$$, 3);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return get_double_select(a2, a2$$, 4);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return get_double_select(a2, a2$$, 5);
	}
	public A_integer getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)get_aggregate_select(a2, a2$$, 6);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return get_double_select(a2, a2$$, 7);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return get_double_select(a2, a2$$, 8);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return get_double_select(a2, a2$$, 9);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return get_double_select(a2, a2$$, 10);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return get_double_select(a2, a2$$, 11);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return get_double_select(a2, a2$$, 12);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return get_double_select(a2, a2$$, 13);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return get_double_select(a2, a2$$, 14);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException { // case 15
		return get_double_select(a2, a2$$, 15);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException { // case 16
		return get_double_select(a2, a2$$, 16);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return get_double_select(a2, a2$$, 17);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return get_double_select(a2, a2$$, 18);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return get_double_select(a2, a2$$, 19);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return get_double_select(a2, a2$$, 20);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return get_double_select(a2, a2$$, 21);
	}
	public int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return get_integer_select(a2, a2$$, 22);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return get_double_select(a2, a2$$, 23);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return get_double_select(a2, a2$$, 24);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return get_double_select(a2, a2$$, 25);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return get_double_select(a2, a2$$, 26);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return get_double_select(a2, a2$$, 27);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return get_double_select(a2, a2$$, 28);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return get_double_select(a2, a2$$, 29);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return get_double_select(a2, a2$$, 30);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return get_double_select(a2, a2$$, 31);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return get_double_select(a2, a2$$, 32);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return get_double_select(a2, a2$$, 33);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return get_double_select(a2, a2$$, 34);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return get_double_select(a2, a2$$, 35);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return get_double_select(a2, a2$$, 36);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return get_double_select(a2, a2$$, 37);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return get_double_select(a2, a2$$, 38);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return get_double_select(a2, a2$$, 39);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return get_double_select(a2, a2$$, 40);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return get_double_select(a2, a2$$, 41);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return get_double_select(a2, a2$$, 42);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return get_double_select(a2, a2$$, 43);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return get_double_select(a2, a2$$, 44);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException { // case 45
		return get_double_select(a2, a2$$, 45);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return get_double_select(a2, a2$$, 46);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException { // case 47
		return get_double_select(a2, a2$$, 47);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return get_double_select(a2, a2$$, 48);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return get_double_select(a2, a2$$, 49);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return get_double_select(a2, a2$$, 50);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return get_double_select(a2, a2$$, 51);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return get_double_select(a2, a2$$, 52);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return get_double_select(a2, a2$$, 53);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return get_double_select(a2, a2$$, 54);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return get_double_select(a2, a2$$, 55);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return get_double_select(a2, a2$$, 56);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return get_double_select(a2, a2$$, 57);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return get_double_select(a2, a2$$, 58);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return get_double_select(a2, a2$$, 59);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return get_double_select(a2, a2$$, 60);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return get_double_select(a2, a2$$, 61);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return get_double_select(a2, a2$$, 62);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return get_double_select(a2, a2$$, 63);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return get_double_select(a2, a2$$, 64);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return get_double_select(a2, a2$$, 65);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return get_double_select(a2, a2$$, 66);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return get_double_select(a2, a2$$, 67);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException { // case 68
		return get_double_select(a2, a2$$, 68);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return get_double_select(a2, a2$$, 69);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return get_double_select(a2, a2$$, 70);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return get_double_select(a2, a2$$, 71);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return get_double_select(a2, a2$$, 72);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return get_double_select(a2, a2$$, 73);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException { // case 74
		return get_double_select(a2, a2$$, 74);
	}
	public A_double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)get_aggregate_select(a2, a2$$, 75);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return get_double_select(a2, a2$$, 76);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException { // case 77
		return get_double_select(a2, a2$$, 77);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return get_string_select(a2, a2$$, 78);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return get_double_select(a2, a2$$, 79);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException { // case 80
		return get_double_select(a2, a2$$, 80);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return get_double_select(a2, a2$$, 81);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException { // case 82
		return get_double_select(a2, a2$$, 82);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return get_double_select(a2, a2$$, 83);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return get_double_select(a2, a2$$, 84);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return get_double_select(a2, a2$$, 85);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException { // case 86
		return get_double_select(a2, a2$$, 86);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return get_double_select(a2, a2$$, 87);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return get_double_select(a2, a2$$, 88);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return get_double_select(a2, a2$$, 89);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return get_double_select(a2, a2$$, 90);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException { // case 91
		return get_double_select(a2, a2$$, 91);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return get_double_select(a2, a2$$, 92);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return get_double_select(a2, a2$$, 93);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException { // case 94
		return get_double_select(a2, a2$$, 94);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return get_double_select(a2, a2$$, 95);
	}
	public boolean getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException { // case 96
		return get_boolean_select(a2, a2$$, 96);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException { // case 97
		return get_string_select(a2, a2$$, 97);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException { // case 98
		return get_string_select(a2, a2$$, 98);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException { // case 99
		return get_string_select(a2, a2$$, 99);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException { // case 100
		return get_string_select(a2, a2$$, 100);
	}
	public int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException { // case 101
		return get_integer_select(a2, a2$$, 101);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException { // case 102
		return get_string_select(a2, a2$$, 102);
	}
	public int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException { // case 103
		return get_logical_select(a2, a2$$, 103);
	}
	public double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException { // case 104
		return get_double_select(a2, a2$$, 104);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException { // case 105
		return get_string_select(a2, a2$$, 105);
	}
	public String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException { // case 106
		return get_string_select(a2, a2$$, 106);
	}
	public int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException { // case 107
		return get_integer_select(a2, a2$$, 107);
	}

	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		a2 = set_double_select(value);
		a2$$ = 2;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		a2 = set_double_select(value);
		a2$$ = 3;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		a2 = set_double_select(value);
		a2$$ = 4;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		a2 = set_double_select(value);
		a2$$ = 5;
	}
	public A_integer createUpperboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		a2 = create_aggregate_integer((A_integer)a2, a2$, a2$$ = 6);
		return (A_integer)a2;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		a2 = set_double_select(value);
		a2$$ = 7;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		a2 = set_double_select(value);
		a2$$ = 8;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		a2 = set_double_select(value);
		a2$$ = 9;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		a2 = set_double_select(value);
		a2$$ = 10;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		a2 = set_double_select(value);
		a2$$ = 11;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		a2 = set_double_select(value);
		a2$$ = 12;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		a2 = set_double_select(value);
		a2$$ = 13;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		a2 = set_double_select(value);
		a2$$ = 14;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		a2 = set_double_select(value);
		a2$$ = 15;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		a2 = set_double_select(value);
		a2$$ = 16;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		a2 = set_double_select(value);
		a2$$ = 17;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		a2 = set_double_select(value);
		a2$$ = 18;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		a2 = set_double_select(value);
		a2$$ = 19;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		a2 = set_double_select(value);
		a2$$ = 20;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		a2 = set_double_select(value);
		a2$$ = 21;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		a2 = set_integer_select(value);
		a2$$ = 22;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		a2 = set_double_select(value);
		a2$$ = 23;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		a2 = set_double_select(value);
		a2$$ = 24;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		a2 = set_double_select(value);
		a2$$ = 25;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		a2 = set_double_select(value);
		a2$$ = 26;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		a2 = set_double_select(value);
		a2$$ = 27;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		a2 = set_double_select(value);
		a2$$ = 28;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		a2 = set_double_select(value);
		a2$$ = 29;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		a2 = set_double_select(value);
		a2$$ = 30;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		a2 = set_double_select(value);
		a2$$ = 31;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		a2 = set_double_select(value);
		a2$$ = 32;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		a2 = set_double_select(value);
		a2$$ = 33;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		a2 = set_double_select(value);
		a2$$ = 34;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		a2 = set_double_select(value);
		a2$$ = 35;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		a2 = set_double_select(value);
		a2$$ = 36;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		a2 = set_double_select(value);
		a2$$ = 37;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		a2 = set_double_select(value);
		a2$$ = 38;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		a2 = set_double_select(value);
		a2$$ = 39;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		a2 = set_double_select(value);
		a2$$ = 40;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		a2 = set_double_select(value);
		a2$$ = 41;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		a2 = set_double_select(value);
		a2$$ = 42;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		a2 = set_double_select(value);
		a2$$ = 43;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		a2 = set_double_select(value);
		a2$$ = 44;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		a2 = set_double_select(value);
		a2$$ = 45;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		a2 = set_double_select(value);
		a2$$ = 46;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		a2 = set_double_select(value);
		a2$$ = 47;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		a2 = set_double_select(value);
		a2$$ = 48;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		a2 = set_double_select(value);
		a2$$ = 49;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		a2 = set_double_select(value);
		a2$$ = 50;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		a2 = set_double_select(value);
		a2$$ = 51;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		a2 = set_double_select(value);
		a2$$ = 52;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		a2 = set_double_select(value);
		a2$$ = 53;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		a2 = set_double_select(value);
		a2$$ = 54;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		a2 = set_double_select(value);
		a2$$ = 55;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		a2 = set_double_select(value);
		a2$$ = 56;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		a2 = set_double_select(value);
		a2$$ = 57;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		a2 = set_double_select(value);
		a2$$ = 58;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		a2 = set_double_select(value);
		a2$$ = 59;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		a2 = set_double_select(value);
		a2$$ = 60;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		a2 = set_double_select(value);
		a2$$ = 61;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		a2 = set_double_select(value);
		a2$$ = 62;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		a2 = set_double_select(value);
		a2$$ = 63;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		a2 = set_double_select(value);
		a2$$ = 64;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		a2 = set_double_select(value);
		a2$$ = 65;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		a2 = set_double_select(value);
		a2$$ = 66;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		a2 = set_double_select(value);
		a2$$ = 67;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		a2 = set_double_select(value);
		a2$$ = 68;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		a2 = set_double_select(value);
		a2$$ = 69;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		a2 = set_double_select(value);
		a2$$ = 70;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		a2 = set_double_select(value);
		a2$$ = 71;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		a2 = set_double_select(value);
		a2$$ = 72;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		a2 = set_double_select(value);
		a2$$ = 73;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException { // case 74
		a2 = set_double_select(value);
		a2$$ = 74;
	}
	public A_double createUpperboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		a2 = create_aggregate_double((A_double)a2, a2$, a2$$ = 75);
		return (A_double)a2;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		a2 = set_double_select(value);
		a2$$ = 76;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		a2 = set_double_select(value);
		a2$$ = 77;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		a2 = set_string(value);
		a2$$ = 78;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		a2 = set_double_select(value);
		a2$$ = 79;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		a2 = set_double_select(value);
		a2$$ = 80;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		a2 = set_double_select(value);
		a2$$ = 81;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		a2 = set_double_select(value);
		a2$$ = 82;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		a2 = set_double_select(value);
		a2$$ = 83;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		a2 = set_double_select(value);
		a2$$ = 84;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		a2 = set_double_select(value);
		a2$$ = 85;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		a2 = set_double_select(value);
		a2$$ = 86;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		a2 = set_double_select(value);
		a2$$ = 87;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		a2 = set_double_select(value);
		a2$$ = 88;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		a2 = set_double_select(value);
		a2$$ = 89;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		a2 = set_double_select(value);
		a2$$ = 90;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		a2 = set_double_select(value);
		a2$$ = 91;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		a2 = set_double_select(value);
		a2$$ = 92;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		a2 = set_double_select(value);
		a2$$ = 93;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		a2 = set_double_select(value);
		a2$$ = 94;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		a2 = set_double_select(value);
		a2$$ = 95;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		a2 = set_boolean_select(value);
		a2$$ = 96;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException { // case 97
		a2 = set_string(value);
		a2$$ = 97;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException { // case 98
		a2 = set_string(value);
		a2$$ = 98;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException { // case 99
		a2 = set_string(value);
		a2$$ = 99;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException { // case 100
		a2 = set_string(value);
		a2$$ = 100;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException { // case 101
		a2 = set_integer_select(value);
		a2$$ = 101;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException { // case 102
		a2 = set_string(value);
		a2$$ = 102;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException { // case 103
		a2 = set_logical_select(value);
		a2$$ = 103;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException { // case 104
		a2 = set_double_select(value);
		a2$$ = 104;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException { // case 105
		a2 = set_string(value);
		a2$$ = 105;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException { // case 106
		a2 = set_string(value);
		a2$$ = 106;
	}
	public void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException { // case 107
		a2 = set_integer_select(value);
		a2$$ = 107;
	}

	public void unsetUpperboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		a2 = unset_select(a2);
		a2$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeUpperboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5108=EXPLICIT_ATTRIBUTE('LowerBoundValue',#5105,1,#3223,$,.T.);
	//<01> generating methods for consolidated attribute:  LowerBoundValue
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: LowerBoundValue
	public int testLowerboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return test_select(a3, a3$$);
	}

	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return get_double_select(a3, a3$$, 2);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return get_double_select(a3, a3$$, 3);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return get_double_select(a3, a3$$, 4);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return get_double_select(a3, a3$$, 5);
	}
	public A_integer getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)get_aggregate_select(a3, a3$$, 6);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return get_double_select(a3, a3$$, 7);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return get_double_select(a3, a3$$, 8);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return get_double_select(a3, a3$$, 9);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return get_double_select(a3, a3$$, 10);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return get_double_select(a3, a3$$, 11);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return get_double_select(a3, a3$$, 12);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return get_double_select(a3, a3$$, 13);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return get_double_select(a3, a3$$, 14);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException { // case 15
		return get_double_select(a3, a3$$, 15);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException { // case 16
		return get_double_select(a3, a3$$, 16);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return get_double_select(a3, a3$$, 17);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return get_double_select(a3, a3$$, 18);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return get_double_select(a3, a3$$, 19);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return get_double_select(a3, a3$$, 20);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return get_double_select(a3, a3$$, 21);
	}
	public int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return get_integer_select(a3, a3$$, 22);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return get_double_select(a3, a3$$, 23);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return get_double_select(a3, a3$$, 24);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return get_double_select(a3, a3$$, 25);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return get_double_select(a3, a3$$, 26);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return get_double_select(a3, a3$$, 27);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return get_double_select(a3, a3$$, 28);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return get_double_select(a3, a3$$, 29);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return get_double_select(a3, a3$$, 30);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return get_double_select(a3, a3$$, 31);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return get_double_select(a3, a3$$, 32);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return get_double_select(a3, a3$$, 33);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return get_double_select(a3, a3$$, 34);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return get_double_select(a3, a3$$, 35);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return get_double_select(a3, a3$$, 36);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return get_double_select(a3, a3$$, 37);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return get_double_select(a3, a3$$, 38);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return get_double_select(a3, a3$$, 39);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return get_double_select(a3, a3$$, 40);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return get_double_select(a3, a3$$, 41);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return get_double_select(a3, a3$$, 42);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return get_double_select(a3, a3$$, 43);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return get_double_select(a3, a3$$, 44);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException { // case 45
		return get_double_select(a3, a3$$, 45);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return get_double_select(a3, a3$$, 46);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException { // case 47
		return get_double_select(a3, a3$$, 47);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return get_double_select(a3, a3$$, 48);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return get_double_select(a3, a3$$, 49);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return get_double_select(a3, a3$$, 50);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return get_double_select(a3, a3$$, 51);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return get_double_select(a3, a3$$, 52);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return get_double_select(a3, a3$$, 53);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return get_double_select(a3, a3$$, 54);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return get_double_select(a3, a3$$, 55);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return get_double_select(a3, a3$$, 56);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return get_double_select(a3, a3$$, 57);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return get_double_select(a3, a3$$, 58);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return get_double_select(a3, a3$$, 59);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return get_double_select(a3, a3$$, 60);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return get_double_select(a3, a3$$, 61);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return get_double_select(a3, a3$$, 62);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return get_double_select(a3, a3$$, 63);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return get_double_select(a3, a3$$, 64);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return get_double_select(a3, a3$$, 65);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return get_double_select(a3, a3$$, 66);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return get_double_select(a3, a3$$, 67);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException { // case 68
		return get_double_select(a3, a3$$, 68);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return get_double_select(a3, a3$$, 69);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return get_double_select(a3, a3$$, 70);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return get_double_select(a3, a3$$, 71);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return get_double_select(a3, a3$$, 72);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return get_double_select(a3, a3$$, 73);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException { // case 74
		return get_double_select(a3, a3$$, 74);
	}
	public A_double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)get_aggregate_select(a3, a3$$, 75);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return get_double_select(a3, a3$$, 76);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException { // case 77
		return get_double_select(a3, a3$$, 77);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return get_string_select(a3, a3$$, 78);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return get_double_select(a3, a3$$, 79);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException { // case 80
		return get_double_select(a3, a3$$, 80);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return get_double_select(a3, a3$$, 81);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException { // case 82
		return get_double_select(a3, a3$$, 82);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return get_double_select(a3, a3$$, 83);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return get_double_select(a3, a3$$, 84);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return get_double_select(a3, a3$$, 85);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException { // case 86
		return get_double_select(a3, a3$$, 86);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return get_double_select(a3, a3$$, 87);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return get_double_select(a3, a3$$, 88);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return get_double_select(a3, a3$$, 89);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return get_double_select(a3, a3$$, 90);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException { // case 91
		return get_double_select(a3, a3$$, 91);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return get_double_select(a3, a3$$, 92);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return get_double_select(a3, a3$$, 93);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException { // case 94
		return get_double_select(a3, a3$$, 94);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return get_double_select(a3, a3$$, 95);
	}
	public boolean getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException { // case 96
		return get_boolean_select(a3, a3$$, 96);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException { // case 97
		return get_string_select(a3, a3$$, 97);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException { // case 98
		return get_string_select(a3, a3$$, 98);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException { // case 99
		return get_string_select(a3, a3$$, 99);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException { // case 100
		return get_string_select(a3, a3$$, 100);
	}
	public int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException { // case 101
		return get_integer_select(a3, a3$$, 101);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException { // case 102
		return get_string_select(a3, a3$$, 102);
	}
	public int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException { // case 103
		return get_logical_select(a3, a3$$, 103);
	}
	public double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException { // case 104
		return get_double_select(a3, a3$$, 104);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException { // case 105
		return get_string_select(a3, a3$$, 105);
	}
	public String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException { // case 106
		return get_string_select(a3, a3$$, 106);
	}
	public int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException { // case 107
		return get_integer_select(a3, a3$$, 107);
	}

	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		a3 = set_double_select(value);
		a3$$ = 2;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		a3 = set_double_select(value);
		a3$$ = 3;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		a3 = set_double_select(value);
		a3$$ = 4;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		a3 = set_double_select(value);
		a3$$ = 5;
	}
	public A_integer createLowerboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		a3 = create_aggregate_integer((A_integer)a3, a3$, a3$$ = 6);
		return (A_integer)a3;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		a3 = set_double_select(value);
		a3$$ = 7;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		a3 = set_double_select(value);
		a3$$ = 8;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		a3 = set_double_select(value);
		a3$$ = 9;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		a3 = set_double_select(value);
		a3$$ = 10;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		a3 = set_double_select(value);
		a3$$ = 11;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		a3 = set_double_select(value);
		a3$$ = 12;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		a3 = set_double_select(value);
		a3$$ = 13;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		a3 = set_double_select(value);
		a3$$ = 14;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		a3 = set_double_select(value);
		a3$$ = 15;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		a3 = set_double_select(value);
		a3$$ = 16;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		a3 = set_double_select(value);
		a3$$ = 17;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		a3 = set_double_select(value);
		a3$$ = 18;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		a3 = set_double_select(value);
		a3$$ = 19;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		a3 = set_double_select(value);
		a3$$ = 20;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		a3 = set_double_select(value);
		a3$$ = 21;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		a3 = set_integer_select(value);
		a3$$ = 22;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		a3 = set_double_select(value);
		a3$$ = 23;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		a3 = set_double_select(value);
		a3$$ = 24;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		a3 = set_double_select(value);
		a3$$ = 25;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		a3 = set_double_select(value);
		a3$$ = 26;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		a3 = set_double_select(value);
		a3$$ = 27;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		a3 = set_double_select(value);
		a3$$ = 28;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		a3 = set_double_select(value);
		a3$$ = 29;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		a3 = set_double_select(value);
		a3$$ = 30;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		a3 = set_double_select(value);
		a3$$ = 31;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		a3 = set_double_select(value);
		a3$$ = 32;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		a3 = set_double_select(value);
		a3$$ = 33;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		a3 = set_double_select(value);
		a3$$ = 34;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		a3 = set_double_select(value);
		a3$$ = 35;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		a3 = set_double_select(value);
		a3$$ = 36;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		a3 = set_double_select(value);
		a3$$ = 37;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		a3 = set_double_select(value);
		a3$$ = 38;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		a3 = set_double_select(value);
		a3$$ = 39;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		a3 = set_double_select(value);
		a3$$ = 40;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		a3 = set_double_select(value);
		a3$$ = 41;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		a3 = set_double_select(value);
		a3$$ = 42;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		a3 = set_double_select(value);
		a3$$ = 43;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		a3 = set_double_select(value);
		a3$$ = 44;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		a3 = set_double_select(value);
		a3$$ = 45;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		a3 = set_double_select(value);
		a3$$ = 46;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		a3 = set_double_select(value);
		a3$$ = 47;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		a3 = set_double_select(value);
		a3$$ = 48;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		a3 = set_double_select(value);
		a3$$ = 49;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		a3 = set_double_select(value);
		a3$$ = 50;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		a3 = set_double_select(value);
		a3$$ = 51;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		a3 = set_double_select(value);
		a3$$ = 52;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		a3 = set_double_select(value);
		a3$$ = 53;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		a3 = set_double_select(value);
		a3$$ = 54;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		a3 = set_double_select(value);
		a3$$ = 55;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		a3 = set_double_select(value);
		a3$$ = 56;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		a3 = set_double_select(value);
		a3$$ = 57;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		a3 = set_double_select(value);
		a3$$ = 58;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		a3 = set_double_select(value);
		a3$$ = 59;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		a3 = set_double_select(value);
		a3$$ = 60;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		a3 = set_double_select(value);
		a3$$ = 61;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		a3 = set_double_select(value);
		a3$$ = 62;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		a3 = set_double_select(value);
		a3$$ = 63;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		a3 = set_double_select(value);
		a3$$ = 64;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		a3 = set_double_select(value);
		a3$$ = 65;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		a3 = set_double_select(value);
		a3$$ = 66;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		a3 = set_double_select(value);
		a3$$ = 67;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		a3 = set_double_select(value);
		a3$$ = 68;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		a3 = set_double_select(value);
		a3$$ = 69;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		a3 = set_double_select(value);
		a3$$ = 70;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		a3 = set_double_select(value);
		a3$$ = 71;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		a3 = set_double_select(value);
		a3$$ = 72;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		a3 = set_double_select(value);
		a3$$ = 73;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException { // case 74
		a3 = set_double_select(value);
		a3$$ = 74;
	}
	public A_double createLowerboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		a3 = create_aggregate_double((A_double)a3, a3$, a3$$ = 75);
		return (A_double)a3;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		a3 = set_double_select(value);
		a3$$ = 76;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		a3 = set_double_select(value);
		a3$$ = 77;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		a3 = set_string(value);
		a3$$ = 78;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		a3 = set_double_select(value);
		a3$$ = 79;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		a3 = set_double_select(value);
		a3$$ = 80;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		a3 = set_double_select(value);
		a3$$ = 81;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		a3 = set_double_select(value);
		a3$$ = 82;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		a3 = set_double_select(value);
		a3$$ = 83;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		a3 = set_double_select(value);
		a3$$ = 84;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		a3 = set_double_select(value);
		a3$$ = 85;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		a3 = set_double_select(value);
		a3$$ = 86;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		a3 = set_double_select(value);
		a3$$ = 87;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		a3 = set_double_select(value);
		a3$$ = 88;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		a3 = set_double_select(value);
		a3$$ = 89;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		a3 = set_double_select(value);
		a3$$ = 90;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		a3 = set_double_select(value);
		a3$$ = 91;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		a3 = set_double_select(value);
		a3$$ = 92;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		a3 = set_double_select(value);
		a3$$ = 93;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		a3 = set_double_select(value);
		a3$$ = 94;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		a3 = set_double_select(value);
		a3$$ = 95;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		a3 = set_boolean_select(value);
		a3$$ = 96;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException { // case 97
		a3 = set_string(value);
		a3$$ = 97;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException { // case 98
		a3 = set_string(value);
		a3$$ = 98;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException { // case 99
		a3 = set_string(value);
		a3$$ = 99;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException { // case 100
		a3 = set_string(value);
		a3$$ = 100;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException { // case 101
		a3 = set_integer_select(value);
		a3$$ = 101;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException { // case 102
		a3 = set_string(value);
		a3$$ = 102;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException { // case 103
		a3 = set_logical_select(value);
		a3$$ = 103;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException { // case 104
		a3 = set_double_select(value);
		a3$$ = 104;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException { // case 105
		a3 = set_string(value);
		a3$$ = 105;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException { // case 106
		a3 = set_string(value);
		a3$$ = 106;
	}
	public void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException { // case 107
		a3 = set_integer_select(value);
		a3$$ = 107;
	}

	public void unsetLowerboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		a3 = unset_select(a3);
		a3$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeLowerboundvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #5109=EXPLICIT_ATTRIBUTE('Unit',#5105,2,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  Unit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: Unit
	public static int usedinUnit(EIfcpropertyboundedvalue type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	public boolean testUnit(EIfcpropertyboundedvalue type) throws SdaiException {
		return test_instance(a4);
	}

	public EEntity getUnit(EIfcpropertyboundedvalue type) throws SdaiException { // case 1
		return get_instance_select(a4);
	}

	public void setUnit(EIfcpropertyboundedvalue type, EEntity value) throws SdaiException { // case 1
		a4 = set_instance(a4, value);
	}

	public void unsetUnit(EIfcpropertyboundedvalue type) throws SdaiException {
		a4 = unset_instance(a4);
	}

	public static jsdai.dictionary.EAttribute attributeUnit(EIfcpropertyboundedvalue type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #5110=EXPLICIT_ATTRIBUTE('SetPointValue',#5105,3,#3223,$,.T.);
	//<01> generating methods for consolidated attribute:  SetPointValue
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: SetPointValue
	public int testSetpointvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return test_select(a5, a5$$);
	}

	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		return get_double_select(a5, a5$$, 2);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		return get_double_select(a5, a5$$, 3);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		return get_double_select(a5, a5$$, 4);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		return get_double_select(a5, a5$$, 5);
	}
	public A_integer getSetpointvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		return (A_integer)get_aggregate_select(a5, a5$$, 6);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		return get_double_select(a5, a5$$, 7);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		return get_double_select(a5, a5$$, 8);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		return get_double_select(a5, a5$$, 9);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		return get_double_select(a5, a5$$, 10);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		return get_double_select(a5, a5$$, 11);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		return get_double_select(a5, a5$$, 12);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		return get_double_select(a5, a5$$, 13);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		return get_double_select(a5, a5$$, 14);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException { // case 15
		return get_double_select(a5, a5$$, 15);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException { // case 16
		return get_double_select(a5, a5$$, 16);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		return get_double_select(a5, a5$$, 17);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		return get_double_select(a5, a5$$, 18);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		return get_double_select(a5, a5$$, 19);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		return get_double_select(a5, a5$$, 20);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException { // case 21
		return get_double_select(a5, a5$$, 21);
	}
	public int getSetpointvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		return get_integer_select(a5, a5$$, 22);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		return get_double_select(a5, a5$$, 23);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		return get_double_select(a5, a5$$, 24);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		return get_double_select(a5, a5$$, 25);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		return get_double_select(a5, a5$$, 26);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		return get_double_select(a5, a5$$, 27);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		return get_double_select(a5, a5$$, 28);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		return get_double_select(a5, a5$$, 29);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		return get_double_select(a5, a5$$, 30);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		return get_double_select(a5, a5$$, 31);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		return get_double_select(a5, a5$$, 32);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		return get_double_select(a5, a5$$, 33);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		return get_double_select(a5, a5$$, 34);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		return get_double_select(a5, a5$$, 35);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		return get_double_select(a5, a5$$, 36);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		return get_double_select(a5, a5$$, 37);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		return get_double_select(a5, a5$$, 38);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		return get_double_select(a5, a5$$, 39);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		return get_double_select(a5, a5$$, 40);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		return get_double_select(a5, a5$$, 41);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		return get_double_select(a5, a5$$, 42);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		return get_double_select(a5, a5$$, 43);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		return get_double_select(a5, a5$$, 44);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException { // case 45
		return get_double_select(a5, a5$$, 45);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		return get_double_select(a5, a5$$, 46);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException { // case 47
		return get_double_select(a5, a5$$, 47);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException { // case 48
		return get_double_select(a5, a5$$, 48);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		return get_double_select(a5, a5$$, 49);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		return get_double_select(a5, a5$$, 50);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		return get_double_select(a5, a5$$, 51);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		return get_double_select(a5, a5$$, 52);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		return get_double_select(a5, a5$$, 53);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		return get_double_select(a5, a5$$, 54);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		return get_double_select(a5, a5$$, 55);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		return get_double_select(a5, a5$$, 56);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		return get_double_select(a5, a5$$, 57);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		return get_double_select(a5, a5$$, 58);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		return get_double_select(a5, a5$$, 59);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		return get_double_select(a5, a5$$, 60);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		return get_double_select(a5, a5$$, 61);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		return get_double_select(a5, a5$$, 62);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		return get_double_select(a5, a5$$, 63);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		return get_double_select(a5, a5$$, 64);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		return get_double_select(a5, a5$$, 65);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		return get_double_select(a5, a5$$, 66);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		return get_double_select(a5, a5$$, 67);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException { // case 68
		return get_double_select(a5, a5$$, 68);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		return get_double_select(a5, a5$$, 69);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		return get_double_select(a5, a5$$, 70);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		return get_double_select(a5, a5$$, 71);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		return get_double_select(a5, a5$$, 72);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		return get_double_select(a5, a5$$, 73);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException { // case 74
		return get_double_select(a5, a5$$, 74);
	}
	public A_double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		return (A_double)get_aggregate_select(a5, a5$$, 75);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		return get_double_select(a5, a5$$, 76);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException { // case 77
		return get_double_select(a5, a5$$, 77);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		return get_string_select(a5, a5$$, 78);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		return get_double_select(a5, a5$$, 79);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException { // case 80
		return get_double_select(a5, a5$$, 80);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		return get_double_select(a5, a5$$, 81);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException { // case 82
		return get_double_select(a5, a5$$, 82);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		return get_double_select(a5, a5$$, 83);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		return get_double_select(a5, a5$$, 84);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException { // case 85
		return get_double_select(a5, a5$$, 85);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException { // case 86
		return get_double_select(a5, a5$$, 86);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		return get_double_select(a5, a5$$, 87);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		return get_double_select(a5, a5$$, 88);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		return get_double_select(a5, a5$$, 89);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		return get_double_select(a5, a5$$, 90);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException { // case 91
		return get_double_select(a5, a5$$, 91);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		return get_double_select(a5, a5$$, 92);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		return get_double_select(a5, a5$$, 93);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException { // case 94
		return get_double_select(a5, a5$$, 94);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException { // case 95
		return get_double_select(a5, a5$$, 95);
	}
	public boolean getSetpointvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException { // case 96
		return get_boolean_select(a5, a5$$, 96);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException { // case 97
		return get_string_select(a5, a5$$, 97);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException { // case 98
		return get_string_select(a5, a5$$, 98);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException { // case 99
		return get_string_select(a5, a5$$, 99);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException { // case 100
		return get_string_select(a5, a5$$, 100);
	}
	public int getSetpointvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException { // case 101
		return get_integer_select(a5, a5$$, 101);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException { // case 102
		return get_string_select(a5, a5$$, 102);
	}
	public int getSetpointvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException { // case 103
		return get_logical_select(a5, a5$$, 103);
	}
	public double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException { // case 104
		return get_double_select(a5, a5$$, 104);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException { // case 105
		return get_string_select(a5, a5$$, 105);
	}
	public String getSetpointvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException { // case 106
		return get_string_select(a5, a5$$, 106);
	}
	public int getSetpointvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException { // case 107
		return get_integer_select(a5, a5$$, 107);
	}

	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException { // case 2
		a5 = set_double_select(value);
		a5$$ = 2;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException { // case 3
		a5 = set_double_select(value);
		a5$$ = 3;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException { // case 4
		a5 = set_double_select(value);
		a5$$ = 4;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException { // case 5
		a5 = set_double_select(value);
		a5$$ = 5;
	}
	public A_integer createSetpointvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException { // case 6
		a5 = create_aggregate_integer((A_integer)a5, a5$, a5$$ = 6);
		return (A_integer)a5;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException { // case 7
		a5 = set_double_select(value);
		a5$$ = 7;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException { // case 8
		a5 = set_double_select(value);
		a5$$ = 8;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException { // case 9
		a5 = set_double_select(value);
		a5$$ = 9;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException { // case 10
		a5 = set_double_select(value);
		a5$$ = 10;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException { // case 11
		a5 = set_double_select(value);
		a5$$ = 11;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException { // case 12
		a5 = set_double_select(value);
		a5$$ = 12;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException { // case 13
		a5 = set_double_select(value);
		a5$$ = 13;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException { // case 14
		a5 = set_double_select(value);
		a5$$ = 14;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException { // case 15
		a5 = set_double_select(value);
		a5$$ = 15;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException { // case 16
		a5 = set_double_select(value);
		a5$$ = 16;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException { // case 17
		a5 = set_double_select(value);
		a5$$ = 17;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException { // case 18
		a5 = set_double_select(value);
		a5$$ = 18;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException { // case 19
		a5 = set_double_select(value);
		a5$$ = 19;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException { // case 20
		a5 = set_double_select(value);
		a5$$ = 20;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException { // case 21
		a5 = set_double_select(value);
		a5$$ = 21;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException { // case 22
		a5 = set_integer_select(value);
		a5$$ = 22;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException { // case 23
		a5 = set_double_select(value);
		a5$$ = 23;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException { // case 24
		a5 = set_double_select(value);
		a5$$ = 24;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException { // case 25
		a5 = set_double_select(value);
		a5$$ = 25;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException { // case 26
		a5 = set_double_select(value);
		a5$$ = 26;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException { // case 27
		a5 = set_double_select(value);
		a5$$ = 27;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 28
		a5 = set_double_select(value);
		a5$$ = 28;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException { // case 29
		a5 = set_double_select(value);
		a5$$ = 29;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException { // case 30
		a5 = set_double_select(value);
		a5$$ = 30;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException { // case 31
		a5 = set_double_select(value);
		a5$$ = 31;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException { // case 32
		a5 = set_double_select(value);
		a5$$ = 32;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException { // case 33
		a5 = set_double_select(value);
		a5$$ = 33;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException { // case 34
		a5 = set_double_select(value);
		a5$$ = 34;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException { // case 35
		a5 = set_double_select(value);
		a5$$ = 35;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException { // case 36
		a5 = set_double_select(value);
		a5$$ = 36;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException { // case 37
		a5 = set_double_select(value);
		a5$$ = 37;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException { // case 38
		a5 = set_double_select(value);
		a5$$ = 38;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException { // case 39
		a5 = set_double_select(value);
		a5$$ = 39;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException { // case 40
		a5 = set_double_select(value);
		a5$$ = 40;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException { // case 41
		a5 = set_double_select(value);
		a5$$ = 41;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException { // case 42
		a5 = set_double_select(value);
		a5$$ = 42;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException { // case 43
		a5 = set_double_select(value);
		a5$$ = 43;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException { // case 44
		a5 = set_double_select(value);
		a5$$ = 44;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException { // case 45
		a5 = set_double_select(value);
		a5$$ = 45;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException { // case 46
		a5 = set_double_select(value);
		a5$$ = 46;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException { // case 47
		a5 = set_double_select(value);
		a5$$ = 47;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException { // case 48
		a5 = set_double_select(value);
		a5$$ = 48;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException { // case 49
		a5 = set_double_select(value);
		a5$$ = 49;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException { // case 50
		a5 = set_double_select(value);
		a5$$ = 50;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException { // case 51
		a5 = set_double_select(value);
		a5$$ = 51;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 52
		a5 = set_double_select(value);
		a5$$ = 52;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException { // case 53
		a5 = set_double_select(value);
		a5$$ = 53;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException { // case 54
		a5 = set_double_select(value);
		a5$$ = 54;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException { // case 55
		a5 = set_double_select(value);
		a5$$ = 55;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException { // case 56
		a5 = set_double_select(value);
		a5$$ = 56;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException { // case 57
		a5 = set_double_select(value);
		a5$$ = 57;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException { // case 58
		a5 = set_double_select(value);
		a5$$ = 58;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException { // case 59
		a5 = set_double_select(value);
		a5$$ = 59;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException { // case 60
		a5 = set_double_select(value);
		a5$$ = 60;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException { // case 61
		a5 = set_double_select(value);
		a5$$ = 61;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException { // case 62
		a5 = set_double_select(value);
		a5$$ = 62;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException { // case 63
		a5 = set_double_select(value);
		a5$$ = 63;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException { // case 64
		a5 = set_double_select(value);
		a5$$ = 64;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException { // case 65
		a5 = set_double_select(value);
		a5$$ = 65;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException { // case 66
		a5 = set_double_select(value);
		a5$$ = 66;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException { // case 67
		a5 = set_double_select(value);
		a5$$ = 67;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException { // case 68
		a5 = set_double_select(value);
		a5$$ = 68;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException { // case 69
		a5 = set_double_select(value);
		a5$$ = 69;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException { // case 70
		a5 = set_double_select(value);
		a5$$ = 70;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException { // case 71
		a5 = set_double_select(value);
		a5$$ = 71;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException { // case 72
		a5 = set_double_select(value);
		a5$$ = 72;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException { // case 73
		a5 = set_double_select(value);
		a5$$ = 73;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException { // case 74
		a5 = set_double_select(value);
		a5$$ = 74;
	}
	public A_double createSetpointvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException { // case 75
		a5 = create_aggregate_double((A_double)a5, a5$, a5$$ = 75);
		return (A_double)a5;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException { // case 76
		a5 = set_double_select(value);
		a5$$ = 76;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException { // case 77
		a5 = set_double_select(value);
		a5$$ = 77;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 78
		a5 = set_string(value);
		a5$$ = 78;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException { // case 79
		a5 = set_double_select(value);
		a5$$ = 79;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException { // case 80
		a5 = set_double_select(value);
		a5$$ = 80;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException { // case 81
		a5 = set_double_select(value);
		a5$$ = 81;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException { // case 82
		a5 = set_double_select(value);
		a5$$ = 82;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException { // case 83
		a5 = set_double_select(value);
		a5$$ = 83;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 84
		a5 = set_double_select(value);
		a5$$ = 84;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException { // case 85
		a5 = set_double_select(value);
		a5$$ = 85;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException { // case 86
		a5 = set_double_select(value);
		a5$$ = 86;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException { // case 87
		a5 = set_double_select(value);
		a5$$ = 87;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 88
		a5 = set_double_select(value);
		a5$$ = 88;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException { // case 89
		a5 = set_double_select(value);
		a5$$ = 89;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 90
		a5 = set_double_select(value);
		a5$$ = 90;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException { // case 91
		a5 = set_double_select(value);
		a5$$ = 91;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException { // case 92
		a5 = set_double_select(value);
		a5$$ = 92;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException { // case 93
		a5 = set_double_select(value);
		a5$$ = 93;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException { // case 94
		a5 = set_double_select(value);
		a5$$ = 94;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException { // case 95
		a5 = set_double_select(value);
		a5$$ = 95;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException { // case 96
		a5 = set_boolean_select(value);
		a5$$ = 96;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException { // case 97
		a5 = set_string(value);
		a5$$ = 97;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException { // case 98
		a5 = set_string(value);
		a5$$ = 98;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException { // case 99
		a5 = set_string(value);
		a5$$ = 99;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException { // case 100
		a5 = set_string(value);
		a5$$ = 100;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException { // case 101
		a5 = set_integer_select(value);
		a5$$ = 101;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException { // case 102
		a5 = set_string(value);
		a5$$ = 102;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException { // case 103
		a5 = set_logical_select(value);
		a5$$ = 103;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException { // case 104
		a5 = set_double_select(value);
		a5$$ = 104;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException { // case 105
		a5 = set_string(value);
		a5$$ = 105;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException { // case 106
		a5 = set_string(value);
		a5$$ = 106;
	}
	public void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException { // case 107
		a5 = set_integer_select(value);
		a5$$ = 107;
	}

	public void unsetSetpointvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		a5 = unset_select(a5);
		a5$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeSetpointvalue(EIfcpropertyboundedvalue type) throws SdaiException {
		return a5$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_select(a3);
			a3$$ = 0;
			a4 = unset_instance(a4);
			a5 = unset_select(a5);
			a5$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[2].getMixed(0,a2$, this);
		a2$$ = av.entityValues[2].getSelectNumber();
		a3 = av.entityValues[2].getMixed(1,a3$, this);
		a3$$ = av.entityValues[2].getSelectNumber();
		a4 = av.entityValues[2].getInstance(2, this, a4$);
		a5 = av.entityValues[2].getMixed(3,a5$, this);
		a5$$ = av.entityValues[2].getSelectNumber();
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_select(a3);
			a3$$ = 0;
			a4 = unset_instance(a4);
			a5 = unset_select(a5);
			a5$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[2].getMixed(0,a2$, this);
		a2$$ = av.entityValues[2].getSelectNumber();
		a3 = av.entityValues[2].getMixed(1,a3$, this);
		a3$$ = av.entityValues[2].getSelectNumber();
		a4 = av.entityValues[2].getInstance(2, this, a4$);
		a5 = av.entityValues[2].getMixed(3,a5$, this);
		a5$$ = av.entityValues[2].getSelectNumber();
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyBoundedValue
		av.entityValues[2].setMixed(0, a2, a2$, a2$$);
		av.entityValues[2].setMixed(1, a3, a3$, a3$$);
		av.entityValues[2].setInstance(2, a4);
		av.entityValues[2].setMixed(3, a5, a5$, a5$$);
		// partial entity: IfcSimpleProperty
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyBoundedValue
		av.entityValues[2].setMixed(0, a2, a2$, a2$$);
		av.entityValues[2].setMixed(1, a3, a3$, a3$$);
		av.entityValues[2].setInstance(2, a4);
		av.entityValues[2].setMixed(3, a5, a5$, a5$$);
		// partial entity: IfcSimpleProperty
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertyboundedvalueSameunitupperset(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a5$))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a2$)).typeOfV(_context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a5$)).typeOfV(_context)))).getLogical());
	}
	public int rIfcpropertyboundedvalueSameunitlowerset(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a5$))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a3$)).typeOfV(_context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a5$)).typeOfV(_context)))).getLogical());
	}
	public int rIfcpropertyboundedvalueSameunitupperlower(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a3$))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a2$)).typeOfV(_context), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcValue).set(_context, get(a3$)).typeOfV(_context)))).getLogical());
	}
}
