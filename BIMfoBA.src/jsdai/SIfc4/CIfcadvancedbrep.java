/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcAdvancedBrep

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcadvancedbrep extends CIfcmanifoldsolidbrep implements EIfcadvancedbrep {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcadvancedbrep.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Outer: protected Object a0;   Outer - java inheritance - ENTITY IfcClosedShell
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Outer - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected Object a0;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5730=DERIVED_ATTRIBUTE('Dim',#5728,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcsolidmodel type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcsolidmodel type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3));
	}
	public int getDim(EIfcsolidmodel type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcsolidmodel)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcsolidmodel type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #4618=EXPLICIT_ATTRIBUTE('Outer',#4616,0,#3642,$,.F.);
	//<01> generating methods for consolidated attribute:  Outer
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): Outer, base type: entity IfcClosedShell
	public static int usedinOuter(EIfcmanifoldsolidbrep type, EIfcclosedshell instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}

	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAdvancedBrep
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcManifoldSolidBrep
		av.entityValues[2].setInstance(0, a0);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSolidModel
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAdvancedBrep
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcManifoldSolidBrep
		av.entityValues[2].setInstance(0, a0);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSolidModel
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcadvancedbrepHasadvancedfaces(SdaiContext _context) throws SdaiException {
	




									
									Value _internal_aggregate_source4 = Value.alloc(jsdai.SIfc4.CIfcadvancedbrep.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcmanifoldsolidbrep.class).getAttribute(jsdai.SIfc4.CIfcmanifoldsolidbrep.attributeOuter(null), _context).getAttribute(jsdai.SIfc4.CIfcconnectedfaceset.attributeCfsfaces(null), _context);
									Value _result2 = Value.alloc(_internal_aggregate_source4).create();
									if (_internal_aggregate_source4.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i3 = 1; _i3 <= _internal_aggregate_source4.getMemberCount(); _i3++) {
											Value _implicit_1_Afs = _internal_aggregate_source4.getByIndex(_i3);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCADVANCEDFACE", "IFC4"), _implicit_1_Afs.typeOfV(_context))).getLogical() == 2) {
												_result2.addMember(_context, _implicit_1_Afs);
											} else
											if (_internal_aggregate_source4.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_1_Afs.unset();
												_result2.addMember(_context, _implicit_1_Afs);
											}
										}
									} else {
										_result2.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result2), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
