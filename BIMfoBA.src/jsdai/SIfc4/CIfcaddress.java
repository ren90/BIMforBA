/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcAddress

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcaddress extends CEntity implements EIfcaddress {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcaddress.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected int a0; // Purpose - current entity - ENUMERATION IfcAddressTypeEnum
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // Description - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // UserDefinedPurpose - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// OfPerson: protected Object  - inverse - current -  ENTITY IfcPerson
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// OfOrganization: protected Object  - inverse - current -  ENTITY IfcOrganization
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Purpose - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected int a0;
	// Description - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// UserDefinedPurpose - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// OfPerson - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// OfOrganization - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3252=EXPLICIT_ATTRIBUTE('Purpose',#3250,0,#2707,$,.T.);
	//<01> generating methods for consolidated attribute:  Purpose
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:Purpose, base type: ENUMERATION
	public boolean testPurpose(EIfcaddress type) throws SdaiException {
		return test_enumeration(a0);
	}
	public int getPurpose(EIfcaddress type) throws SdaiException {
		return get_enumeration(a0);
	}
	public void setPurpose(EIfcaddress type, int value) throws SdaiException {
		a0 = set_enumeration(value, a0$);
	}
	public void unsetPurpose(EIfcaddress type) throws SdaiException {
		a0 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributePurpose(EIfcaddress type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3253=EXPLICIT_ATTRIBUTE('Description',#3250,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Description, base type: STRING
	public boolean testDescription(EIfcaddress type) throws SdaiException {
		return test_string(a1);
	}
	public String getDescription(EIfcaddress type) throws SdaiException {
		return get_string(a1);
	}
	public void setDescription(EIfcaddress type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetDescription(EIfcaddress type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeDescription(EIfcaddress type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3254=EXPLICIT_ATTRIBUTE('UserDefinedPurpose',#3250,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UserDefinedPurpose
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: UserDefinedPurpose, base type: STRING
	public boolean testUserdefinedpurpose(EIfcaddress type) throws SdaiException {
		return test_string(a2);
	}
	public String getUserdefinedpurpose(EIfcaddress type) throws SdaiException {
		return get_string(a2);
	}
	public void setUserdefinedpurpose(EIfcaddress type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetUserdefinedpurpose(EIfcaddress type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeUserdefinedpurpose(EIfcaddress type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3255=INVERSE_ATTRIBUTE('OfPerson',#3250,0,#4894,$,#4903,#7536,$,.F.);
	//<01> generating methods for consolidated attribute:  OfPerson
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - OfPerson : SET[0:-2147483648] OF IfcPerson FOR Addresses
	public AIfcperson getOfperson(EIfcaddress type, ASdaiModel domain) throws SdaiException {
		AIfcperson result = (AIfcperson)get_inverse_aggregate(i0$);
		CIfcperson.usedinAddresses(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeOfperson(EIfcaddress type) throws SdaiException {
		return i0$;
	}

	//going through all the attributes: #3256=INVERSE_ATTRIBUTE('OfOrganization',#3250,1,#4830,$,#4836,#7538,$,.F.);
	//<01> generating methods for consolidated attribute:  OfOrganization
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - OfOrganization : SET[0:-2147483648] OF IfcOrganization FOR Addresses
	public AIfcorganization getOforganization(EIfcaddress type, ASdaiModel domain) throws SdaiException {
		AIfcorganization result = (AIfcorganization)get_inverse_aggregate(i1$);
		CIfcorganization.usedinAddresses(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeOforganization(EIfcaddress type) throws SdaiException {
		return i1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = 0;
			a1 = null;
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getEnumeration(0, a0$);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = 0;
			a1 = null;
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getEnumeration(0, a0$);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAddress
		av.entityValues[0].setEnumeration(0, a0, a0$);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAddress
		av.entityValues[0].setEnumeration(0, a0, a0$);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcaddressWr1(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAddressTypeEnum).set(_context, get(a0$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAddressTypeEnum).set(_context, get(a0$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAddressTypeEnum).setEnum(_context, "USERDEFINED")), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAddressTypeEnum).set(_context, get(a0$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcAddressTypeEnum).setEnum(_context, "USERDEFINED")), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfcaddress.definition).set(_context, this).getAttribute(a2$, _context)))))).getLogical());
	}
}
