/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertyEnumeration

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertyenumeration extends CIfcpropertyabstraction implements EIfcpropertyenumeration {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertyenumeration.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	protected String a0; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcvalue a1; // EnumerationValues - current entity - LIST OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // Unit - current entity - SELECT IfcUnit
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// EnumerationValues - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcvalue a1;
	// Unit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a2 == old) {
			a2 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a2 == old) {
			a2 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5104=INVERSE_ATTRIBUTE('HasExternalReferences',#5102,0,#4231,$,#4234,#8918,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5126=EXPLICIT_ATTRIBUTE('Name',#5124,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfcpropertyenumeration type) throws SdaiException {
		return test_string(a0);
	}
	public String getName(EIfcpropertyenumeration type) throws SdaiException {
		return get_string(a0);
	}
	public void setName(EIfcpropertyenumeration type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetName(EIfcpropertyenumeration type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfcpropertyenumeration type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #5127=EXPLICIT_ATTRIBUTE('EnumerationValues',#5124,1,#7041,$,.F.);
	//<01> generating methods for consolidated attribute:  EnumerationValues
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: EnumerationValues, base type: LIST OF SELECT
	public boolean testEnumerationvalues(EIfcpropertyenumeration type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfcvalue getEnumerationvalues(EIfcpropertyenumeration type) throws SdaiException {
		if (a1 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a1;
	}
	public AIfcvalue createEnumerationvalues(EIfcpropertyenumeration type) throws SdaiException {
		a1 = (AIfcvalue)create_aggregate_class(a1, a1$, AIfcvalue.class, 0);
		return a1;
	}
	public void unsetEnumerationvalues(EIfcpropertyenumeration type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeEnumerationvalues(EIfcpropertyenumeration type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5128=EXPLICIT_ATTRIBUTE('Unit',#5124,2,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  Unit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: Unit
	public static int usedinUnit(EIfcpropertyenumeration type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testUnit(EIfcpropertyenumeration type) throws SdaiException {
		return test_instance(a2);
	}

	public EEntity getUnit(EIfcpropertyenumeration type) throws SdaiException { // case 1
		return get_instance_select(a2);
	}

	public void setUnit(EIfcpropertyenumeration type, EEntity value) throws SdaiException { // case 1
		a2 = set_instance(a2, value);
	}

	public void unsetUnit(EIfcpropertyenumeration type) throws SdaiException {
		a2 = unset_instance(a2);
	}

	public static jsdai.dictionary.EAttribute attributeUnit(EIfcpropertyenumeration type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = unset_instance(a2);
			return;
		}
		a0 = av.entityValues[1].getString(0);
		a1 = (AIfcvalue)av.entityValues[1].getMixedAggregate(1, a1$, this);
		a2 = av.entityValues[1].getInstance(2, this, a2$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = unset_instance(a2);
			return;
		}
		a0 = av.entityValues[1].getString(0);
		a1 = (AIfcvalue)av.entityValues[1].getMixedAggregate(1, a1$, this);
		a2 = av.entityValues[1].getInstance(2, this, a2$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyEnumeration
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setMixedAggregate(1, a1, a1$);
		av.entityValues[1].setInstance(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyEnumeration
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setMixedAggregate(1, a1, a1$);
		av.entityValues[1].setInstance(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertyenumerationWr01(SdaiContext _context) throws SdaiException {
	




									
									Value _internal_aggregate_source182 = Value.alloc(jsdai.SIfc4.CIfcpropertyenumeration.definition).set(_context, this).getAttribute(a1$, _context);
									Value _result180 = Value.alloc(_internal_aggregate_source182).create();
									if (_internal_aggregate_source182.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i181 = 1; _i181 <= _internal_aggregate_source182.getMemberCount(); _i181++) {
											Value _implicit_42_temp = _internal_aggregate_source182.getByIndex(_i181);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfcpropertyenumeration.definition).set(_context, this).getAttribute("enumerationvalues", _context).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).typeOfV(_context), _implicit_42_temp.typeOfV(_context))).getLogical() == 2) {
												_result180.addMember(_context, _implicit_42_temp);
											} else
											if (_internal_aggregate_source182.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_42_temp.unset();
												_result180.addMember(_context, _implicit_42_temp);
											}
										}
									} else {
										_result180.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result180), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
