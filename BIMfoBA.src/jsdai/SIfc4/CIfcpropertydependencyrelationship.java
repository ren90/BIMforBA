/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertyDependencyRelationship

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertydependencyrelationship extends CIfcresourcelevelrelationship implements EIfcpropertydependencyrelationship {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertydependencyrelationship.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	protected Object a2; // DependingProperty - current entity - ENTITY IfcProperty
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a3; // DependantProperty - current entity - ENTITY IfcProperty
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // Expression - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// DependingProperty - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	// DependantProperty - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// Expression - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a2 == old) {
			a2 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5575=EXPLICIT_ATTRIBUTE('Name',#5573,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5576=EXPLICIT_ATTRIBUTE('Description',#5573,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5117=EXPLICIT_ATTRIBUTE('DependingProperty',#5115,0,#5094,$,.F.);
	//<01> generating methods for consolidated attribute:  DependingProperty
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : DependingProperty, base type: entity IfcProperty
	public static int usedinDependingproperty(EIfcpropertydependencyrelationship type, EIfcproperty instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testDependingproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return test_instance(a2);
	}
	public EIfcproperty getDependingproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return (EIfcproperty)get_instance(a2);
	}
	public void setDependingproperty(EIfcpropertydependencyrelationship type, EIfcproperty value) throws SdaiException {
		a2 = set_instance(a2, value);
	}
	public void unsetDependingproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		a2 = unset_instance(a2);
	}
	public static jsdai.dictionary.EAttribute attributeDependingproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5118=EXPLICIT_ATTRIBUTE('DependantProperty',#5115,1,#5094,$,.F.);
	//<01> generating methods for consolidated attribute:  DependantProperty
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : DependantProperty, base type: entity IfcProperty
	public static int usedinDependantproperty(EIfcpropertydependencyrelationship type, EIfcproperty instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testDependantproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfcproperty getDependantproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return (EIfcproperty)get_instance(a3);
	}
	public void setDependantproperty(EIfcpropertydependencyrelationship type, EIfcproperty value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetDependantproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributeDependantproperty(EIfcpropertydependencyrelationship type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #5119=EXPLICIT_ATTRIBUTE('Expression',#5115,2,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Expression
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Expression, base type: STRING
	public boolean testExpression(EIfcpropertydependencyrelationship type) throws SdaiException {
		return test_string(a4);
	}
	public String getExpression(EIfcpropertydependencyrelationship type) throws SdaiException {
		return get_string(a4);
	}
	public void setExpression(EIfcpropertydependencyrelationship type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetExpression(EIfcpropertydependencyrelationship type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeExpression(EIfcpropertydependencyrelationship type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = av.entityValues[0].getInstance(0, this, a2$);
		a3 = av.entityValues[0].getInstance(1, this, a3$);
		a4 = av.entityValues[0].getString(2);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = unset_instance(a2);
			a3 = unset_instance(a3);
			a4 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = av.entityValues[0].getInstance(0, this, a2$);
		a3 = av.entityValues[0].getInstance(1, this, a3$);
		a4 = av.entityValues[0].getString(2);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyDependencyRelationship
		av.entityValues[0].setInstance(0, a2);
		av.entityValues[0].setInstance(1, a3);
		av.entityValues[0].setString(2, a4);
		// partial entity: IfcResourceLevelRelationship
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPropertyDependencyRelationship
		av.entityValues[0].setInstance(0, a2);
		av.entityValues[0].setInstance(1, a3);
		av.entityValues[0].setString(2, a4);
		// partial entity: IfcResourceLevelRelationship
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertydependencyrelationshipNoselfreference(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).instanceNotEqual(_context, Value.alloc(jsdai.SIfc4.CIfcproperty.definition).set(_context, get(a2$)), Value.alloc(jsdai.SIfc4.CIfcproperty.definition).set(_context, get(a3$)))).getLogical());
	}
}
