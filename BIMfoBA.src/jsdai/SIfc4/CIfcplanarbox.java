/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPlanarBox

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcplanarbox extends CIfcplanarextent implements EIfcplanarbox {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcplanarbox.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// SizeInX: protected double a0;   SizeInX - java inheritance - REAL
	// SizeInY: protected double a1;   SizeInY - java inheritance - REAL
	protected Object a2; // Placement - current entity - SELECT IfcAxis2Placement
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// SizeInX - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected double a0;
	// SizeInY - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected double a1;
	// Placement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a2 == old) {
			a2 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a2 == old) {
			a2 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4959=EXPLICIT_ATTRIBUTE('SizeInX',#4957,0,#2543,$,.F.);
	//<01> generating methods for consolidated attribute:  SizeInX
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4960=EXPLICIT_ATTRIBUTE('SizeInY',#4957,1,#2543,$,.F.);
	//<01> generating methods for consolidated attribute:  SizeInY
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4956=EXPLICIT_ATTRIBUTE('Placement',#4954,0,#3115,$,.F.);
	//<01> generating methods for consolidated attribute:  Placement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: Placement
	public static int usedinPlacement(EIfcplanarbox type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testPlacement(EIfcplanarbox type) throws SdaiException {
		return test_instance(a2);
	}

	public EEntity getPlacement(EIfcplanarbox type) throws SdaiException { // case 1
		return get_instance_select(a2);
	}

	public void setPlacement(EIfcplanarbox type, EEntity value) throws SdaiException { // case 1
		a2 = set_instance(a2, value);
	}

	public void unsetPlacement(EIfcplanarbox type) throws SdaiException {
		a2 = unset_instance(a2);
	}

	public static jsdai.dictionary.EAttribute attributePlacement(EIfcplanarbox type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = unset_instance(a2);
			a0 = Double.NaN;
			a1 = Double.NaN;
			return;
		}
		a2 = av.entityValues[1].getInstance(0, this, a2$);
		a0 = av.entityValues[2].getDouble(0);
		a1 = av.entityValues[2].getDouble(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = unset_instance(a2);
			a0 = Double.NaN;
			a1 = Double.NaN;
			return;
		}
		a2 = av.entityValues[1].getInstance(0, this, a2$);
		a0 = av.entityValues[2].getDouble(0);
		a1 = av.entityValues[2].getDouble(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPlanarBox
		av.entityValues[1].setInstance(0, a2);
		// partial entity: IfcPlanarExtent
		av.entityValues[2].setDouble(0, a0);
		av.entityValues[2].setDouble(1, a1);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPlanarBox
		av.entityValues[1].setInstance(0, a2);
		// partial entity: IfcPlanarExtent
		av.entityValues[2].setDouble(0, a0);
		av.entityValues[2].setDouble(1, a1);
		// partial entity: IfcRepresentationItem
	}
}
