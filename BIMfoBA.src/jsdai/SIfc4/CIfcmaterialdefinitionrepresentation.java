/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcMaterialDefinitionRepresentation

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcmaterialdefinitionrepresentation extends CIfcproductrepresentation implements EIfcmaterialdefinitionrepresentation {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcmaterialdefinitionrepresentation.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// Representations: protected AIfcrepresentation a2;   Representations - java inheritance - LIST OF ENTITY
	protected Object a3; // RepresentedMaterial - current entity - ENTITY IfcMaterial
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// Representations - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected AIfcrepresentation a2;
	// RepresentedMaterial - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5065=EXPLICIT_ATTRIBUTE('Name',#5063,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5066=EXPLICIT_ATTRIBUTE('Description',#5063,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5067=EXPLICIT_ATTRIBUTE('Representations',#5063,2,#7028,$,.F.);
	//<01> generating methods for consolidated attribute:  Representations
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Representations, base type: LIST OF ENTITY
	public static int usedinRepresentations(EIfcproductrepresentation type, EIfcrepresentation instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	//going through all the attributes: #4663=EXPLICIT_ATTRIBUTE('RepresentedMaterial',#4661,0,#4631,$,.F.);
	//<01> generating methods for consolidated attribute:  RepresentedMaterial
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : RepresentedMaterial, base type: entity IfcMaterial
	public static int usedinRepresentedmaterial(EIfcmaterialdefinitionrepresentation type, EIfcmaterial instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testRepresentedmaterial(EIfcmaterialdefinitionrepresentation type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfcmaterial getRepresentedmaterial(EIfcmaterialdefinitionrepresentation type) throws SdaiException {
		return (EIfcmaterial)get_instance(a3);
	}
	public void setRepresentedmaterial(EIfcmaterialdefinitionrepresentation type, EIfcmaterial value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetRepresentedmaterial(EIfcmaterialdefinitionrepresentation type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributeRepresentedmaterial(EIfcmaterialdefinitionrepresentation type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a3 = unset_instance(a3);
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a3 = av.entityValues[0].getInstance(0, this, a3$);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
		a2 = (AIfcrepresentation)av.entityValues[1].getInstanceAggregate(2, a2$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a3 = unset_instance(a3);
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a3 = av.entityValues[0].getInstance(0, this, a3$);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
		a2 = (AIfcrepresentation)av.entityValues[1].getInstanceAggregate(2, a2$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcMaterialDefinitionRepresentation
		av.entityValues[0].setInstance(0, a3);
		// partial entity: IfcProductRepresentation
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		av.entityValues[1].setInstanceAggregate(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcMaterialDefinitionRepresentation
		av.entityValues[0].setInstance(0, a3);
		// partial entity: IfcProductRepresentation
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		av.entityValues[1].setInstanceAggregate(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcmaterialdefinitionrepresentationOnlystyledrepresentations(SdaiContext _context) throws SdaiException {
	



									
									Value _internal_aggregate_source124 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcrepresentation).set(_context, get(jsdai.SIfc4.CIfcproductrepresentation.attributeRepresentations(null)));
									Value _result122 = Value.alloc(_internal_aggregate_source124).create();
									if (_internal_aggregate_source124.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i123 = 1; _i123 <= _internal_aggregate_source124.getMemberCount(); _i123++) {
											Value _implicit_29_temp = _internal_aggregate_source124.getByIndex(_i123);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCSTYLEDREPRESENTATION", "IFC4"), _implicit_29_temp.typeOfV(_context))).getLogical() == 2) {
												_result122.addMember(_context, _implicit_29_temp);
											} else
											if (_internal_aggregate_source124.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_29_temp.unset();
												_result122.addMember(_context, _implicit_29_temp);
											}
										}
									} else {
										_result122.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result122), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
