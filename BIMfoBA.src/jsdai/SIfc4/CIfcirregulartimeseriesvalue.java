/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcIrregularTimeSeriesValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcirregulartimeseriesvalue extends CEntity implements EIfcirregulartimeseriesvalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcirregulartimeseriesvalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // TimeStamp - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcvalue a1; // ListValues - current entity - LIST OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// TimeStamp - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// ListValues - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcvalue a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4511=EXPLICIT_ATTRIBUTE('TimeStamp',#4509,0,#2477,$,.F.);
	//<01> generating methods for consolidated attribute:  TimeStamp
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: TimeStamp, base type: STRING
	public boolean testTimestamp(EIfcirregulartimeseriesvalue type) throws SdaiException {
		return test_string(a0);
	}
	public String getTimestamp(EIfcirregulartimeseriesvalue type) throws SdaiException {
		return get_string(a0);
	}
	public void setTimestamp(EIfcirregulartimeseriesvalue type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetTimestamp(EIfcirregulartimeseriesvalue type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeTimestamp(EIfcirregulartimeseriesvalue type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4512=EXPLICIT_ATTRIBUTE('ListValues',#4509,1,#6947,$,.F.);
	//<01> generating methods for consolidated attribute:  ListValues
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: ListValues, base type: LIST OF SELECT
	public boolean testListvalues(EIfcirregulartimeseriesvalue type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfcvalue getListvalues(EIfcirregulartimeseriesvalue type) throws SdaiException {
		if (a1 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a1;
	}
	public AIfcvalue createListvalues(EIfcirregulartimeseriesvalue type) throws SdaiException {
		a1 = (AIfcvalue)create_aggregate_class(a1, a1$, AIfcvalue.class, 0);
		return a1;
	}
	public void unsetListvalues(EIfcirregulartimeseriesvalue type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeListvalues(EIfcirregulartimeseriesvalue type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = (AIfcvalue)av.entityValues[0].getMixedAggregate(1, a1$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = (AIfcvalue)av.entityValues[0].getMixedAggregate(1, a1$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcIrregularTimeSeriesValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setMixedAggregate(1, a1, a1$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcIrregularTimeSeriesValue
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setMixedAggregate(1, a1, a1$);
	}
}
