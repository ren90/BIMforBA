/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcComplexProperty

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccomplexproperty extends CIfcproperty implements EIfccomplexproperty {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccomplexproperty.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// PartOfPset: protected Object  - inverse - java inheritance -  ENTITY IfcPropertySet
	// PropertyForDependance: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PropertyDependsOn: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PartOfComplex: protected Object  - inverse - java inheritance -  ENTITY IfcComplexProperty
	protected String a2; // UsageName - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcproperty a3; // HasProperties - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// PartOfPset - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PropertyForDependance - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// PropertyDependsOn - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// PartOfComplex - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// UsageName - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// HasProperties - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected AIfcproperty a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a3, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a3, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5104=INVERSE_ATTRIBUTE('HasExternalReferences',#5102,0,#4231,$,#4234,#8918,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5096=EXPLICIT_ATTRIBUTE('Name',#5094,0,#2523,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5097=EXPLICIT_ATTRIBUTE('Description',#5094,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5098=INVERSE_ATTRIBUTE('PartOfPset',#5094,0,#5137,$,#5139,#8908,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfPset
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5099=INVERSE_ATTRIBUTE('PropertyForDependance',#5094,1,#5115,$,#5117,#8910,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyForDependance
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5100=INVERSE_ATTRIBUTE('PropertyDependsOn',#5094,2,#5115,$,#5118,#8912,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyDependsOn
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5101=INVERSE_ATTRIBUTE('PartOfComplex',#5094,3,#3675,$,#3678,#8914,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplex
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3677=EXPLICIT_ATTRIBUTE('UsageName',#3675,0,#2523,$,.F.);
	//<01> generating methods for consolidated attribute:  UsageName
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: UsageName, base type: STRING
	public boolean testUsagename(EIfccomplexproperty type) throws SdaiException {
		return test_string(a2);
	}
	public String getUsagename(EIfccomplexproperty type) throws SdaiException {
		return get_string(a2);
	}
	public void setUsagename(EIfccomplexproperty type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetUsagename(EIfccomplexproperty type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeUsagename(EIfccomplexproperty type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3678=EXPLICIT_ATTRIBUTE('HasProperties',#3675,1,#6858,$,.F.);
	//<01> generating methods for consolidated attribute:  HasProperties
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: HasProperties, base type: SET OF ENTITY
	public static int usedinHasproperties(EIfccomplexproperty type, EIfcproperty instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testHasproperties(EIfccomplexproperty type) throws SdaiException {
		return test_aggregate(a3);
	}
	public AIfcproperty getHasproperties(EIfccomplexproperty type) throws SdaiException {
		return (AIfcproperty)get_aggregate(a3);
	}
	public AIfcproperty createHasproperties(EIfccomplexproperty type) throws SdaiException {
		a3 = (AIfcproperty)create_aggregate_class(a3, a3$,  AIfcproperty.class, 0);
		return a3;
	}
	public void unsetHasproperties(EIfccomplexproperty type) throws SdaiException {
		unset_aggregate(a3);
		a3 = null;
	}
	public static jsdai.dictionary.EAttribute attributeHasproperties(EIfccomplexproperty type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = av.entityValues[0].getString(0);
		a3 = (AIfcproperty)av.entityValues[0].getInstanceAggregate(1, a3$, this);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			a0 = null;
			a1 = null;
			return;
		}
		a2 = av.entityValues[0].getString(0);
		a3 = (AIfcproperty)av.entityValues[0].getInstanceAggregate(1, a3$, this);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcComplexProperty
		av.entityValues[0].setString(0, a2);
		av.entityValues[0].setInstanceAggregate(1, a3);
		// partial entity: IfcProperty
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcComplexProperty
		av.entityValues[0].setString(0, a2);
		av.entityValues[0].setInstanceAggregate(1, a3);
		// partial entity: IfcProperty
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfccomplexpropertyWr22(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfcuniquepropertyname()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a3$)))).getLogical());
	}
	public int rIfccomplexpropertyWr21(SdaiContext _context) throws SdaiException {
	



									
									Value _internal_aggregate_source68 = Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a3$));
									Value _result66 = Value.alloc(_internal_aggregate_source68).create();
									if (_internal_aggregate_source68.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i67 = 1; _i67 <= _internal_aggregate_source68.getMemberCount(); _i67++) {
											Value _implicit_16_temp = _internal_aggregate_source68.getByIndex(_i67);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).instanceEqual(_context, Value.alloc(jsdai.SIfc4.CIfccomplexproperty.definition).set(_context, this), _implicit_16_temp).getLogical() == 2) {
												_result66.addMember(_context, _implicit_16_temp);
											} else
											if (_internal_aggregate_source68.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_16_temp.unset();
												_result66.addMember(_context, _implicit_16_temp);
											}
										}
									} else {
										_result66.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result66), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
