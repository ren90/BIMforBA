/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPropertyTableValue

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpropertytablevalue extends CIfcsimpleproperty implements EIfcpropertytablevalue {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpropertytablevalue.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// HasExternalReferences: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// PartOfPset: protected Object  - inverse - java inheritance -  ENTITY IfcPropertySet
	// PropertyForDependance: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PropertyDependsOn: protected Object  - inverse - java inheritance -  ENTITY IfcPropertyDependencyRelationship
	// PartOfComplex: protected Object  - inverse - java inheritance -  ENTITY IfcComplexProperty
	protected AIfcvalue a2; // DefiningValues - current entity - LIST OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcvalue a3; // DefinedValues - current entity - LIST OF SELECT
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // Expression - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // DefiningUnit - current entity - SELECT IfcUnit
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a6; // DefinedUnit - current entity - SELECT IfcUnit
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a7; // CurveInterpolation - current entity - ENUMERATION IfcCurveInterpolationEnum
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// HasExternalReferences - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// PartOfPset - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// PropertyForDependance - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// PropertyDependsOn - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// PartOfComplex - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// DefiningValues - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcvalue a2;
	// DefinedValues - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected AIfcvalue a3;
	// Expression - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// DefiningUnit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	// DefinedUnit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected Object a6;
	// CurveInterpolation - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a7;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5104=INVERSE_ATTRIBUTE('HasExternalReferences',#5102,0,#4231,$,#4234,#8918,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReferences
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5096=EXPLICIT_ATTRIBUTE('Name',#5094,0,#2523,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5097=EXPLICIT_ATTRIBUTE('Description',#5094,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5098=INVERSE_ATTRIBUTE('PartOfPset',#5094,0,#5137,$,#5139,#8908,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfPset
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5099=INVERSE_ATTRIBUTE('PropertyForDependance',#5094,1,#5115,$,#5117,#8910,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyForDependance
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5100=INVERSE_ATTRIBUTE('PropertyDependsOn',#5094,2,#5115,$,#5118,#8912,$,.F.);
	//<01> generating methods for consolidated attribute:  PropertyDependsOn
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5101=INVERSE_ATTRIBUTE('PartOfComplex',#5094,3,#3675,$,#3678,#8914,$,.F.);
	//<01> generating methods for consolidated attribute:  PartOfComplex
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5157=EXPLICIT_ATTRIBUTE('DefiningValues',#5155,0,#7051,$,.T.);
	//<01> generating methods for consolidated attribute:  DefiningValues
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: DefiningValues, base type: LIST OF SELECT
	public boolean testDefiningvalues(EIfcpropertytablevalue type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfcvalue getDefiningvalues(EIfcpropertytablevalue type) throws SdaiException {
		if (a2 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a2;
	}
	public AIfcvalue createDefiningvalues(EIfcpropertytablevalue type) throws SdaiException {
		a2 = (AIfcvalue)create_aggregate_class(a2, a2$, AIfcvalue.class, 0);
		return a2;
	}
	public void unsetDefiningvalues(EIfcpropertytablevalue type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeDefiningvalues(EIfcpropertytablevalue type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5158=EXPLICIT_ATTRIBUTE('DefinedValues',#5155,1,#7052,$,.T.);
	//<01> generating methods for consolidated attribute:  DefinedValues
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: DefinedValues, base type: LIST OF SELECT
	public boolean testDefinedvalues(EIfcpropertytablevalue type) throws SdaiException {
		return test_aggregate(a3);
	}
	public AIfcvalue getDefinedvalues(EIfcpropertytablevalue type) throws SdaiException {
		if (a3 == null)
			throw new SdaiException(SdaiException.VA_NSET);
		return a3;
	}
	public AIfcvalue createDefinedvalues(EIfcpropertytablevalue type) throws SdaiException {
		a3 = (AIfcvalue)create_aggregate_class(a3, a3$, AIfcvalue.class, 0);
		return a3;
	}
	public void unsetDefinedvalues(EIfcpropertytablevalue type) throws SdaiException {
		unset_aggregate(a3);
		a3 = null;
	}
	public static jsdai.dictionary.EAttribute attributeDefinedvalues(EIfcpropertytablevalue type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #5159=EXPLICIT_ATTRIBUTE('Expression',#5155,2,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Expression
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Expression, base type: STRING
	public boolean testExpression(EIfcpropertytablevalue type) throws SdaiException {
		return test_string(a4);
	}
	public String getExpression(EIfcpropertytablevalue type) throws SdaiException {
		return get_string(a4);
	}
	public void setExpression(EIfcpropertytablevalue type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetExpression(EIfcpropertytablevalue type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeExpression(EIfcpropertytablevalue type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #5160=EXPLICIT_ATTRIBUTE('DefiningUnit',#5155,3,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  DefiningUnit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: DefiningUnit
	public static int usedinDefiningunit(EIfcpropertytablevalue type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	public boolean testDefiningunit(EIfcpropertytablevalue type) throws SdaiException {
		return test_instance(a5);
	}

	public EEntity getDefiningunit(EIfcpropertytablevalue type) throws SdaiException { // case 1
		return get_instance_select(a5);
	}

	public void setDefiningunit(EIfcpropertytablevalue type, EEntity value) throws SdaiException { // case 1
		a5 = set_instance(a5, value);
	}

	public void unsetDefiningunit(EIfcpropertytablevalue type) throws SdaiException {
		a5 = unset_instance(a5);
	}

	public static jsdai.dictionary.EAttribute attributeDefiningunit(EIfcpropertytablevalue type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #5161=EXPLICIT_ATTRIBUTE('DefinedUnit',#5155,4,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  DefinedUnit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: DefinedUnit
	public static int usedinDefinedunit(EIfcpropertytablevalue type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	public boolean testDefinedunit(EIfcpropertytablevalue type) throws SdaiException {
		return test_instance(a6);
	}

	public EEntity getDefinedunit(EIfcpropertytablevalue type) throws SdaiException { // case 1
		return get_instance_select(a6);
	}

	public void setDefinedunit(EIfcpropertytablevalue type, EEntity value) throws SdaiException { // case 1
		a6 = set_instance(a6, value);
	}

	public void unsetDefinedunit(EIfcpropertytablevalue type) throws SdaiException {
		a6 = unset_instance(a6);
	}

	public static jsdai.dictionary.EAttribute attributeDefinedunit(EIfcpropertytablevalue type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #5162=EXPLICIT_ATTRIBUTE('CurveInterpolation',#5155,5,#2799,$,.T.);
	//<01> generating methods for consolidated attribute:  CurveInterpolation
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:CurveInterpolation, base type: ENUMERATION
	public boolean testCurveinterpolation(EIfcpropertytablevalue type) throws SdaiException {
		return test_enumeration(a7);
	}
	public int getCurveinterpolation(EIfcpropertytablevalue type) throws SdaiException {
		return get_enumeration(a7);
	}
	public void setCurveinterpolation(EIfcpropertytablevalue type, int value) throws SdaiException {
		a7 = set_enumeration(value, a7$);
	}
	public void unsetCurveinterpolation(EIfcpropertytablevalue type) throws SdaiException {
		a7 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeCurveinterpolation(EIfcpropertytablevalue type) throws SdaiException {
		return a7$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			a4 = null;
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfcvalue)av.entityValues[2].getMixedAggregate(0, a2$, this);
		a3 = (AIfcvalue)av.entityValues[2].getMixedAggregate(1, a3$, this);
		a4 = av.entityValues[2].getString(2);
		a5 = av.entityValues[2].getInstance(3, this, a5$);
		a6 = av.entityValues[2].getInstance(4, this, a6$);
		a7 = av.entityValues[2].getEnumeration(5, a7$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			if (a3 instanceof CAggregate)
				a3.unsetAll();
			a3 = null;
			a4 = null;
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = (AIfcvalue)av.entityValues[2].getMixedAggregate(0, a2$, this);
		a3 = (AIfcvalue)av.entityValues[2].getMixedAggregate(1, a3$, this);
		a4 = av.entityValues[2].getString(2);
		a5 = av.entityValues[2].getInstance(3, this, a5$);
		a6 = av.entityValues[2].getInstance(4, this, a6$);
		a7 = av.entityValues[2].getEnumeration(5, a7$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyTableValue
		av.entityValues[2].setMixedAggregate(0, a2, a2$);
		av.entityValues[2].setMixedAggregate(1, a3, a3$);
		av.entityValues[2].setString(2, a4);
		av.entityValues[2].setInstance(3, a5);
		av.entityValues[2].setInstance(4, a6);
		av.entityValues[2].setEnumeration(5, a7, a7$);
		// partial entity: IfcSimpleProperty
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcProperty
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		// partial entity: IfcPropertyAbstraction
		// partial entity: IfcPropertyTableValue
		av.entityValues[2].setMixedAggregate(0, a2, a2$);
		av.entityValues[2].setMixedAggregate(1, a3, a3$);
		av.entityValues[2].setString(2, a4);
		av.entityValues[2].setInstance(3, a5);
		av.entityValues[2].setInstance(4, a6);
		av.entityValues[2].setEnumeration(5, a7, a7$);
		// partial entity: IfcSimpleProperty
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpropertytablevalueWr23(SdaiContext _context) throws SdaiException {
	





											
											Value _internal_aggregate_source190 = Value.alloc(jsdai.SIfc4.CIfcpropertytablevalue.definition).set(_context, this).getAttribute(a3$, _context);
											Value _result188 = Value.alloc(_internal_aggregate_source190).create();
											if (_internal_aggregate_source190.getActualJavaType() != Value.INDETERMINATE) {
												for (int _i189 = 1; _i189 <= _internal_aggregate_source190.getMemberCount(); _i189++) {
													Value _implicit_45_temp = _internal_aggregate_source190.getByIndex(_i189);
													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_45_temp.typeOfV(_context), Value.alloc(jsdai.SIfc4.CIfcpropertytablevalue.definition).set(_context, this).getAttribute("definedvalues", _context).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).typeOfV(_context)).getLogical() == 2) {
														_result188.addMember(_context, _implicit_45_temp);
													} else
													if (_internal_aggregate_source190.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
														_implicit_45_temp.unset();
														_result188.addMember(_context, _implicit_45_temp);
													}
												}
											} else {
												_result188.unset();
											}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result188), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)))).getLogical());
	}
	public int rIfcpropertytablevalueWr22(SdaiContext _context) throws SdaiException {
	





											
											Value _internal_aggregate_source194 = Value.alloc(jsdai.SIfc4.CIfcpropertytablevalue.definition).set(_context, this).getAttribute(a2$, _context);
											Value _result192 = Value.alloc(_internal_aggregate_source194).create();
											if (_internal_aggregate_source194.getActualJavaType() != Value.INDETERMINATE) {
												for (int _i193 = 1; _i193 <= _internal_aggregate_source194.getMemberCount(); _i193++) {
													Value _implicit_44_temp = _internal_aggregate_source194.getByIndex(_i193);
													if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_44_temp.typeOfV(_context), Value.alloc(jsdai.SIfc4.CIfcpropertytablevalue.definition).set(_context, this).getAttribute("definingvalues", _context).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).typeOfV(_context)).getLogical() == 2) {
														_result192.addMember(_context, _implicit_44_temp);
													} else
													if (_internal_aggregate_source194.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
														_implicit_44_temp.unset();
														_result192.addMember(_context, _implicit_44_temp);
													}
												}
											} else {
												_result192.unset();
											}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_unique_ifcvalue).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_result192), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)))).getLogical());
	}
	public int rIfcpropertytablevalueWr21(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_unique_ifcvalue).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a3$))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_unique_ifcvalue).set(_context, get(a2$))), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_1_ifcvalue).set(_context, get(a3$)))))).getLogical());
	}
}
