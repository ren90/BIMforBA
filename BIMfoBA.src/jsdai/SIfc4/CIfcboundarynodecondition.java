/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcBoundaryNodeCondition

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcboundarynodecondition extends CIfcboundarycondition implements EIfcboundarynodecondition {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcboundarynodecondition.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected Object a1; // TranslationalStiffnessX - current entity - SELECT IfcTranslationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1$$; // current SELECT path indicator
	protected Object a2; // TranslationalStiffnessY - current entity - SELECT IfcTranslationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2$$; // current SELECT path indicator
	protected Object a3; // TranslationalStiffnessZ - current entity - SELECT IfcTranslationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a3$$; // current SELECT path indicator
	protected Object a4; // RotationalStiffnessX - current entity - SELECT IfcRotationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a4$$; // current SELECT path indicator
	protected Object a5; // RotationalStiffnessY - current entity - SELECT IfcRotationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a5$$; // current SELECT path indicator
	protected Object a6; // RotationalStiffnessZ - current entity - SELECT IfcRotationalStiffnessSelect
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a6$$; // current SELECT path indicator
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// TranslationalStiffnessX - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	protected int a1$$;
	// TranslationalStiffnessY - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	protected int a2$$;
	// TranslationalStiffnessZ - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	protected int a3$$;
	// RotationalStiffnessX - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a4;
	protected int a4$$;
	// RotationalStiffnessY - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	protected int a5$$;
	// RotationalStiffnessZ - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected Object a6;
	protected int a6$$;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3456=EXPLICIT_ATTRIBUTE('Name',#3454,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3474=EXPLICIT_ATTRIBUTE('TranslationalStiffnessX',#3472,0,#3217,$,.T.);
	//<01> generating methods for consolidated attribute:  TranslationalStiffnessX
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: TranslationalStiffnessX
	public int testTranslationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a1, a1$$);
	}

	public boolean getTranslationalstiffnessx(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a1, a1$$, 2);
	}
	public double getTranslationalstiffnessx(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a1, a1$$, 3);
	}

	public void setTranslationalstiffnessx(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a1 = set_boolean_select(value);
		a1$$ = 2;
	}
	public void setTranslationalstiffnessx(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		a1 = set_double_select(value);
		a1$$ = 3;
	}

	public void unsetTranslationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		a1 = unset_select(a1);
		a1$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeTranslationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3475=EXPLICIT_ATTRIBUTE('TranslationalStiffnessY',#3472,1,#3217,$,.T.);
	//<01> generating methods for consolidated attribute:  TranslationalStiffnessY
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: TranslationalStiffnessY
	public int testTranslationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a2, a2$$);
	}

	public boolean getTranslationalstiffnessy(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a2, a2$$, 2);
	}
	public double getTranslationalstiffnessy(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a2, a2$$, 3);
	}

	public void setTranslationalstiffnessy(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a2 = set_boolean_select(value);
		a2$$ = 2;
	}
	public void setTranslationalstiffnessy(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		a2 = set_double_select(value);
		a2$$ = 3;
	}

	public void unsetTranslationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		a2 = unset_select(a2);
		a2$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeTranslationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3476=EXPLICIT_ATTRIBUTE('TranslationalStiffnessZ',#3472,2,#3217,$,.T.);
	//<01> generating methods for consolidated attribute:  TranslationalStiffnessZ
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: TranslationalStiffnessZ
	public int testTranslationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a3, a3$$);
	}

	public boolean getTranslationalstiffnessz(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a3, a3$$, 2);
	}
	public double getTranslationalstiffnessz(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a3, a3$$, 3);
	}

	public void setTranslationalstiffnessz(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a3 = set_boolean_select(value);
		a3$$ = 2;
	}
	public void setTranslationalstiffnessz(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException { // case 3
		a3 = set_double_select(value);
		a3$$ = 3;
	}

	public void unsetTranslationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		a3 = unset_select(a3);
		a3$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeTranslationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #3477=EXPLICIT_ATTRIBUTE('RotationalStiffnessX',#3472,3,#3191,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalStiffnessX
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: RotationalStiffnessX
	public int testRotationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a4, a4$$);
	}

	public boolean getRotationalstiffnessx(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a4, a4$$, 2);
	}
	public double getRotationalstiffnessx(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a4, a4$$, 3);
	}

	public void setRotationalstiffnessx(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a4 = set_boolean_select(value);
		a4$$ = 2;
	}
	public void setRotationalstiffnessx(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		a4 = set_double_select(value);
		a4$$ = 3;
	}

	public void unsetRotationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		a4 = unset_select(a4);
		a4$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeRotationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #3478=EXPLICIT_ATTRIBUTE('RotationalStiffnessY',#3472,4,#3191,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalStiffnessY
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: RotationalStiffnessY
	public int testRotationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a5, a5$$);
	}

	public boolean getRotationalstiffnessy(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a5, a5$$, 2);
	}
	public double getRotationalstiffnessy(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a5, a5$$, 3);
	}

	public void setRotationalstiffnessy(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a5 = set_boolean_select(value);
		a5$$ = 2;
	}
	public void setRotationalstiffnessy(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		a5 = set_double_select(value);
		a5$$ = 3;
	}

	public void unsetRotationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		a5 = unset_select(a5);
		a5$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeRotationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #3479=EXPLICIT_ATTRIBUTE('RotationalStiffnessZ',#3472,5,#3191,$,.T.);
	//<01> generating methods for consolidated attribute:  RotationalStiffnessZ
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: RotationalStiffnessZ
	public int testRotationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		return test_select(a6, a6$$);
	}

	public boolean getRotationalstiffnessz(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException { // case 2
		return get_boolean_select(a6, a6$$, 2);
	}
	public double getRotationalstiffnessz(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		return get_double_select(a6, a6$$, 3);
	}

	public void setRotationalstiffnessz(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException { // case 2
		a6 = set_boolean_select(value);
		a6$$ = 2;
	}
	public void setRotationalstiffnessz(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException { // case 3
		a6 = set_double_select(value);
		a6$$ = 3;
	}

	public void unsetRotationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		a6 = unset_select(a6);
		a6$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeRotationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException {
		return a6$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_select(a1);
			a1$$ = 0;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_select(a3);
			a3$$ = 0;
			a4 = unset_select(a4);
			a4$$ = 0;
			a5 = unset_select(a5);
			a5$$ = 0;
			a6 = unset_select(a6);
			a6$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[1].getMixed(0,a1$, this);
		a1$$ = av.entityValues[1].getSelectNumber();
		a2 = av.entityValues[1].getMixed(1,a2$, this);
		a2$$ = av.entityValues[1].getSelectNumber();
		a3 = av.entityValues[1].getMixed(2,a3$, this);
		a3$$ = av.entityValues[1].getSelectNumber();
		a4 = av.entityValues[1].getMixed(3,a4$, this);
		a4$$ = av.entityValues[1].getSelectNumber();
		a5 = av.entityValues[1].getMixed(4,a5$, this);
		a5$$ = av.entityValues[1].getSelectNumber();
		a6 = av.entityValues[1].getMixed(5,a6$, this);
		a6$$ = av.entityValues[1].getSelectNumber();
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_select(a1);
			a1$$ = 0;
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_select(a3);
			a3$$ = 0;
			a4 = unset_select(a4);
			a4$$ = 0;
			a5 = unset_select(a5);
			a5$$ = 0;
			a6 = unset_select(a6);
			a6$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[1].getMixed(0,a1$, this);
		a1$$ = av.entityValues[1].getSelectNumber();
		a2 = av.entityValues[1].getMixed(1,a2$, this);
		a2$$ = av.entityValues[1].getSelectNumber();
		a3 = av.entityValues[1].getMixed(2,a3$, this);
		a3$$ = av.entityValues[1].getSelectNumber();
		a4 = av.entityValues[1].getMixed(3,a4$, this);
		a4$$ = av.entityValues[1].getSelectNumber();
		a5 = av.entityValues[1].getMixed(4,a5$, this);
		a5$$ = av.entityValues[1].getSelectNumber();
		a6 = av.entityValues[1].getMixed(5,a6$, this);
		a6$$ = av.entityValues[1].getSelectNumber();
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundaryCondition
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcBoundaryNodeCondition
		av.entityValues[1].setMixed(0, a1, a1$, a1$$);
		av.entityValues[1].setMixed(1, a2, a2$, a2$$);
		av.entityValues[1].setMixed(2, a3, a3$, a3$$);
		av.entityValues[1].setMixed(3, a4, a4$, a4$$);
		av.entityValues[1].setMixed(4, a5, a5$, a5$$);
		av.entityValues[1].setMixed(5, a6, a6$, a6$$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundaryCondition
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcBoundaryNodeCondition
		av.entityValues[1].setMixed(0, a1, a1$, a1$$);
		av.entityValues[1].setMixed(1, a2, a2$, a2$$);
		av.entityValues[1].setMixed(2, a3, a3$, a3$$);
		av.entityValues[1].setMixed(3, a4, a4$, a4$$);
		av.entityValues[1].setMixed(4, a5, a5$, a5$$);
		av.entityValues[1].setMixed(5, a6, a6$, a6$$);
	}
}
