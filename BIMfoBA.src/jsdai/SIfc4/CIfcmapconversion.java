/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcMapConversion

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcmapconversion extends CIfccoordinateoperation implements EIfcmapconversion {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcmapconversion.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// SourceCRS: protected Object a0;   SourceCRS - java inheritance - SELECT IfcCoordinateReferenceSystemSelect
	// TargetCRS: protected Object a1;   TargetCRS - java inheritance - ENTITY IfcCoordinateReferenceSystem
	protected double a2; // Eastings - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a3; // Northings - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a4; // OrthogonalHeight - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected double a5; // XAxisAbscissa - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected double a6; // XAxisOrdinate - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected double a7; // Scale - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// SourceCRS - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected Object a0;
	// TargetCRS - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Eastings - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a2;
	// Northings - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a3;
	// OrthogonalHeight - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected double a4;
	// XAxisAbscissa - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected double a5;
	// XAxisOrdinate - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected double a6;
	// Scale - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected double a7;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3828=EXPLICIT_ATTRIBUTE('SourceCRS',#3826,0,#3129,$,.F.);
	//<01> generating methods for consolidated attribute:  SourceCRS
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// -1- methods for SELECT attribute: SourceCRS
	public static int usedinSourcecrs(EIfccoordinateoperation type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #3829=EXPLICIT_ATTRIBUTE('TargetCRS',#3826,1,#3830,$,.F.);
	//<01> generating methods for consolidated attribute:  TargetCRS
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): TargetCRS, base type: entity IfcCoordinateReferenceSystem
	public static int usedinTargetcrs(EIfccoordinateoperation type, EIfccoordinatereferencesystem instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #4621=EXPLICIT_ATTRIBUTE('Eastings',#4619,0,#2543,$,.F.);
	//<01> generating methods for consolidated attribute:  Eastings
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Eastings, base type: REAL
	public boolean testEastings(EIfcmapconversion type) throws SdaiException {
		return test_double(a2);
	}
	public double getEastings(EIfcmapconversion type) throws SdaiException {
		return get_double(a2);
	}
	public void setEastings(EIfcmapconversion type, double value) throws SdaiException {
		a2 = set_double(value);
	}
	public void unsetEastings(EIfcmapconversion type) throws SdaiException {
		a2 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeEastings(EIfcmapconversion type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4622=EXPLICIT_ATTRIBUTE('Northings',#4619,1,#2543,$,.F.);
	//<01> generating methods for consolidated attribute:  Northings
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Northings, base type: REAL
	public boolean testNorthings(EIfcmapconversion type) throws SdaiException {
		return test_double(a3);
	}
	public double getNorthings(EIfcmapconversion type) throws SdaiException {
		return get_double(a3);
	}
	public void setNorthings(EIfcmapconversion type, double value) throws SdaiException {
		a3 = set_double(value);
	}
	public void unsetNorthings(EIfcmapconversion type) throws SdaiException {
		a3 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeNorthings(EIfcmapconversion type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #4623=EXPLICIT_ATTRIBUTE('OrthogonalHeight',#4619,2,#2543,$,.F.);
	//<01> generating methods for consolidated attribute:  OrthogonalHeight
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: OrthogonalHeight, base type: REAL
	public boolean testOrthogonalheight(EIfcmapconversion type) throws SdaiException {
		return test_double(a4);
	}
	public double getOrthogonalheight(EIfcmapconversion type) throws SdaiException {
		return get_double(a4);
	}
	public void setOrthogonalheight(EIfcmapconversion type, double value) throws SdaiException {
		a4 = set_double(value);
	}
	public void unsetOrthogonalheight(EIfcmapconversion type) throws SdaiException {
		a4 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeOrthogonalheight(EIfcmapconversion type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #4624=EXPLICIT_ATTRIBUTE('XAxisAbscissa',#4619,3,#2623,$,.T.);
	//<01> generating methods for consolidated attribute:  XAxisAbscissa
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: XAxisAbscissa, base type: REAL
	public boolean testXaxisabscissa(EIfcmapconversion type) throws SdaiException {
		return test_double(a5);
	}
	public double getXaxisabscissa(EIfcmapconversion type) throws SdaiException {
		return get_double(a5);
	}
	public void setXaxisabscissa(EIfcmapconversion type, double value) throws SdaiException {
		a5 = set_double(value);
	}
	public void unsetXaxisabscissa(EIfcmapconversion type) throws SdaiException {
		a5 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeXaxisabscissa(EIfcmapconversion type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #4625=EXPLICIT_ATTRIBUTE('XAxisOrdinate',#4619,4,#2623,$,.T.);
	//<01> generating methods for consolidated attribute:  XAxisOrdinate
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: XAxisOrdinate, base type: REAL
	public boolean testXaxisordinate(EIfcmapconversion type) throws SdaiException {
		return test_double(a6);
	}
	public double getXaxisordinate(EIfcmapconversion type) throws SdaiException {
		return get_double(a6);
	}
	public void setXaxisordinate(EIfcmapconversion type, double value) throws SdaiException {
		a6 = set_double(value);
	}
	public void unsetXaxisordinate(EIfcmapconversion type) throws SdaiException {
		a6 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeXaxisordinate(EIfcmapconversion type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #4626=EXPLICIT_ATTRIBUTE('Scale',#4619,5,#2623,$,.T.);
	//<01> generating methods for consolidated attribute:  Scale
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Scale, base type: REAL
	public boolean testScale(EIfcmapconversion type) throws SdaiException {
		return test_double(a7);
	}
	public double getScale(EIfcmapconversion type) throws SdaiException {
		return get_double(a7);
	}
	public void setScale(EIfcmapconversion type, double value) throws SdaiException {
		a7 = set_double(value);
	}
	public void unsetScale(EIfcmapconversion type) throws SdaiException {
		a7 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeScale(EIfcmapconversion type) throws SdaiException {
		return a7$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			a5 = Double.NaN;
			a6 = Double.NaN;
			a7 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[1].getDouble(0);
		a3 = av.entityValues[1].getDouble(1);
		a4 = av.entityValues[1].getDouble(2);
		a5 = av.entityValues[1].getDouble(3);
		a6 = av.entityValues[1].getDouble(4);
		a7 = av.entityValues[1].getDouble(5);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = Double.NaN;
			a5 = Double.NaN;
			a6 = Double.NaN;
			a7 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[1].getDouble(0);
		a3 = av.entityValues[1].getDouble(1);
		a4 = av.entityValues[1].getDouble(2);
		a5 = av.entityValues[1].getDouble(3);
		a6 = av.entityValues[1].getDouble(4);
		a7 = av.entityValues[1].getDouble(5);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCoordinateOperation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcMapConversion
		av.entityValues[1].setDouble(0, a2);
		av.entityValues[1].setDouble(1, a3);
		av.entityValues[1].setDouble(2, a4);
		av.entityValues[1].setDouble(3, a5);
		av.entityValues[1].setDouble(4, a6);
		av.entityValues[1].setDouble(5, a7);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCoordinateOperation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		// partial entity: IfcMapConversion
		av.entityValues[1].setDouble(0, a2);
		av.entityValues[1].setDouble(1, a3);
		av.entityValues[1].setDouble(2, a4);
		av.entityValues[1].setDouble(3, a5);
		av.entityValues[1].setDouble(4, a6);
		av.entityValues[1].setDouble(5, a7);
	}
}
