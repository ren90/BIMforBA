/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRepresentationMap

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcrepresentationmap extends CEntity implements EIfcrepresentationmap {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcrepresentationmap.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // MappingOrigin - current entity - SELECT IfcAxis2Placement
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // MappedRepresentation - current entity - ENTITY IfcRepresentation
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// HasShapeAspects: protected Object  - inverse - current -  ENTITY IfcShapeAspect
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// MapUsage: protected Object  - inverse - current -  ENTITY IfcMappedItem
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// MappingOrigin - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// MappedRepresentation - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// HasShapeAspects - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// MapUsage - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5556=EXPLICIT_ATTRIBUTE('MappingOrigin',#5554,0,#3115,$,.F.);
	//<01> generating methods for consolidated attribute:  MappingOrigin
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: MappingOrigin
	public static int usedinMappingorigin(EIfcrepresentationmap type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testMappingorigin(EIfcrepresentationmap type) throws SdaiException {
		return test_instance(a0);
	}

	public EEntity getMappingorigin(EIfcrepresentationmap type) throws SdaiException { // case 1
		return get_instance_select(a0);
	}

	public void setMappingorigin(EIfcrepresentationmap type, EEntity value) throws SdaiException { // case 1
		a0 = set_instance(a0, value);
	}

	public void unsetMappingorigin(EIfcrepresentationmap type) throws SdaiException {
		a0 = unset_instance(a0);
	}

	public static jsdai.dictionary.EAttribute attributeMappingorigin(EIfcrepresentationmap type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #5557=EXPLICIT_ATTRIBUTE('MappedRepresentation',#5554,1,#5536,$,.F.);
	//<01> generating methods for consolidated attribute:  MappedRepresentation
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : MappedRepresentation, base type: entity IfcRepresentation
	public static int usedinMappedrepresentation(EIfcrepresentationmap type, EIfcrepresentation instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testMappedrepresentation(EIfcrepresentationmap type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfcrepresentation getMappedrepresentation(EIfcrepresentationmap type) throws SdaiException {
		return (EIfcrepresentation)get_instance(a1);
	}
	public void setMappedrepresentation(EIfcrepresentationmap type, EIfcrepresentation value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetMappedrepresentation(EIfcrepresentationmap type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeMappedrepresentation(EIfcrepresentationmap type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5558=INVERSE_ATTRIBUTE('HasShapeAspects',#5554,0,#5672,$,#5678,#9227,$,.F.);
	//<01> generating methods for consolidated attribute:  HasShapeAspects
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - HasShapeAspects : SET[0:-2147483648] OF IfcShapeAspect FOR PartOfProductDefinitionShape
	public AIfcshapeaspect getHasshapeaspects(EIfcrepresentationmap type, ASdaiModel domain) throws SdaiException {
		AIfcshapeaspect result = (AIfcshapeaspect)get_inverse_aggregate(i0$);
		CIfcshapeaspect.usedinPartofproductdefinitionshape(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeHasshapeaspects(EIfcrepresentationmap type) throws SdaiException {
		return i0$;
	}

	//going through all the attributes: #5559=INVERSE_ATTRIBUTE('MapUsage',#5554,1,#4627,$,#4629,#9229,$,.F.);
	//<01> generating methods for consolidated attribute:  MapUsage
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - MapUsage : SET[0:-2147483648] OF IfcMappedItem FOR MappingSource
	public AIfcmappeditem getMapusage(EIfcrepresentationmap type, ASdaiModel domain) throws SdaiException {
		AIfcmappeditem result = (AIfcmappeditem)get_inverse_aggregate(i1$);
		CIfcmappeditem.usedinMappingsource(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeMapusage(EIfcrepresentationmap type) throws SdaiException {
		return i1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRepresentationMap
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRepresentationMap
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcrepresentationmapApplicablemappedrepr(SdaiContext _context) throws SdaiException {
	



		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCSHAPEMODEL", "IFC4"), Value.alloc(jsdai.SIfc4.CIfcrepresentation.definition).set(_context, get(a1$)).typeOfV(_context))).getLogical());
	}
}
