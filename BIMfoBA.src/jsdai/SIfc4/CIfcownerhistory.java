/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcOwnerHistory

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcownerhistory extends CEntity implements EIfcownerhistory {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcownerhistory.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // OwningUser - current entity - ENTITY IfcPersonAndOrganization
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // OwningApplication - current entity - ENTITY IfcApplication
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a2; // State - current entity - ENUMERATION IfcStateEnum
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a3; // ChangeAction - current entity - ENUMERATION IfcChangeActionEnum
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a4; // LastModifiedDate - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // LastModifyingUser - current entity - ENTITY IfcPersonAndOrganization
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a6; // LastModifyingApplication - current entity - ENTITY IfcApplication
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a7; // CreationDate - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// OwningUser - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// OwningApplication - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// State - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2;
	// ChangeAction - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a3;
	// LastModifiedDate - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a4;
	// LastModifyingUser - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	// LastModifyingApplication - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected Object a6;
	// CreationDate - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a7;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4860=EXPLICIT_ATTRIBUTE('OwningUser',#4858,0,#4905,$,.F.);
	//<01> generating methods for consolidated attribute:  OwningUser
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : OwningUser, base type: entity IfcPersonAndOrganization
	public static int usedinOwninguser(EIfcownerhistory type, EIfcpersonandorganization instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testOwninguser(EIfcownerhistory type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcpersonandorganization getOwninguser(EIfcownerhistory type) throws SdaiException {
		return (EIfcpersonandorganization)get_instance(a0);
	}
	public void setOwninguser(EIfcownerhistory type, EIfcpersonandorganization value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetOwninguser(EIfcownerhistory type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeOwninguser(EIfcownerhistory type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4861=EXPLICIT_ATTRIBUTE('OwningApplication',#4858,1,#3295,$,.F.);
	//<01> generating methods for consolidated attribute:  OwningApplication
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : OwningApplication, base type: entity IfcApplication
	public static int usedinOwningapplication(EIfcownerhistory type, EIfcapplication instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testOwningapplication(EIfcownerhistory type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfcapplication getOwningapplication(EIfcownerhistory type) throws SdaiException {
		return (EIfcapplication)get_instance(a1);
	}
	public void setOwningapplication(EIfcownerhistory type, EIfcapplication value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetOwningapplication(EIfcownerhistory type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeOwningapplication(EIfcownerhistory type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4862=EXPLICIT_ATTRIBUTE('State',#4858,2,#3033,$,.T.);
	//<01> generating methods for consolidated attribute:  State
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:State, base type: ENUMERATION
	public boolean testState(EIfcownerhistory type) throws SdaiException {
		return test_enumeration(a2);
	}
	public int getState(EIfcownerhistory type) throws SdaiException {
		return get_enumeration(a2);
	}
	public void setState(EIfcownerhistory type, int value) throws SdaiException {
		a2 = set_enumeration(value, a2$);
	}
	public void unsetState(EIfcownerhistory type) throws SdaiException {
		a2 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeState(EIfcownerhistory type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4863=EXPLICIT_ATTRIBUTE('ChangeAction',#4858,3,#2755,$,.T.);
	//<01> generating methods for consolidated attribute:  ChangeAction
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:ChangeAction, base type: ENUMERATION
	public boolean testChangeaction(EIfcownerhistory type) throws SdaiException {
		return test_enumeration(a3);
	}
	public int getChangeaction(EIfcownerhistory type) throws SdaiException {
		return get_enumeration(a3);
	}
	public void setChangeaction(EIfcownerhistory type, int value) throws SdaiException {
		a3 = set_enumeration(value, a3$);
	}
	public void unsetChangeaction(EIfcownerhistory type) throws SdaiException {
		a3 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeChangeaction(EIfcownerhistory type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #4864=EXPLICIT_ATTRIBUTE('LastModifiedDate',#4858,4,#2683,$,.T.);
	//<01> generating methods for consolidated attribute:  LastModifiedDate
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: LastModifiedDate, base type: INTEGER
	public boolean testLastmodifieddate(EIfcownerhistory type) throws SdaiException {
		return test_integer(a4);
	}
	public int getLastmodifieddate(EIfcownerhistory type) throws SdaiException {
		return get_integer(a4);
	}
	public void setLastmodifieddate(EIfcownerhistory type, int value) throws SdaiException {
		a4 = set_integer(value);
	}
	public void unsetLastmodifieddate(EIfcownerhistory type) throws SdaiException {
		a4 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeLastmodifieddate(EIfcownerhistory type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #4865=EXPLICIT_ATTRIBUTE('LastModifyingUser',#4858,5,#4905,$,.T.);
	//<01> generating methods for consolidated attribute:  LastModifyingUser
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : LastModifyingUser, base type: entity IfcPersonAndOrganization
	public static int usedinLastmodifyinguser(EIfcownerhistory type, EIfcpersonandorganization instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	public boolean testLastmodifyinguser(EIfcownerhistory type) throws SdaiException {
		return test_instance(a5);
	}
	public EIfcpersonandorganization getLastmodifyinguser(EIfcownerhistory type) throws SdaiException {
		return (EIfcpersonandorganization)get_instance(a5);
	}
	public void setLastmodifyinguser(EIfcownerhistory type, EIfcpersonandorganization value) throws SdaiException {
		a5 = set_instance(a5, value);
	}
	public void unsetLastmodifyinguser(EIfcownerhistory type) throws SdaiException {
		a5 = unset_instance(a5);
	}
	public static jsdai.dictionary.EAttribute attributeLastmodifyinguser(EIfcownerhistory type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #4866=EXPLICIT_ATTRIBUTE('LastModifyingApplication',#4858,6,#3295,$,.T.);
	//<01> generating methods for consolidated attribute:  LastModifyingApplication
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : LastModifyingApplication, base type: entity IfcApplication
	public static int usedinLastmodifyingapplication(EIfcownerhistory type, EIfcapplication instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	public boolean testLastmodifyingapplication(EIfcownerhistory type) throws SdaiException {
		return test_instance(a6);
	}
	public EIfcapplication getLastmodifyingapplication(EIfcownerhistory type) throws SdaiException {
		return (EIfcapplication)get_instance(a6);
	}
	public void setLastmodifyingapplication(EIfcownerhistory type, EIfcapplication value) throws SdaiException {
		a6 = set_instance(a6, value);
	}
	public void unsetLastmodifyingapplication(EIfcownerhistory type) throws SdaiException {
		a6 = unset_instance(a6);
	}
	public static jsdai.dictionary.EAttribute attributeLastmodifyingapplication(EIfcownerhistory type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #4867=EXPLICIT_ATTRIBUTE('CreationDate',#4858,7,#2683,$,.F.);
	//<01> generating methods for consolidated attribute:  CreationDate
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: CreationDate, base type: INTEGER
	public boolean testCreationdate(EIfcownerhistory type) throws SdaiException {
		return test_integer(a7);
	}
	public int getCreationdate(EIfcownerhistory type) throws SdaiException {
		return get_integer(a7);
	}
	public void setCreationdate(EIfcownerhistory type, int value) throws SdaiException {
		a7 = set_integer(value);
	}
	public void unsetCreationdate(EIfcownerhistory type) throws SdaiException {
		a7 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeCreationdate(EIfcownerhistory type) throws SdaiException {
		return a7$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			a2 = 0;
			a3 = 0;
			a4 = Integer.MIN_VALUE;
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = Integer.MIN_VALUE;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[0].getEnumeration(2, a2$);
		a3 = av.entityValues[0].getEnumeration(3, a3$);
		a4 = av.entityValues[0].getInteger(4);
		a5 = av.entityValues[0].getInstance(5, this, a5$);
		a6 = av.entityValues[0].getInstance(6, this, a6$);
		a7 = av.entityValues[0].getInteger(7);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			a2 = 0;
			a3 = 0;
			a4 = Integer.MIN_VALUE;
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = Integer.MIN_VALUE;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
		a2 = av.entityValues[0].getEnumeration(2, a2$);
		a3 = av.entityValues[0].getEnumeration(3, a3$);
		a4 = av.entityValues[0].getInteger(4);
		a5 = av.entityValues[0].getInstance(5, this, a5$);
		a6 = av.entityValues[0].getInstance(6, this, a6$);
		a7 = av.entityValues[0].getInteger(7);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcOwnerHistory
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setEnumeration(2, a2, a2$);
		av.entityValues[0].setEnumeration(3, a3, a3$);
		av.entityValues[0].setInteger(4, a4);
		av.entityValues[0].setInstance(5, a5);
		av.entityValues[0].setInstance(6, a6);
		av.entityValues[0].setInteger(7, a7);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcOwnerHistory
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
		av.entityValues[0].setEnumeration(2, a2, a2$);
		av.entityValues[0].setEnumeration(3, a3, a3$);
		av.entityValues[0].setInteger(4, a4);
		av.entityValues[0].setInstance(5, a5);
		av.entityValues[0].setInstance(6, a6);
		av.entityValues[0].setInteger(7, a7);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcownerhistoryCorrectchangeaction(SdaiContext _context) throws SdaiException {
	









		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTimeStamp).set(_context, get(a4$))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTimeStamp).set(_context, get(a4$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).set(_context, get(a3$)))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcTimeStamp).set(_context, get(a4$)))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).set(_context, get(a3$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).setEnum(_context, "NOTDEFINED")), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).set(_context, get(a3$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcChangeActionEnum).setEnum(_context, "NOCHANGE")))))).getLogical());
	}
}
