/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPolyline

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpolyline extends CIfcboundedcurve implements EIfcpolyline {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpolyline.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	protected AIfccartesianpoint a0; // Points - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Points - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfccartesianpoint a0;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3885=DERIVED_ATTRIBUTE('Dim',#3883,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfccurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfccurve type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: (new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfcpolyline.definition).set(_context, this))
				return ((new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfcpolyline.definition).set(_context, this)));
	}
	public int getDim(EIfccurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfccurve)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfccurve type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #4993=EXPLICIT_ATTRIBUTE('Points',#4991,0,#7009,$,.F.);
	//<01> generating methods for consolidated attribute:  Points
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Points, base type: LIST OF ENTITY
	public static int usedinPoints(EIfcpolyline type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testPoints(EIfcpolyline type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfccartesianpoint getPoints(EIfcpolyline type) throws SdaiException {
		return (AIfccartesianpoint)get_aggregate(a0);
	}
	public AIfccartesianpoint createPoints(EIfcpolyline type) throws SdaiException {
		a0 = (AIfccartesianpoint)create_aggregate_class(a0, a0$,  AIfccartesianpoint.class, 0);
		return a0;
	}
	public void unsetPoints(EIfcpolyline type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributePoints(EIfcpolyline type) throws SdaiException {
		return a0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfccartesianpoint)av.entityValues[3].getInstanceAggregate(0, a0$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfccartesianpoint)av.entityValues[3].getInstanceAggregate(0, a0$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPolyline
		av.entityValues[3].setInstanceAggregate(0, a0);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPolyline
		av.entityValues[3].setInstanceAggregate(0, a0);
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpolylineSamedim(SdaiContext _context) throws SdaiException {
	






									
									Value _internal_aggregate_source152 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(a0$));
									Value _result150 = Value.alloc(_internal_aggregate_source152).create();
									if (_internal_aggregate_source152.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i151 = 1; _i151 <= _internal_aggregate_source152.getMemberCount(); _i151++) {
											Value _implicit_35_Temp = _internal_aggregate_source152.getByIndex(_i151);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_35_Temp.getAttribute("dim", _context), Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("dim", _context)).getLogical() == 2) {
												_result150.addMember(_context, _implicit_35_Temp);
											} else
											if (_internal_aggregate_source152.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_35_Temp.unset();
												_result150.addMember(_context, _implicit_35_Temp);
											}
										}
									} else {
										_result150.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result150), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
