/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcCurveStyle

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccurvestyle extends CIfcpresentationstyle implements EIfccurvestyle {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccurvestyle.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected Object a1; // CurveFont - current entity - SELECT IfcCurveFontOrScaledCurveFontSelect
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a2; // CurveWidth - current entity - SELECT IfcSizeSelect
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2$$; // current SELECT path indicator
	protected Object a3; // CurveColour - current entity - SELECT IfcColour
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected int a4; // ModelOrDraughting - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// CurveFont - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// CurveWidth - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a2;
	protected int a2$$;
	// CurveColour - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// ModelOrDraughting - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected int a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5037=EXPLICIT_ATTRIBUTE('Name',#5035,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3898=EXPLICIT_ATTRIBUTE('CurveFont',#3896,0,#3133,$,.T.);
	//<01> generating methods for consolidated attribute:  CurveFont
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: CurveFont
	public static int usedinCurvefont(EIfccurvestyle type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testCurvefont(EIfccurvestyle type) throws SdaiException {
		return test_instance(a1);
	}

	public EEntity getCurvefont(EIfccurvestyle type) throws SdaiException { // case 1
		return get_instance_select(a1);
	}

	public void setCurvefont(EIfccurvestyle type, EEntity value) throws SdaiException { // case 1
		a1 = set_instance(a1, value);
	}

	public void unsetCurvefont(EIfccurvestyle type) throws SdaiException {
		a1 = unset_instance(a1);
	}

	public static jsdai.dictionary.EAttribute attributeCurvefont(EIfccurvestyle type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3899=EXPLICIT_ATTRIBUTE('CurveWidth',#3896,1,#3197,$,.T.);
	//<01> generating methods for consolidated attribute:  CurveWidth
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: CurveWidth
	public int testCurvewidth(EIfccurvestyle type) throws SdaiException {
		return test_select(a2, a2$$);
	}

	public String getCurvewidth(EIfccurvestyle type, EIfcdescriptivemeasure node1) throws SdaiException { // case 2
		return get_string_select(a2, a2$$, 2);
	}
	public double getCurvewidth(EIfccurvestyle type, EIfclengthmeasure node1) throws SdaiException { // case 3
		return get_double_select(a2, a2$$, 3);
	}
	public double getCurvewidth(EIfccurvestyle type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 4
		return get_double_select(a2, a2$$, 4);
	}
	public double getCurvewidth(EIfccurvestyle type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 5
		return get_double_select(a2, a2$$, 5);
	}
	public double getCurvewidth(EIfccurvestyle type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 6
		return get_double_select(a2, a2$$, 6);
	}
	public double getCurvewidth(EIfccurvestyle type, EIfcratiomeasure node1) throws SdaiException { // case 7
		return get_double_select(a2, a2$$, 7);
	}

	public void setCurvewidth(EIfccurvestyle type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 2
		a2 = set_string(value);
		a2$$ = 2;
	}
	public void setCurvewidth(EIfccurvestyle type, double value, EIfclengthmeasure node1) throws SdaiException { // case 3
		a2 = set_double_select(value);
		a2$$ = 3;
	}
	public void setCurvewidth(EIfccurvestyle type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 4
		a2 = set_double_select(value);
		a2$$ = 4;
	}
	public void setCurvewidth(EIfccurvestyle type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 5
		a2 = set_double_select(value);
		a2$$ = 5;
	}
	public void setCurvewidth(EIfccurvestyle type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 6
		a2 = set_double_select(value);
		a2$$ = 6;
	}
	public void setCurvewidth(EIfccurvestyle type, double value, EIfcratiomeasure node1) throws SdaiException { // case 7
		a2 = set_double_select(value);
		a2$$ = 7;
	}

	public void unsetCurvewidth(EIfccurvestyle type) throws SdaiException {
		a2 = unset_select(a2);
		a2$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeCurvewidth(EIfccurvestyle type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3900=EXPLICIT_ATTRIBUTE('CurveColour',#3896,2,#3125,$,.T.);
	//<01> generating methods for consolidated attribute:  CurveColour
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: CurveColour
	public static int usedinCurvecolour(EIfccurvestyle type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testCurvecolour(EIfccurvestyle type) throws SdaiException {
		return test_instance(a3);
	}

	public EEntity getCurvecolour(EIfccurvestyle type) throws SdaiException { // case 1
		return get_instance_select(a3);
	}

	public void setCurvecolour(EIfccurvestyle type, EEntity value) throws SdaiException { // case 1
		a3 = set_instance(a3, value);
	}

	public void unsetCurvecolour(EIfccurvestyle type) throws SdaiException {
		a3 = unset_instance(a3);
	}

	public static jsdai.dictionary.EAttribute attributeCurvecolour(EIfccurvestyle type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #3901=EXPLICIT_ATTRIBUTE('ModelOrDraughting',#3896,3,#6,$,.T.);
	//<01> generating methods for consolidated attribute:  ModelOrDraughting
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ModelOrDraughting, base type: BOOLEAN
	public boolean testModelordraughting(EIfccurvestyle type) throws SdaiException {
		return test_boolean(a4);
	}
	public boolean getModelordraughting(EIfccurvestyle type) throws SdaiException {
		return get_boolean(a4);
	}
	public void setModelordraughting(EIfccurvestyle type, boolean value) throws SdaiException {
		a4 = set_boolean(value);
	}
	public void unsetModelordraughting(EIfccurvestyle type) throws SdaiException {
		a4 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeModelordraughting(EIfccurvestyle type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = 0;
			a0 = null;
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a2 = av.entityValues[0].getMixed(1,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(2, this, a3$);
		a4 = av.entityValues[0].getBoolean(3);
		a0 = av.entityValues[1].getString(0);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a2 = unset_select(a2);
			a2$$ = 0;
			a3 = unset_instance(a3);
			a4 = 0;
			a0 = null;
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a2 = av.entityValues[0].getMixed(1,a2$, this);
		a2$$ = av.entityValues[0].getSelectNumber();
		a3 = av.entityValues[0].getInstance(2, this, a3$);
		a4 = av.entityValues[0].getBoolean(3);
		a0 = av.entityValues[1].getString(0);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCurveStyle
		av.entityValues[0].setInstance(0, a1);
		av.entityValues[0].setMixed(1, a2, a2$, a2$$);
		av.entityValues[0].setInstance(2, a3);
		av.entityValues[0].setBoolean(3, a4);
		// partial entity: IfcPresentationStyle
		av.entityValues[1].setString(0, a0);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCurveStyle
		av.entityValues[0].setInstance(0, a1);
		av.entityValues[0].setMixed(1, a2, a2$, a2$$);
		av.entityValues[0].setInstance(2, a3);
		av.entityValues[0].setBoolean(3, a4);
		// partial entity: IfcPresentationStyle
		av.entityValues[1].setString(0, a0);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfccurvestyleMeasureofwidth(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSizeSelect).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCPOSITIVELENGTHMEASURE", "IFC4"), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSizeSelect).set(_context, get(a2$)).typeOfV(_context))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCDESCRIPTIVEMEASURE", "IFC4"), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSizeSelect).set(_context, get(a2$)).typeOfV(_context)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSizeSelect).set(_context, get(a2$)), Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "by layer"))))).getLogical());
	}
	public int rIfccurvestyleIdentifiablecurvestyle(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcCurveFontOrScaledCurveFontSelect).set(_context, get(a1$))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSizeSelect).set(_context, get(a2$)))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcColour).set(_context, get(a3$))))).getLogical());
	}
}
