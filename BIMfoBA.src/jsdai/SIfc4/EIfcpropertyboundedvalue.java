/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java interface for entity IfcPropertyBoundedValue

package jsdai.SIfc4;
import jsdai.lang.*;

public interface EIfcpropertyboundedvalue extends EIfcsimpleproperty {

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: UpperBoundValue
	int sUpperboundvalueIfcabsorbeddosemeasure = 2;
	int sUpperboundvalueIfcaccelerationmeasure = 3;
	int sUpperboundvalueIfcangularvelocitymeasure = 4;
	int sUpperboundvalueIfcareadensitymeasure = 5;
	int sUpperboundvalueIfccompoundplaneanglemeasure = 6;
	int sUpperboundvalueIfccurvaturemeasure = 7;
	int sUpperboundvalueIfcdoseequivalentmeasure = 8;
	int sUpperboundvalueIfcdynamicviscositymeasure = 9;
	int sUpperboundvalueIfcelectriccapacitancemeasure = 10;
	int sUpperboundvalueIfcelectricchargemeasure = 11;
	int sUpperboundvalueIfcelectricconductancemeasure = 12;
	int sUpperboundvalueIfcelectricresistancemeasure = 13;
	int sUpperboundvalueIfcelectricvoltagemeasure = 14;
	int sUpperboundvalueIfcenergymeasure = 15;
	int sUpperboundvalueIfcforcemeasure = 16;
	int sUpperboundvalueIfcfrequencymeasure = 17;
	int sUpperboundvalueIfcheatfluxdensitymeasure = 18;
	int sUpperboundvalueIfcheatingvaluemeasure = 19;
	int sUpperboundvalueIfcilluminancemeasure = 20;
	int sUpperboundvalueIfcinductancemeasure = 21;
	int sUpperboundvalueIfcintegercountratemeasure = 22;
	int sUpperboundvalueIfcionconcentrationmeasure = 23;
	int sUpperboundvalueIfcisothermalmoisturecapacitymeasure = 24;
	int sUpperboundvalueIfckinematicviscositymeasure = 25;
	int sUpperboundvalueIfclinearforcemeasure = 26;
	int sUpperboundvalueIfclinearmomentmeasure = 27;
	int sUpperboundvalueIfclinearstiffnessmeasure = 28;
	int sUpperboundvalueIfclinearvelocitymeasure = 29;
	int sUpperboundvalueIfcluminousfluxmeasure = 30;
	int sUpperboundvalueIfcluminousintensitydistributionmeasure = 31;
	int sUpperboundvalueIfcmagneticfluxdensitymeasure = 32;
	int sUpperboundvalueIfcmagneticfluxmeasure = 33;
	int sUpperboundvalueIfcmassdensitymeasure = 34;
	int sUpperboundvalueIfcmassflowratemeasure = 35;
	int sUpperboundvalueIfcmassperlengthmeasure = 36;
	int sUpperboundvalueIfcmodulusofelasticitymeasure = 37;
	int sUpperboundvalueIfcmodulusoflinearsubgradereactionmeasure = 38;
	int sUpperboundvalueIfcmodulusofrotationalsubgradereactionmeasure = 39;
	int sUpperboundvalueIfcmodulusofsubgradereactionmeasure = 40;
	int sUpperboundvalueIfcmoisturediffusivitymeasure = 41;
	int sUpperboundvalueIfcmolecularweightmeasure = 42;
	int sUpperboundvalueIfcmomentofinertiameasure = 43;
	int sUpperboundvalueIfcmonetarymeasure = 44;
	int sUpperboundvalueIfcphmeasure = 45;
	int sUpperboundvalueIfcplanarforcemeasure = 46;
	int sUpperboundvalueIfcpowermeasure = 47;
	int sUpperboundvalueIfcpressuremeasure = 48;
	int sUpperboundvalueIfcradioactivitymeasure = 49;
	int sUpperboundvalueIfcrotationalfrequencymeasure = 50;
	int sUpperboundvalueIfcrotationalmassmeasure = 51;
	int sUpperboundvalueIfcrotationalstiffnessmeasure = 52;
	int sUpperboundvalueIfcsectionmodulusmeasure = 53;
	int sUpperboundvalueIfcsectionalareaintegralmeasure = 54;
	int sUpperboundvalueIfcshearmodulusmeasure = 55;
	int sUpperboundvalueIfcsoundpowerlevelmeasure = 56;
	int sUpperboundvalueIfcsoundpowermeasure = 57;
	int sUpperboundvalueIfcsoundpressurelevelmeasure = 58;
	int sUpperboundvalueIfcsoundpressuremeasure = 59;
	int sUpperboundvalueIfcspecificheatcapacitymeasure = 60;
	int sUpperboundvalueIfctemperaturegradientmeasure = 61;
	int sUpperboundvalueIfctemperaturerateofchangemeasure = 62;
	int sUpperboundvalueIfcthermaladmittancemeasure = 63;
	int sUpperboundvalueIfcthermalconductivitymeasure = 64;
	int sUpperboundvalueIfcthermalexpansioncoefficientmeasure = 65;
	int sUpperboundvalueIfcthermalresistancemeasure = 66;
	int sUpperboundvalueIfcthermaltransmittancemeasure = 67;
	int sUpperboundvalueIfctorquemeasure = 68;
	int sUpperboundvalueIfcvaporpermeabilitymeasure = 69;
	int sUpperboundvalueIfcvolumetricflowratemeasure = 70;
	int sUpperboundvalueIfcwarpingconstantmeasure = 71;
	int sUpperboundvalueIfcwarpingmomentmeasure = 72;
	int sUpperboundvalueIfcamountofsubstancemeasure = 73;
	int sUpperboundvalueIfcareameasure = 74;
	int sUpperboundvalueIfccomplexnumber = 75;
	int sUpperboundvalueIfccontextdependentmeasure = 76;
	int sUpperboundvalueIfccountmeasure = 77;
	int sUpperboundvalueIfcdescriptivemeasure = 78;
	int sUpperboundvalueIfcelectriccurrentmeasure = 79;
	int sUpperboundvalueIfclengthmeasure = 80;
	int sUpperboundvalueIfcluminousintensitymeasure = 81;
	int sUpperboundvalueIfcmassmeasure = 82;
	int sUpperboundvalueIfcnonnegativelengthmeasure = 83;
	int sUpperboundvalueIfcnormalisedratiomeasure = 84;
	int sUpperboundvalueIfcnumericmeasure = 85;
	int sUpperboundvalueIfcparametervalue = 86;
	int sUpperboundvalueIfcplaneanglemeasure = 87;
	int sUpperboundvalueIfcpositivelengthmeasure = 88;
	int sUpperboundvalueIfcpositiveplaneanglemeasure = 89;
	int sUpperboundvalueIfcpositiveratiomeasure = 90;
	int sUpperboundvalueIfcratiomeasure = 91;
	int sUpperboundvalueIfcsolidanglemeasure = 92;
	int sUpperboundvalueIfcthermodynamictemperaturemeasure = 93;
	int sUpperboundvalueIfctimemeasure = 94;
	int sUpperboundvalueIfcvolumemeasure = 95;
	int sUpperboundvalueIfcboolean = 96;
	int sUpperboundvalueIfcdate = 97;
	int sUpperboundvalueIfcdatetime = 98;
	int sUpperboundvalueIfcduration = 99;
	int sUpperboundvalueIfcidentifier = 100;
	int sUpperboundvalueIfcinteger = 101;
	int sUpperboundvalueIfclabel = 102;
	int sUpperboundvalueIfclogical = 103;
	int sUpperboundvalueIfcreal = 104;
	int sUpperboundvalueIfctext = 105;
	int sUpperboundvalueIfctime = 106;
	int sUpperboundvalueIfctimestamp = 107;

	int testUpperboundvalue(EIfcpropertyboundedvalue type) throws SdaiException;

	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException; // case 15
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException; // case 16
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException; // case 21
	int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException; // case 45
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException; // case 47
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException; // case 48
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException; // case 68
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException; // case 74
	A_double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException; // case 77
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException; // case 80
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException; // case 82
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException; // case 85
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException; // case 86
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException; // case 91
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException; // case 94
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException; // case 95
	boolean getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException; // case 96
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException; // case 97
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException; // case 98
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException; // case 99
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException; // case 100
	int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException; // case 101
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException; // case 102
	int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException; // case 103
	double getUpperboundvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException; // case 104
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException; // case 105
	String getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException; // case 106
	int getUpperboundvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException; // case 107

	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer createUpperboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException; // case 15
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException; // case 16
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException; // case 21
	void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException; // case 45
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException; // case 47
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException; // case 48
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException; // case 68
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException; // case 74
	A_double createUpperboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException; // case 77
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException; // case 80
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException; // case 82
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException; // case 85
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException; // case 86
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException; // case 91
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException; // case 94
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException; // case 95
	void setUpperboundvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException; // case 96
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException; // case 97
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException; // case 98
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException; // case 99
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException; // case 100
	void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException; // case 101
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException; // case 102
	void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException; // case 103
	void setUpperboundvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException; // case 104
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException; // case 105
	void setUpperboundvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException; // case 106
	void setUpperboundvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException; // case 107

	void unsetUpperboundvalue(EIfcpropertyboundedvalue type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: LowerBoundValue
	int sLowerboundvalueIfcabsorbeddosemeasure = 2;
	int sLowerboundvalueIfcaccelerationmeasure = 3;
	int sLowerboundvalueIfcangularvelocitymeasure = 4;
	int sLowerboundvalueIfcareadensitymeasure = 5;
	int sLowerboundvalueIfccompoundplaneanglemeasure = 6;
	int sLowerboundvalueIfccurvaturemeasure = 7;
	int sLowerboundvalueIfcdoseequivalentmeasure = 8;
	int sLowerboundvalueIfcdynamicviscositymeasure = 9;
	int sLowerboundvalueIfcelectriccapacitancemeasure = 10;
	int sLowerboundvalueIfcelectricchargemeasure = 11;
	int sLowerboundvalueIfcelectricconductancemeasure = 12;
	int sLowerboundvalueIfcelectricresistancemeasure = 13;
	int sLowerboundvalueIfcelectricvoltagemeasure = 14;
	int sLowerboundvalueIfcenergymeasure = 15;
	int sLowerboundvalueIfcforcemeasure = 16;
	int sLowerboundvalueIfcfrequencymeasure = 17;
	int sLowerboundvalueIfcheatfluxdensitymeasure = 18;
	int sLowerboundvalueIfcheatingvaluemeasure = 19;
	int sLowerboundvalueIfcilluminancemeasure = 20;
	int sLowerboundvalueIfcinductancemeasure = 21;
	int sLowerboundvalueIfcintegercountratemeasure = 22;
	int sLowerboundvalueIfcionconcentrationmeasure = 23;
	int sLowerboundvalueIfcisothermalmoisturecapacitymeasure = 24;
	int sLowerboundvalueIfckinematicviscositymeasure = 25;
	int sLowerboundvalueIfclinearforcemeasure = 26;
	int sLowerboundvalueIfclinearmomentmeasure = 27;
	int sLowerboundvalueIfclinearstiffnessmeasure = 28;
	int sLowerboundvalueIfclinearvelocitymeasure = 29;
	int sLowerboundvalueIfcluminousfluxmeasure = 30;
	int sLowerboundvalueIfcluminousintensitydistributionmeasure = 31;
	int sLowerboundvalueIfcmagneticfluxdensitymeasure = 32;
	int sLowerboundvalueIfcmagneticfluxmeasure = 33;
	int sLowerboundvalueIfcmassdensitymeasure = 34;
	int sLowerboundvalueIfcmassflowratemeasure = 35;
	int sLowerboundvalueIfcmassperlengthmeasure = 36;
	int sLowerboundvalueIfcmodulusofelasticitymeasure = 37;
	int sLowerboundvalueIfcmodulusoflinearsubgradereactionmeasure = 38;
	int sLowerboundvalueIfcmodulusofrotationalsubgradereactionmeasure = 39;
	int sLowerboundvalueIfcmodulusofsubgradereactionmeasure = 40;
	int sLowerboundvalueIfcmoisturediffusivitymeasure = 41;
	int sLowerboundvalueIfcmolecularweightmeasure = 42;
	int sLowerboundvalueIfcmomentofinertiameasure = 43;
	int sLowerboundvalueIfcmonetarymeasure = 44;
	int sLowerboundvalueIfcphmeasure = 45;
	int sLowerboundvalueIfcplanarforcemeasure = 46;
	int sLowerboundvalueIfcpowermeasure = 47;
	int sLowerboundvalueIfcpressuremeasure = 48;
	int sLowerboundvalueIfcradioactivitymeasure = 49;
	int sLowerboundvalueIfcrotationalfrequencymeasure = 50;
	int sLowerboundvalueIfcrotationalmassmeasure = 51;
	int sLowerboundvalueIfcrotationalstiffnessmeasure = 52;
	int sLowerboundvalueIfcsectionmodulusmeasure = 53;
	int sLowerboundvalueIfcsectionalareaintegralmeasure = 54;
	int sLowerboundvalueIfcshearmodulusmeasure = 55;
	int sLowerboundvalueIfcsoundpowerlevelmeasure = 56;
	int sLowerboundvalueIfcsoundpowermeasure = 57;
	int sLowerboundvalueIfcsoundpressurelevelmeasure = 58;
	int sLowerboundvalueIfcsoundpressuremeasure = 59;
	int sLowerboundvalueIfcspecificheatcapacitymeasure = 60;
	int sLowerboundvalueIfctemperaturegradientmeasure = 61;
	int sLowerboundvalueIfctemperaturerateofchangemeasure = 62;
	int sLowerboundvalueIfcthermaladmittancemeasure = 63;
	int sLowerboundvalueIfcthermalconductivitymeasure = 64;
	int sLowerboundvalueIfcthermalexpansioncoefficientmeasure = 65;
	int sLowerboundvalueIfcthermalresistancemeasure = 66;
	int sLowerboundvalueIfcthermaltransmittancemeasure = 67;
	int sLowerboundvalueIfctorquemeasure = 68;
	int sLowerboundvalueIfcvaporpermeabilitymeasure = 69;
	int sLowerboundvalueIfcvolumetricflowratemeasure = 70;
	int sLowerboundvalueIfcwarpingconstantmeasure = 71;
	int sLowerboundvalueIfcwarpingmomentmeasure = 72;
	int sLowerboundvalueIfcamountofsubstancemeasure = 73;
	int sLowerboundvalueIfcareameasure = 74;
	int sLowerboundvalueIfccomplexnumber = 75;
	int sLowerboundvalueIfccontextdependentmeasure = 76;
	int sLowerboundvalueIfccountmeasure = 77;
	int sLowerboundvalueIfcdescriptivemeasure = 78;
	int sLowerboundvalueIfcelectriccurrentmeasure = 79;
	int sLowerboundvalueIfclengthmeasure = 80;
	int sLowerboundvalueIfcluminousintensitymeasure = 81;
	int sLowerboundvalueIfcmassmeasure = 82;
	int sLowerboundvalueIfcnonnegativelengthmeasure = 83;
	int sLowerboundvalueIfcnormalisedratiomeasure = 84;
	int sLowerboundvalueIfcnumericmeasure = 85;
	int sLowerboundvalueIfcparametervalue = 86;
	int sLowerboundvalueIfcplaneanglemeasure = 87;
	int sLowerboundvalueIfcpositivelengthmeasure = 88;
	int sLowerboundvalueIfcpositiveplaneanglemeasure = 89;
	int sLowerboundvalueIfcpositiveratiomeasure = 90;
	int sLowerboundvalueIfcratiomeasure = 91;
	int sLowerboundvalueIfcsolidanglemeasure = 92;
	int sLowerboundvalueIfcthermodynamictemperaturemeasure = 93;
	int sLowerboundvalueIfctimemeasure = 94;
	int sLowerboundvalueIfcvolumemeasure = 95;
	int sLowerboundvalueIfcboolean = 96;
	int sLowerboundvalueIfcdate = 97;
	int sLowerboundvalueIfcdatetime = 98;
	int sLowerboundvalueIfcduration = 99;
	int sLowerboundvalueIfcidentifier = 100;
	int sLowerboundvalueIfcinteger = 101;
	int sLowerboundvalueIfclabel = 102;
	int sLowerboundvalueIfclogical = 103;
	int sLowerboundvalueIfcreal = 104;
	int sLowerboundvalueIfctext = 105;
	int sLowerboundvalueIfctime = 106;
	int sLowerboundvalueIfctimestamp = 107;

	int testLowerboundvalue(EIfcpropertyboundedvalue type) throws SdaiException;

	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException; // case 15
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException; // case 16
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException; // case 21
	int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException; // case 45
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException; // case 47
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException; // case 48
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException; // case 68
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException; // case 74
	A_double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException; // case 77
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException; // case 80
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException; // case 82
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException; // case 85
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException; // case 86
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException; // case 91
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException; // case 94
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException; // case 95
	boolean getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException; // case 96
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException; // case 97
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException; // case 98
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException; // case 99
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException; // case 100
	int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException; // case 101
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException; // case 102
	int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException; // case 103
	double getLowerboundvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException; // case 104
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException; // case 105
	String getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException; // case 106
	int getLowerboundvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException; // case 107

	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer createLowerboundvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException; // case 15
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException; // case 16
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException; // case 21
	void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException; // case 45
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException; // case 47
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException; // case 48
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException; // case 68
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException; // case 74
	A_double createLowerboundvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException; // case 77
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException; // case 80
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException; // case 82
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException; // case 85
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException; // case 86
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException; // case 91
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException; // case 94
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException; // case 95
	void setLowerboundvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException; // case 96
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException; // case 97
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException; // case 98
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException; // case 99
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException; // case 100
	void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException; // case 101
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException; // case 102
	void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException; // case 103
	void setLowerboundvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException; // case 104
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException; // case 105
	void setLowerboundvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException; // case 106
	void setLowerboundvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException; // case 107

	void unsetLowerboundvalue(EIfcpropertyboundedvalue type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: Unit
	boolean testUnit(EIfcpropertyboundedvalue type) throws SdaiException;

	EEntity getUnit(EIfcpropertyboundedvalue type) throws SdaiException; // case 1

	void setUnit(EIfcpropertyboundedvalue type, EEntity value) throws SdaiException; // case 1

	void unsetUnit(EIfcpropertyboundedvalue type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: SetPointValue
	int sSetpointvalueIfcabsorbeddosemeasure = 2;
	int sSetpointvalueIfcaccelerationmeasure = 3;
	int sSetpointvalueIfcangularvelocitymeasure = 4;
	int sSetpointvalueIfcareadensitymeasure = 5;
	int sSetpointvalueIfccompoundplaneanglemeasure = 6;
	int sSetpointvalueIfccurvaturemeasure = 7;
	int sSetpointvalueIfcdoseequivalentmeasure = 8;
	int sSetpointvalueIfcdynamicviscositymeasure = 9;
	int sSetpointvalueIfcelectriccapacitancemeasure = 10;
	int sSetpointvalueIfcelectricchargemeasure = 11;
	int sSetpointvalueIfcelectricconductancemeasure = 12;
	int sSetpointvalueIfcelectricresistancemeasure = 13;
	int sSetpointvalueIfcelectricvoltagemeasure = 14;
	int sSetpointvalueIfcenergymeasure = 15;
	int sSetpointvalueIfcforcemeasure = 16;
	int sSetpointvalueIfcfrequencymeasure = 17;
	int sSetpointvalueIfcheatfluxdensitymeasure = 18;
	int sSetpointvalueIfcheatingvaluemeasure = 19;
	int sSetpointvalueIfcilluminancemeasure = 20;
	int sSetpointvalueIfcinductancemeasure = 21;
	int sSetpointvalueIfcintegercountratemeasure = 22;
	int sSetpointvalueIfcionconcentrationmeasure = 23;
	int sSetpointvalueIfcisothermalmoisturecapacitymeasure = 24;
	int sSetpointvalueIfckinematicviscositymeasure = 25;
	int sSetpointvalueIfclinearforcemeasure = 26;
	int sSetpointvalueIfclinearmomentmeasure = 27;
	int sSetpointvalueIfclinearstiffnessmeasure = 28;
	int sSetpointvalueIfclinearvelocitymeasure = 29;
	int sSetpointvalueIfcluminousfluxmeasure = 30;
	int sSetpointvalueIfcluminousintensitydistributionmeasure = 31;
	int sSetpointvalueIfcmagneticfluxdensitymeasure = 32;
	int sSetpointvalueIfcmagneticfluxmeasure = 33;
	int sSetpointvalueIfcmassdensitymeasure = 34;
	int sSetpointvalueIfcmassflowratemeasure = 35;
	int sSetpointvalueIfcmassperlengthmeasure = 36;
	int sSetpointvalueIfcmodulusofelasticitymeasure = 37;
	int sSetpointvalueIfcmodulusoflinearsubgradereactionmeasure = 38;
	int sSetpointvalueIfcmodulusofrotationalsubgradereactionmeasure = 39;
	int sSetpointvalueIfcmodulusofsubgradereactionmeasure = 40;
	int sSetpointvalueIfcmoisturediffusivitymeasure = 41;
	int sSetpointvalueIfcmolecularweightmeasure = 42;
	int sSetpointvalueIfcmomentofinertiameasure = 43;
	int sSetpointvalueIfcmonetarymeasure = 44;
	int sSetpointvalueIfcphmeasure = 45;
	int sSetpointvalueIfcplanarforcemeasure = 46;
	int sSetpointvalueIfcpowermeasure = 47;
	int sSetpointvalueIfcpressuremeasure = 48;
	int sSetpointvalueIfcradioactivitymeasure = 49;
	int sSetpointvalueIfcrotationalfrequencymeasure = 50;
	int sSetpointvalueIfcrotationalmassmeasure = 51;
	int sSetpointvalueIfcrotationalstiffnessmeasure = 52;
	int sSetpointvalueIfcsectionmodulusmeasure = 53;
	int sSetpointvalueIfcsectionalareaintegralmeasure = 54;
	int sSetpointvalueIfcshearmodulusmeasure = 55;
	int sSetpointvalueIfcsoundpowerlevelmeasure = 56;
	int sSetpointvalueIfcsoundpowermeasure = 57;
	int sSetpointvalueIfcsoundpressurelevelmeasure = 58;
	int sSetpointvalueIfcsoundpressuremeasure = 59;
	int sSetpointvalueIfcspecificheatcapacitymeasure = 60;
	int sSetpointvalueIfctemperaturegradientmeasure = 61;
	int sSetpointvalueIfctemperaturerateofchangemeasure = 62;
	int sSetpointvalueIfcthermaladmittancemeasure = 63;
	int sSetpointvalueIfcthermalconductivitymeasure = 64;
	int sSetpointvalueIfcthermalexpansioncoefficientmeasure = 65;
	int sSetpointvalueIfcthermalresistancemeasure = 66;
	int sSetpointvalueIfcthermaltransmittancemeasure = 67;
	int sSetpointvalueIfctorquemeasure = 68;
	int sSetpointvalueIfcvaporpermeabilitymeasure = 69;
	int sSetpointvalueIfcvolumetricflowratemeasure = 70;
	int sSetpointvalueIfcwarpingconstantmeasure = 71;
	int sSetpointvalueIfcwarpingmomentmeasure = 72;
	int sSetpointvalueIfcamountofsubstancemeasure = 73;
	int sSetpointvalueIfcareameasure = 74;
	int sSetpointvalueIfccomplexnumber = 75;
	int sSetpointvalueIfccontextdependentmeasure = 76;
	int sSetpointvalueIfccountmeasure = 77;
	int sSetpointvalueIfcdescriptivemeasure = 78;
	int sSetpointvalueIfcelectriccurrentmeasure = 79;
	int sSetpointvalueIfclengthmeasure = 80;
	int sSetpointvalueIfcluminousintensitymeasure = 81;
	int sSetpointvalueIfcmassmeasure = 82;
	int sSetpointvalueIfcnonnegativelengthmeasure = 83;
	int sSetpointvalueIfcnormalisedratiomeasure = 84;
	int sSetpointvalueIfcnumericmeasure = 85;
	int sSetpointvalueIfcparametervalue = 86;
	int sSetpointvalueIfcplaneanglemeasure = 87;
	int sSetpointvalueIfcpositivelengthmeasure = 88;
	int sSetpointvalueIfcpositiveplaneanglemeasure = 89;
	int sSetpointvalueIfcpositiveratiomeasure = 90;
	int sSetpointvalueIfcratiomeasure = 91;
	int sSetpointvalueIfcsolidanglemeasure = 92;
	int sSetpointvalueIfcthermodynamictemperaturemeasure = 93;
	int sSetpointvalueIfctimemeasure = 94;
	int sSetpointvalueIfcvolumemeasure = 95;
	int sSetpointvalueIfcboolean = 96;
	int sSetpointvalueIfcdate = 97;
	int sSetpointvalueIfcdatetime = 98;
	int sSetpointvalueIfcduration = 99;
	int sSetpointvalueIfcidentifier = 100;
	int sSetpointvalueIfcinteger = 101;
	int sSetpointvalueIfclabel = 102;
	int sSetpointvalueIfclogical = 103;
	int sSetpointvalueIfcreal = 104;
	int sSetpointvalueIfctext = 105;
	int sSetpointvalueIfctime = 106;
	int sSetpointvalueIfctimestamp = 107;

	int testSetpointvalue(EIfcpropertyboundedvalue type) throws SdaiException;

	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer getSetpointvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcenergymeasure node1) throws SdaiException; // case 15
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcforcemeasure node1) throws SdaiException; // case 16
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcinductancemeasure node1) throws SdaiException; // case 21
	int getSetpointvalue(EIfcpropertyboundedvalue type, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcphmeasure node1) throws SdaiException; // case 45
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpowermeasure node1) throws SdaiException; // case 47
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpressuremeasure node1) throws SdaiException; // case 48
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctorquemeasure node1) throws SdaiException; // case 68
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcareameasure node1) throws SdaiException; // case 74
	A_double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfccountmeasure node1) throws SdaiException; // case 77
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfclengthmeasure node1) throws SdaiException; // case 80
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcmassmeasure node1) throws SdaiException; // case 82
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcnumericmeasure node1) throws SdaiException; // case 85
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcparametervalue node1) throws SdaiException; // case 86
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcratiomeasure node1) throws SdaiException; // case 91
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfctimemeasure node1) throws SdaiException; // case 94
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcvolumemeasure node1) throws SdaiException; // case 95
	boolean getSetpointvalue(EIfcpropertyboundedvalue type, EIfcboolean node1) throws SdaiException; // case 96
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdate node1) throws SdaiException; // case 97
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcdatetime node1) throws SdaiException; // case 98
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcduration node1) throws SdaiException; // case 99
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfcidentifier node1) throws SdaiException; // case 100
	int getSetpointvalue(EIfcpropertyboundedvalue type, EIfcinteger node1) throws SdaiException; // case 101
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfclabel node1) throws SdaiException; // case 102
	int getSetpointvalue(EIfcpropertyboundedvalue type, EIfclogical node1) throws SdaiException; // case 103
	double getSetpointvalue(EIfcpropertyboundedvalue type, EIfcreal node1) throws SdaiException; // case 104
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfctext node1) throws SdaiException; // case 105
	String getSetpointvalue(EIfcpropertyboundedvalue type, EIfctime node1) throws SdaiException; // case 106
	int getSetpointvalue(EIfcpropertyboundedvalue type, EIfctimestamp node1) throws SdaiException; // case 107

	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcabsorbeddosemeasure node1) throws SdaiException; // case 2
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcaccelerationmeasure node1) throws SdaiException; // case 3
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcangularvelocitymeasure node1) throws SdaiException; // case 4
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcareadensitymeasure node1) throws SdaiException; // case 5
	A_integer createSetpointvalue(EIfcpropertyboundedvalue type, EIfccompoundplaneanglemeasure node1) throws SdaiException; // case 6
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccurvaturemeasure node1) throws SdaiException; // case 7
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcdoseequivalentmeasure node1) throws SdaiException; // case 8
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcdynamicviscositymeasure node1) throws SdaiException; // case 9
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccapacitancemeasure node1) throws SdaiException; // case 10
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricchargemeasure node1) throws SdaiException; // case 11
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricconductancemeasure node1) throws SdaiException; // case 12
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricresistancemeasure node1) throws SdaiException; // case 13
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectricvoltagemeasure node1) throws SdaiException; // case 14
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcenergymeasure node1) throws SdaiException; // case 15
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcforcemeasure node1) throws SdaiException; // case 16
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcfrequencymeasure node1) throws SdaiException; // case 17
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcheatfluxdensitymeasure node1) throws SdaiException; // case 18
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcheatingvaluemeasure node1) throws SdaiException; // case 19
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcilluminancemeasure node1) throws SdaiException; // case 20
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcinductancemeasure node1) throws SdaiException; // case 21
	void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfcintegercountratemeasure node1) throws SdaiException; // case 22
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcionconcentrationmeasure node1) throws SdaiException; // case 23
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcisothermalmoisturecapacitymeasure node1) throws SdaiException; // case 24
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfckinematicviscositymeasure node1) throws SdaiException; // case 25
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearforcemeasure node1) throws SdaiException; // case 26
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearmomentmeasure node1) throws SdaiException; // case 27
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 28
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclinearvelocitymeasure node1) throws SdaiException; // case 29
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousfluxmeasure node1) throws SdaiException; // case 30
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitydistributionmeasure node1) throws SdaiException; // case 31
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxdensitymeasure node1) throws SdaiException; // case 32
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmagneticfluxmeasure node1) throws SdaiException; // case 33
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassdensitymeasure node1) throws SdaiException; // case 34
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassflowratemeasure node1) throws SdaiException; // case 35
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassperlengthmeasure node1) throws SdaiException; // case 36
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofelasticitymeasure node1) throws SdaiException; // case 37
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusoflinearsubgradereactionmeasure node1) throws SdaiException; // case 38
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofrotationalsubgradereactionmeasure node1) throws SdaiException; // case 39
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmodulusofsubgradereactionmeasure node1) throws SdaiException; // case 40
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmoisturediffusivitymeasure node1) throws SdaiException; // case 41
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmolecularweightmeasure node1) throws SdaiException; // case 42
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmomentofinertiameasure node1) throws SdaiException; // case 43
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmonetarymeasure node1) throws SdaiException; // case 44
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcphmeasure node1) throws SdaiException; // case 45
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcplanarforcemeasure node1) throws SdaiException; // case 46
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpowermeasure node1) throws SdaiException; // case 47
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpressuremeasure node1) throws SdaiException; // case 48
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcradioactivitymeasure node1) throws SdaiException; // case 49
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalfrequencymeasure node1) throws SdaiException; // case 50
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalmassmeasure node1) throws SdaiException; // case 51
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 52
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionmodulusmeasure node1) throws SdaiException; // case 53
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsectionalareaintegralmeasure node1) throws SdaiException; // case 54
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcshearmodulusmeasure node1) throws SdaiException; // case 55
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowerlevelmeasure node1) throws SdaiException; // case 56
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpowermeasure node1) throws SdaiException; // case 57
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressurelevelmeasure node1) throws SdaiException; // case 58
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsoundpressuremeasure node1) throws SdaiException; // case 59
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcspecificheatcapacitymeasure node1) throws SdaiException; // case 60
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturegradientmeasure node1) throws SdaiException; // case 61
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctemperaturerateofchangemeasure node1) throws SdaiException; // case 62
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaladmittancemeasure node1) throws SdaiException; // case 63
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalconductivitymeasure node1) throws SdaiException; // case 64
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalexpansioncoefficientmeasure node1) throws SdaiException; // case 65
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermalresistancemeasure node1) throws SdaiException; // case 66
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermaltransmittancemeasure node1) throws SdaiException; // case 67
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctorquemeasure node1) throws SdaiException; // case 68
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvaporpermeabilitymeasure node1) throws SdaiException; // case 69
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumetricflowratemeasure node1) throws SdaiException; // case 70
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingconstantmeasure node1) throws SdaiException; // case 71
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcwarpingmomentmeasure node1) throws SdaiException; // case 72
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcamountofsubstancemeasure node1) throws SdaiException; // case 73
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcareameasure node1) throws SdaiException; // case 74
	A_double createSetpointvalue(EIfcpropertyboundedvalue type, EIfccomplexnumber node1) throws SdaiException; // case 75
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccontextdependentmeasure node1) throws SdaiException; // case 76
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfccountmeasure node1) throws SdaiException; // case 77
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdescriptivemeasure node1) throws SdaiException; // case 78
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcelectriccurrentmeasure node1) throws SdaiException; // case 79
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfclengthmeasure node1) throws SdaiException; // case 80
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcluminousintensitymeasure node1) throws SdaiException; // case 81
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcmassmeasure node1) throws SdaiException; // case 82
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnonnegativelengthmeasure node1) throws SdaiException; // case 83
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException; // case 84
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcnumericmeasure node1) throws SdaiException; // case 85
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcparametervalue node1) throws SdaiException; // case 86
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcplaneanglemeasure node1) throws SdaiException; // case 87
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositivelengthmeasure node1) throws SdaiException; // case 88
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveplaneanglemeasure node1) throws SdaiException; // case 89
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcpositiveratiomeasure node1) throws SdaiException; // case 90
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcratiomeasure node1) throws SdaiException; // case 91
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcsolidanglemeasure node1) throws SdaiException; // case 92
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcthermodynamictemperaturemeasure node1) throws SdaiException; // case 93
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfctimemeasure node1) throws SdaiException; // case 94
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcvolumemeasure node1) throws SdaiException; // case 95
	void setSetpointvalue(EIfcpropertyboundedvalue type, boolean value, EIfcboolean node1) throws SdaiException; // case 96
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdate node1) throws SdaiException; // case 97
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcdatetime node1) throws SdaiException; // case 98
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcduration node1) throws SdaiException; // case 99
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfcidentifier node1) throws SdaiException; // case 100
	void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfcinteger node1) throws SdaiException; // case 101
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfclabel node1) throws SdaiException; // case 102
	void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfclogical node1) throws SdaiException; // case 103
	void setSetpointvalue(EIfcpropertyboundedvalue type, double value, EIfcreal node1) throws SdaiException; // case 104
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfctext node1) throws SdaiException; // case 105
	void setSetpointvalue(EIfcpropertyboundedvalue type, String value, EIfctime node1) throws SdaiException; // case 106
	void setSetpointvalue(EIfcpropertyboundedvalue type, int value, EIfctimestamp node1) throws SdaiException; // case 107

	void unsetSetpointvalue(EIfcpropertyboundedvalue type) throws SdaiException;

}
