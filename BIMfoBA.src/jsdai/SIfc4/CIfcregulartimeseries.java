/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRegularTimeSeries

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcregulartimeseries extends CIfctimeseries implements EIfcregulartimeseries {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcregulartimeseries.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// Description: protected String a1;   Description - java inheritance - STRING
	// StartTime: protected String a2;   StartTime - java inheritance - STRING
	// EndTime: protected String a3;   EndTime - java inheritance - STRING
	// TimeSeriesDataType: protected int a4;   TimeSeriesDataType - java inheritance - ENUMERATION IfcTimeSeriesDataTypeEnum
	// DataOrigin: protected int a5;   DataOrigin - java inheritance - ENUMERATION IfcDataOriginEnum
	// UserDefinedDataOrigin: protected String a6;   UserDefinedDataOrigin - java inheritance - STRING
	// Unit: protected Object a7;   Unit - java inheritance - SELECT IfcUnit
	// HasExternalReference: protected Object  - inverse - java inheritance -  ENTITY IfcExternalReferenceRelationship
	protected double a8; // TimeStep - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected AIfctimeseriesvalue a9; // Values - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected String a1;
	// StartTime - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// EndTime - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// TimeSeriesDataType - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected int a4;
	// DataOrigin - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected int a5;
	// UserDefinedDataOrigin - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected String a6;
	// Unit - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	// protected Object a7;
	// HasExternalReference - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// TimeStep - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected double a8;
	// Values - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected AIfctimeseriesvalue a9;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a9, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a9, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6218=EXPLICIT_ATTRIBUTE('Name',#6216,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6219=EXPLICIT_ATTRIBUTE('Description',#6216,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6220=EXPLICIT_ATTRIBUTE('StartTime',#6216,2,#2477,$,.F.);
	//<01> generating methods for consolidated attribute:  StartTime
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6221=EXPLICIT_ATTRIBUTE('EndTime',#6216,3,#2477,$,.F.);
	//<01> generating methods for consolidated attribute:  EndTime
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6222=EXPLICIT_ATTRIBUTE('TimeSeriesDataType',#6216,4,#3065,$,.F.);
	//<01> generating methods for consolidated attribute:  TimeSeriesDataType
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6223=EXPLICIT_ATTRIBUTE('DataOrigin',#6216,5,#2803,$,.F.);
	//<01> generating methods for consolidated attribute:  DataOrigin
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6224=EXPLICIT_ATTRIBUTE('UserDefinedDataOrigin',#6216,6,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UserDefinedDataOrigin
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6225=EXPLICIT_ATTRIBUTE('Unit',#6216,7,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  Unit
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// -1- methods for SELECT attribute: Unit
	public static int usedinUnit(EIfctimeseries type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a7$, domain, result);
	}
	//going through all the attributes: #6226=INVERSE_ATTRIBUTE('HasExternalReference',#6216,0,#4231,$,#4234,#9664,$,.F.);
	//<01> generating methods for consolidated attribute:  HasExternalReference
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5285=EXPLICIT_ATTRIBUTE('TimeStep',#5283,0,#2681,$,.F.);
	//<01> generating methods for consolidated attribute:  TimeStep
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: TimeStep, base type: REAL
	public boolean testTimestep(EIfcregulartimeseries type) throws SdaiException {
		return test_double(a8);
	}
	public double getTimestep(EIfcregulartimeseries type) throws SdaiException {
		return get_double(a8);
	}
	public void setTimestep(EIfcregulartimeseries type, double value) throws SdaiException {
		a8 = set_double(value);
	}
	public void unsetTimestep(EIfcregulartimeseries type) throws SdaiException {
		a8 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeTimestep(EIfcregulartimeseries type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #5286=EXPLICIT_ATTRIBUTE('Values',#5283,1,#7069,$,.F.);
	//<01> generating methods for consolidated attribute:  Values
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Values, base type: LIST OF ENTITY
	public static int usedinValues(EIfcregulartimeseries type, EIfctimeseriesvalue instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	public boolean testValues(EIfcregulartimeseries type) throws SdaiException {
		return test_aggregate(a9);
	}
	public AIfctimeseriesvalue getValues(EIfcregulartimeseries type) throws SdaiException {
		return (AIfctimeseriesvalue)get_aggregate(a9);
	}
	public AIfctimeseriesvalue createValues(EIfcregulartimeseries type) throws SdaiException {
		a9 = (AIfctimeseriesvalue)create_aggregate_class(a9, a9$,  AIfctimeseriesvalue.class, 0);
		return a9;
	}
	public void unsetValues(EIfcregulartimeseries type) throws SdaiException {
		unset_aggregate(a9);
		a9 = null;
	}
	public static jsdai.dictionary.EAttribute attributeValues(EIfcregulartimeseries type) throws SdaiException {
		return a9$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a8 = Double.NaN;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			a0 = null;
			a1 = null;
			a2 = null;
			a3 = null;
			a4 = 0;
			a5 = 0;
			a6 = null;
			a7 = unset_instance(a7);
			return;
		}
		a8 = av.entityValues[0].getDouble(0);
		a9 = (AIfctimeseriesvalue)av.entityValues[0].getInstanceAggregate(1, a9$, this);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
		a2 = av.entityValues[1].getString(2);
		a3 = av.entityValues[1].getString(3);
		a4 = av.entityValues[1].getEnumeration(4, a4$);
		a5 = av.entityValues[1].getEnumeration(5, a5$);
		a6 = av.entityValues[1].getString(6);
		a7 = av.entityValues[1].getInstance(7, this, a7$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a8 = Double.NaN;
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			a0 = null;
			a1 = null;
			a2 = null;
			a3 = null;
			a4 = 0;
			a5 = 0;
			a6 = null;
			a7 = unset_instance(a7);
			return;
		}
		a8 = av.entityValues[0].getDouble(0);
		a9 = (AIfctimeseriesvalue)av.entityValues[0].getInstanceAggregate(1, a9$, this);
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getString(1);
		a2 = av.entityValues[1].getString(2);
		a3 = av.entityValues[1].getString(3);
		a4 = av.entityValues[1].getEnumeration(4, a4$);
		a5 = av.entityValues[1].getEnumeration(5, a5$);
		a6 = av.entityValues[1].getString(6);
		a7 = av.entityValues[1].getInstance(7, this, a7$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRegularTimeSeries
		av.entityValues[0].setDouble(0, a8);
		av.entityValues[0].setInstanceAggregate(1, a9);
		// partial entity: IfcTimeSeries
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		av.entityValues[1].setString(2, a2);
		av.entityValues[1].setString(3, a3);
		av.entityValues[1].setEnumeration(4, a4, a4$);
		av.entityValues[1].setEnumeration(5, a5, a5$);
		av.entityValues[1].setString(6, a6);
		av.entityValues[1].setInstance(7, a7);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRegularTimeSeries
		av.entityValues[0].setDouble(0, a8);
		av.entityValues[0].setInstanceAggregate(1, a9);
		// partial entity: IfcTimeSeries
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setString(1, a1);
		av.entityValues[1].setString(2, a2);
		av.entityValues[1].setString(3, a3);
		av.entityValues[1].setEnumeration(4, a4, a4$);
		av.entityValues[1].setEnumeration(5, a5, a5$);
		av.entityValues[1].setString(6, a6);
		av.entityValues[1].setInstance(7, a7);
	}
}
