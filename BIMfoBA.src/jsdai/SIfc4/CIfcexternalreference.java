/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcExternalReference

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcexternalreference extends CEntity implements EIfcexternalreference {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcexternalreference.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // Location - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // Identification - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// ExternalReferenceForResources: protected Object  - inverse - current -  ENTITY IfcExternalReferenceRelationship
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Location - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Identification - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// ExternalReferenceForResources - inverse - current entity
	protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #4227=EXPLICIT_ATTRIBUTE('Location',#4225,0,#2687,$,.T.);
	//<01> generating methods for consolidated attribute:  Location
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Location, base type: STRING
	public boolean testLocation(EIfcexternalreference type) throws SdaiException {
		return test_string(a0);
	}
	public String getLocation(EIfcexternalreference type) throws SdaiException {
		return get_string(a0);
	}
	public void setLocation(EIfcexternalreference type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetLocation(EIfcexternalreference type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeLocation(EIfcexternalreference type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #4228=EXPLICIT_ATTRIBUTE('Identification',#4225,1,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Identification
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Identification, base type: STRING
	public boolean testIdentification(EIfcexternalreference type) throws SdaiException {
		return test_string(a1);
	}
	public String getIdentification(EIfcexternalreference type) throws SdaiException {
		return get_string(a1);
	}
	public void setIdentification(EIfcexternalreference type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetIdentification(EIfcexternalreference type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeIdentification(EIfcexternalreference type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4229=EXPLICIT_ATTRIBUTE('Name',#4225,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfcexternalreference type) throws SdaiException {
		return test_string(a2);
	}
	public String getName(EIfcexternalreference type) throws SdaiException {
		return get_string(a2);
	}
	public void setName(EIfcexternalreference type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetName(EIfcexternalreference type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfcexternalreference type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #4230=INVERSE_ATTRIBUTE('ExternalReferenceForResources',#4225,0,#4231,$,#4233,#8311,$,.F.);
	//<01> generating methods for consolidated attribute:  ExternalReferenceForResources
	//<01-0> current entity
	//<01-0-2> inverse attribute - generateInverseCurrentEntityMethodsX()
	// Inverse attribute - ExternalReferenceForResources : SET[0:-2147483648] OF IfcExternalReferenceRelationship FOR RelatingReference
	public AIfcexternalreferencerelationship getExternalreferenceforresources(EIfcexternalreference type, ASdaiModel domain) throws SdaiException {
		AIfcexternalreferencerelationship result = (AIfcexternalreferencerelationship)get_inverse_aggregate(i0$);
		CIfcexternalreferencerelationship.usedinRelatingreference(null, this, domain, result);
		return result;
	}
	public static jsdai.dictionary.EAttribute attributeExternalreferenceforresources(EIfcexternalreference type) throws SdaiException {
		return i0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcExternalReference
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcExternalReference
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcexternalreferenceWr1(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcIdentifier).set(_context, get(a1$))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcURIReference).set(_context, get(a0$)))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcLabel).set(_context, get(a2$))))).getLogical());
	}
}
