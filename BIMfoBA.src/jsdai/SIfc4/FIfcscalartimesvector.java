/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcScalarTimesVector

package jsdai.SIfc4;
import jsdai.lang.*;







public class FIfcscalartimesvector {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Scalar;
	Value _nonvar__e_Vec;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_V;
	Value _e_Mag;
	Value _e_Result;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Scalar, Value _e_Vec) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Scalar = Value.alloc(ExpressTypes.REAL_TYPE).set(_e_Scalar);
		_nonvar__e_Vec = Value.alloc(jsdai.SIfc4.SIfc4._st_IfcVectorOrDirection).set(_e_Vec);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_V = Value.alloc(jsdai.SIfc4.CIfcdirection.definition);
		_e_Mag = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_Result = Value.alloc(jsdai.SIfc4.CIfcvector.definition);
		// end of initialization of local variables





																																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Scalar)), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Vec))).getLogical() == 2) {																																					
		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, Value.alloc(ExpressTypes.GENERIC_TYPE).unset()).check(_context, jsdai.SIfc4.CIfcvector.definition);
																																					} else {																																					
																																						if (Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCVECTOR", "IFC4"), _nonvar__e_Vec.typeOfV(_context)).getLogical() == 2) {																																						
																																							_e_V.set(_context, _nonvar__e_Vec.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeOrientation(null), _context));																																						
																																							_e_Mag.set(_context, Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _nonvar__e_Scalar, _nonvar__e_Vec.groupReference(_context, jsdai.SIfc4.CIfcvector.class).getAttribute(jsdai.SIfc4.CIfcvector.attributeMagnitude(null), _context)));																																						
																																						} else {																																						
																																							_e_V.set(_context, _nonvar__e_Vec);																																						
																																							_e_Mag.set(_context, _nonvar__e_Scalar);																																						
																																						}																																						
																																						if (Value.alloc(ExpressTypes.LOGICAL_TYPE).less(_context, _e_Mag, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)).getLogical() == 2) {																																						
																																							Value _end439 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(_e_V.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context)));
																																							Value _step439 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
																																							for (Value _implicit_109_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_109_i, _end439).getLogical() == 2;_implicit_109_i.inc(_step439)) {																																							
																																								_e_V.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_109_i, null).set(_context, Value.alloc(ExpressTypes.NUMBER_TYPE).negation(_e_V.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_109_i, null)));
																																							} // for - REPEAT																																						
																																							_e_Mag.set(_context, Value.alloc(ExpressTypes.NUMBER_TYPE).negation(_e_Mag));																																						
																																						}																																																																															
																																						_e_Result.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcvector.definition).addParameter((new jsdai.SIfc4.FIfcnormalise()).run(_context, _e_V)).addParameter(_e_Mag)));																																									
																																					}




		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, _e_Result).check(_context, jsdai.SIfc4.CIfcvector.definition);

		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
