/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java interface for entity IfcBoundaryNodeCondition

package jsdai.SIfc4;
import jsdai.lang.*;

public interface EIfcboundarynodecondition extends EIfcboundarycondition {

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: TranslationalStiffnessX
	int sTranslationalstiffnessxIfcboolean = 2;
	int sTranslationalstiffnessxIfclinearstiffnessmeasure = 3;

	int testTranslationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException;

	boolean getTranslationalstiffnessx(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getTranslationalstiffnessx(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void setTranslationalstiffnessx(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setTranslationalstiffnessx(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetTranslationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: TranslationalStiffnessY
	int sTranslationalstiffnessyIfcboolean = 2;
	int sTranslationalstiffnessyIfclinearstiffnessmeasure = 3;

	int testTranslationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException;

	boolean getTranslationalstiffnessy(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getTranslationalstiffnessy(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void setTranslationalstiffnessy(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setTranslationalstiffnessy(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetTranslationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: TranslationalStiffnessZ
	int sTranslationalstiffnesszIfcboolean = 2;
	int sTranslationalstiffnesszIfclinearstiffnessmeasure = 3;

	int testTranslationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException;

	boolean getTranslationalstiffnessz(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getTranslationalstiffnessz(EIfcboundarynodecondition type, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void setTranslationalstiffnessz(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setTranslationalstiffnessz(EIfcboundarynodecondition type, double value, EIfclinearstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetTranslationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: RotationalStiffnessX
	int sRotationalstiffnessxIfcboolean = 2;
	int sRotationalstiffnessxIfcrotationalstiffnessmeasure = 3;

	int testRotationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException;

	boolean getRotationalstiffnessx(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getRotationalstiffnessx(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void setRotationalstiffnessx(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setRotationalstiffnessx(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetRotationalstiffnessx(EIfcboundarynodecondition type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: RotationalStiffnessY
	int sRotationalstiffnessyIfcboolean = 2;
	int sRotationalstiffnessyIfcrotationalstiffnessmeasure = 3;

	int testRotationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException;

	boolean getRotationalstiffnessy(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getRotationalstiffnessy(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void setRotationalstiffnessy(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setRotationalstiffnessy(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetRotationalstiffnessy(EIfcboundarynodecondition type) throws SdaiException;

	// generateExplicitAttributeMethodDeclarations: 1
	// constants and methods for SELECT attribute: RotationalStiffnessZ
	int sRotationalstiffnesszIfcboolean = 2;
	int sRotationalstiffnesszIfcrotationalstiffnessmeasure = 3;

	int testRotationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException;

	boolean getRotationalstiffnessz(EIfcboundarynodecondition type, EIfcboolean node1) throws SdaiException; // case 2
	double getRotationalstiffnessz(EIfcboundarynodecondition type, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void setRotationalstiffnessz(EIfcboundarynodecondition type, boolean value, EIfcboolean node1) throws SdaiException; // case 2
	void setRotationalstiffnessz(EIfcboundarynodecondition type, double value, EIfcrotationalstiffnessmeasure node1) throws SdaiException; // case 3

	void unsetRotationalstiffnessz(EIfcboundarynodecondition type) throws SdaiException;

}
