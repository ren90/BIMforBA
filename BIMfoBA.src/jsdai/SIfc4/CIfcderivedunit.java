/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcDerivedUnit

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcderivedunit extends CEntity implements EIfcderivedunit {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcderivedunit.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected AIfcderivedunitelement a0; // Elements - current entity - SET OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected int a1; // UnitType - current entity - ENUMERATION IfcDerivedUnitEnum
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // UserDefinedType - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// Dimensions: protected Object  - derived - current -  ENTITY IfcDimensionalExponents
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Elements - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcderivedunitelement a0;
	// UnitType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1;
	// UserDefinedType - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// Dimensions - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3931=EXPLICIT_ATTRIBUTE('Elements',#3929,0,#6889,$,.F.);
	//<01> generating methods for consolidated attribute:  Elements
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Elements, base type: SET OF ENTITY
	public static int usedinElements(EIfcderivedunit type, EIfcderivedunitelement instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testElements(EIfcderivedunit type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfcderivedunitelement getElements(EIfcderivedunit type) throws SdaiException {
		return (AIfcderivedunitelement)get_aggregate(a0);
	}
	public AIfcderivedunitelement createElements(EIfcderivedunit type) throws SdaiException {
		a0 = (AIfcderivedunitelement)create_aggregate_class(a0, a0$,  AIfcderivedunitelement.class, 0);
		return a0;
	}
	public void unsetElements(EIfcderivedunit type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributeElements(EIfcderivedunit type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3932=EXPLICIT_ATTRIBUTE('UnitType',#3929,1,#2805,$,.F.);
	//<01> generating methods for consolidated attribute:  UnitType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:UnitType, base type: ENUMERATION
	public boolean testUnittype(EIfcderivedunit type) throws SdaiException {
		return test_enumeration(a1);
	}
	public int getUnittype(EIfcderivedunit type) throws SdaiException {
		return get_enumeration(a1);
	}
	public void setUnittype(EIfcderivedunit type, int value) throws SdaiException {
		a1 = set_enumeration(value, a1$);
	}
	public void unsetUnittype(EIfcderivedunit type) throws SdaiException {
		a1 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeUnittype(EIfcderivedunit type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3933=EXPLICIT_ATTRIBUTE('UserDefinedType',#3929,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UserDefinedType
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: UserDefinedType, base type: STRING
	public boolean testUserdefinedtype(EIfcderivedunit type) throws SdaiException {
		return test_string(a2);
	}
	public String getUserdefinedtype(EIfcderivedunit type) throws SdaiException {
		return get_string(a2);
	}
	public void setUserdefinedtype(EIfcderivedunit type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetUserdefinedtype(EIfcderivedunit type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeUserdefinedtype(EIfcderivedunit type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #3934=DERIVED_ATTRIBUTE('Dimensions',#3929,0,#3939,$);
	//<01> generating methods for consolidated attribute:  Dimensions
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// derived attribute (current derived or supertype derived): Dimensions, base type: entity IfcDimensionalExponents
	public boolean testDimensions(EIfcderivedunit type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDimensions(EIfcderivedunit type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: (new jsdai.SIfc4.FIfcderivedimensionalexponents()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a0$)))
				return ((new jsdai.SIfc4.FIfcderivedimensionalexponents()).run(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a0$))));
	}
	public EIfcdimensionalexponents getDimensions(EIfcderivedunit type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return (EIfcdimensionalexponents) getDimensions((EIfcderivedunit)null, _context).getInstance();
	}
	public static jsdai.dictionary.EAttribute attributeDimensions(EIfcderivedunit type) throws SdaiException {
		return d0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = 0;
			a2 = null;
			return;
		}
		a0 = (AIfcderivedunitelement)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
		a2 = av.entityValues[0].getString(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = 0;
			a2 = null;
			return;
		}
		a0 = (AIfcderivedunitelement)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
		a2 = av.entityValues[0].getString(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDerivedUnit
		av.entityValues[0].setInstanceAggregate(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
		av.entityValues[0].setString(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDerivedUnit
		av.entityValues[0].setInstanceAggregate(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
		av.entityValues[0].setString(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcderivedunitWr2(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcDerivedUnitEnum).set(_context, get(a1$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcDerivedUnitEnum).setEnum(_context, "USERDEFINED")), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcDerivedUnitEnum).set(_context, get(a1$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcDerivedUnitEnum).setEnum(_context, "USERDEFINED")), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfcderivedunit.definition).set(_context, this).getAttribute(a2$, _context))))).getLogical());
	}
	public int rIfcderivedunitWr1(SdaiContext _context) throws SdaiException {
	






		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a0$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a0$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(ExpressTypes.SET_GENERIC_TYPE).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute(jsdai.SIfc4.CIfcderivedunitelement.attributeExponent(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))))).getLogical());
	}
}
