/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcWorkTime

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcworktime extends CIfcschedulingtime implements EIfcworktime {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcworktime.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	// DataOrigin: protected int a1;   DataOrigin - java inheritance - ENUMERATION IfcDataOriginEnum
	// UserDefinedDataOrigin: protected String a2;   UserDefinedDataOrigin - java inheritance - STRING
	protected Object a3; // RecurrencePattern - current entity - ENTITY IfcRecurrencePattern
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // Start - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a5; // Finish - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// DataOrigin - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected int a1;
	// UserDefinedDataOrigin - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// RecurrencePattern - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// Start - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// Finish - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected String a5;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a3 == old) {
			a3 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5638=EXPLICIT_ATTRIBUTE('Name',#5636,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5639=EXPLICIT_ATTRIBUTE('DataOrigin',#5636,1,#2803,$,.T.);
	//<01> generating methods for consolidated attribute:  DataOrigin
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5640=EXPLICIT_ATTRIBUTE('UserDefinedDataOrigin',#5636,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  UserDefinedDataOrigin
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6430=EXPLICIT_ATTRIBUTE('RecurrencePattern',#6428,0,#5266,$,.T.);
	//<01> generating methods for consolidated attribute:  RecurrencePattern
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : RecurrencePattern, base type: entity IfcRecurrencePattern
	public static int usedinRecurrencepattern(EIfcworktime type, EIfcrecurrencepattern instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testRecurrencepattern(EIfcworktime type) throws SdaiException {
		return test_instance(a3);
	}
	public EIfcrecurrencepattern getRecurrencepattern(EIfcworktime type) throws SdaiException {
		return (EIfcrecurrencepattern)get_instance(a3);
	}
	public void setRecurrencepattern(EIfcworktime type, EIfcrecurrencepattern value) throws SdaiException {
		a3 = set_instance(a3, value);
	}
	public void unsetRecurrencepattern(EIfcworktime type) throws SdaiException {
		a3 = unset_instance(a3);
	}
	public static jsdai.dictionary.EAttribute attributeRecurrencepattern(EIfcworktime type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #6431=EXPLICIT_ATTRIBUTE('Start',#6428,1,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  Start
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Start, base type: STRING
	public boolean testStart(EIfcworktime type) throws SdaiException {
		return test_string(a4);
	}
	public String getStart(EIfcworktime type) throws SdaiException {
		return get_string(a4);
	}
	public void setStart(EIfcworktime type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetStart(EIfcworktime type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeStart(EIfcworktime type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #6432=EXPLICIT_ATTRIBUTE('Finish',#6428,2,#2475,$,.T.);
	//<01> generating methods for consolidated attribute:  Finish
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Finish, base type: STRING
	public boolean testFinish(EIfcworktime type) throws SdaiException {
		return test_string(a5);
	}
	public String getFinish(EIfcworktime type) throws SdaiException {
		return get_string(a5);
	}
	public void setFinish(EIfcworktime type, String value) throws SdaiException {
		a5 = set_string(value);
	}
	public void unsetFinish(EIfcworktime type) throws SdaiException {
		a5 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeFinish(EIfcworktime type) throws SdaiException {
		return a5$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = 0;
			a2 = null;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
		a2 = av.entityValues[0].getString(2);
		a3 = av.entityValues[1].getInstance(0, this, a3$);
		a4 = av.entityValues[1].getString(1);
		a5 = av.entityValues[1].getString(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = 0;
			a2 = null;
			a3 = unset_instance(a3);
			a4 = null;
			a5 = null;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getEnumeration(1, a1$);
		a2 = av.entityValues[0].getString(2);
		a3 = av.entityValues[1].getInstance(0, this, a3$);
		a4 = av.entityValues[1].getString(1);
		a5 = av.entityValues[1].getString(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcSchedulingTime
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
		av.entityValues[0].setString(2, a2);
		// partial entity: IfcWorkTime
		av.entityValues[1].setInstance(0, a3);
		av.entityValues[1].setString(1, a4);
		av.entityValues[1].setString(2, a5);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcSchedulingTime
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setEnumeration(1, a1, a1$);
		av.entityValues[0].setString(2, a2);
		// partial entity: IfcWorkTime
		av.entityValues[1].setInstance(0, a3);
		av.entityValues[1].setString(1, a4);
		av.entityValues[1].setString(2, a5);
	}
}
