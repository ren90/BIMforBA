/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcFaceSurface

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcfacesurface extends CIfcface implements EIfcfacesurface {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcfacesurface.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Bounds: protected AIfcfacebound a0;   Bounds - java inheritance - SET OF ENTITY
	// HasTextureMaps: protected Object  - inverse - java inheritance -  ENTITY IfcTextureMap
	protected Object a1; // FaceSurface - current entity - ENTITY IfcSurface
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a2; // SameSense - current entity - BOOLEAN
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Bounds - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected AIfcfacebound a0;
	// HasTextureMaps - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// FaceSurface - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// SameSense - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected int a2;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4256=EXPLICIT_ATTRIBUTE('Bounds',#4254,0,#6919,$,.F.);
	//<01> generating methods for consolidated attribute:  Bounds
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: Bounds, base type: SET OF ENTITY
	public static int usedinBounds(EIfcface type, EIfcfacebound instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #4257=INVERSE_ATTRIBUTE('HasTextureMaps',#4254,0,#6202,$,#6205,#8329,$,.F.);
	//<01> generating methods for consolidated attribute:  HasTextureMaps
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4270=EXPLICIT_ATTRIBUTE('FaceSurface',#4268,0,#5952,$,.F.);
	//<01> generating methods for consolidated attribute:  FaceSurface
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : FaceSurface, base type: entity IfcSurface
	public static int usedinFacesurface(EIfcfacesurface type, EIfcsurface instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testFacesurface(EIfcfacesurface type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfcsurface getFacesurface(EIfcfacesurface type) throws SdaiException {
		return (EIfcsurface)get_instance(a1);
	}
	public void setFacesurface(EIfcfacesurface type, EIfcsurface value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetFacesurface(EIfcfacesurface type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeFacesurface(EIfcfacesurface type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #4271=EXPLICIT_ATTRIBUTE('SameSense',#4268,1,#6,$,.F.);
	//<01> generating methods for consolidated attribute:  SameSense
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: SameSense, base type: BOOLEAN
	public boolean testSamesense(EIfcfacesurface type) throws SdaiException {
		return test_boolean(a2);
	}
	public boolean getSamesense(EIfcfacesurface type) throws SdaiException {
		return get_boolean(a2);
	}
	public void setSamesense(EIfcfacesurface type, boolean value) throws SdaiException {
		a2 = set_boolean(value);
	}
	public void unsetSamesense(EIfcfacesurface type) throws SdaiException {
		a2 = unset_boolean();
	}
	public static jsdai.dictionary.EAttribute attributeSamesense(EIfcfacesurface type) throws SdaiException {
		return a2$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = (AIfcfacebound)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[1].getInstance(0, this, a1$);
		a2 = av.entityValues[1].getBoolean(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			a1 = unset_instance(a1);
			a2 = 0;
			return;
		}
		a0 = (AIfcfacebound)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[1].getInstance(0, this, a1$);
		a2 = av.entityValues[1].getBoolean(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcFace
		av.entityValues[0].setInstanceAggregate(0, a0);
		// partial entity: IfcFaceSurface
		av.entityValues[1].setInstance(0, a1);
		av.entityValues[1].setBoolean(1, a2);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcFace
		av.entityValues[0].setInstanceAggregate(0, a0);
		// partial entity: IfcFaceSurface
		av.entityValues[1].setInstance(0, a1);
		av.entityValues[1].setBoolean(1, a2);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}
}
