/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcSectionedSpine

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcsectionedspine extends CIfcgeometricrepresentationitem implements EIfcsectionedspine {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcsectionedspine.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected Object a0; // SpineCurve - current entity - ENTITY IfcCompositeCurve
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcprofiledef a1; // CrossSections - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcaxis2placement3d a2; // CrossSectionPositions - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// Dim: protected int  - derived - current -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// SpineCurve - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// CrossSections - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected AIfcprofiledef a1;
	// CrossSectionPositions - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected AIfcaxis2placement3d a2;
	// Dim - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a1, old, newer);
		changeReferencesAggregate(a2, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		changeReferencesAggregate(a1, old, newer);
		changeReferencesAggregate(a2, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5656=EXPLICIT_ATTRIBUTE('SpineCurve',#5654,0,#3684,$,.F.);
	//<01> generating methods for consolidated attribute:  SpineCurve
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : SpineCurve, base type: entity IfcCompositeCurve
	public static int usedinSpinecurve(EIfcsectionedspine type, EIfccompositecurve instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testSpinecurve(EIfcsectionedspine type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfccompositecurve getSpinecurve(EIfcsectionedspine type) throws SdaiException {
		return (EIfccompositecurve)get_instance(a0);
	}
	public void setSpinecurve(EIfcsectionedspine type, EIfccompositecurve value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetSpinecurve(EIfcsectionedspine type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeSpinecurve(EIfcsectionedspine type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #5657=EXPLICIT_ATTRIBUTE('CrossSections',#5654,1,#7122,$,.F.);
	//<01> generating methods for consolidated attribute:  CrossSections
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: CrossSections, base type: LIST OF ENTITY
	public static int usedinCrosssections(EIfcsectionedspine type, EIfcprofiledef instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testCrosssections(EIfcsectionedspine type) throws SdaiException {
		return test_aggregate(a1);
	}
	public AIfcprofiledef getCrosssections(EIfcsectionedspine type) throws SdaiException {
		return (AIfcprofiledef)get_aggregate(a1);
	}
	public AIfcprofiledef createCrosssections(EIfcsectionedspine type) throws SdaiException {
		a1 = (AIfcprofiledef)create_aggregate_class(a1, a1$,  AIfcprofiledef.class, 0);
		return a1;
	}
	public void unsetCrosssections(EIfcsectionedspine type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeCrosssections(EIfcsectionedspine type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5658=EXPLICIT_ATTRIBUTE('CrossSectionPositions',#5654,2,#7123,$,.F.);
	//<01> generating methods for consolidated attribute:  CrossSectionPositions
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: CrossSectionPositions, base type: LIST OF ENTITY
	public static int usedinCrosssectionpositions(EIfcsectionedspine type, EIfcaxis2placement3d instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a2$, domain, result);
	}
	public boolean testCrosssectionpositions(EIfcsectionedspine type) throws SdaiException {
		return test_aggregate(a2);
	}
	public AIfcaxis2placement3d getCrosssectionpositions(EIfcsectionedspine type) throws SdaiException {
		return (AIfcaxis2placement3d)get_aggregate(a2);
	}
	public AIfcaxis2placement3d createCrosssectionpositions(EIfcsectionedspine type) throws SdaiException {
		a2 = (AIfcaxis2placement3d)create_aggregate_class(a2, a2$,  AIfcaxis2placement3d.class, 0);
		return a2;
	}
	public void unsetCrosssectionpositions(EIfcsectionedspine type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeCrosssectionpositions(EIfcsectionedspine type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5659=DERIVED_ATTRIBUTE('Dim',#5654,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcsectionedspine type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcsectionedspine type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3));
	}
	public int getDim(EIfcsectionedspine type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcsectionedspine)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcsectionedspine type) throws SdaiException {
		return d0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
		a1 = (AIfcprofiledef)av.entityValues[2].getInstanceAggregate(1, a1$, this);
		a2 = (AIfcaxis2placement3d)av.entityValues[2].getInstanceAggregate(2, a2$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			if (a2 instanceof CAggregate)
				a2.unsetAll();
			a2 = null;
			return;
		}
		a0 = av.entityValues[2].getInstance(0, this, a0$);
		a1 = (AIfcprofiledef)av.entityValues[2].getInstanceAggregate(1, a1$, this);
		a2 = (AIfcaxis2placement3d)av.entityValues[2].getInstanceAggregate(2, a2$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSectionedSpine
		av.entityValues[2].setInstance(0, a0);
		av.entityValues[2].setInstanceAggregate(1, a1);
		av.entityValues[2].setInstanceAggregate(2, a2);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRepresentationItem
		// partial entity: IfcSectionedSpine
		av.entityValues[2].setInstance(0, a0);
		av.entityValues[2].setInstanceAggregate(1, a1);
		av.entityValues[2].setInstanceAggregate(2, a2);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcsectionedspineSpinecurvedim(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfccompositecurve.definition).set(_context, get(a0$)).getAttribute(jsdai.SIfc4.CIfccurve.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3))).getLogical());
	}
	public int rIfcsectionedspineConsistentprofiletypes(SdaiContext _context) throws SdaiException {
	





									
									Value _internal_aggregate_source267 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcprofiledef).set(_context, get(a1$));
									Value _result265 = Value.alloc(_internal_aggregate_source267).create();
									if (_internal_aggregate_source267.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i266 = 1; _i266 <= _internal_aggregate_source267.getMemberCount(); _i266++) {
											Value _implicit_63_temp = _internal_aggregate_source267.getByIndex(_i266);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcprofiledef).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("profiletype", _context), _implicit_63_temp.getAttribute("ProfileType", _context)).getLogical() == 2) {
												_result265.addMember(_context, _implicit_63_temp);
											} else
											if (_internal_aggregate_source267.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_63_temp.unset();
												_result265.addMember(_context, _implicit_63_temp);
											}
										}
									} else {
										_result265.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result265), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
	public int rIfcsectionedspineCorrespondingsectionpositions(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcprofiledef).set(_context, get(a1$))), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcaxis2placement3d).set(_context, get(a2$))))).getLogical());
	}
}
