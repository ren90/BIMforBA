/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRelConnectsWithEccentricity

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcrelconnectswitheccentricity extends CIfcrelconnectsstructuralmember implements EIfcrelconnectswitheccentricity {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcrelconnectswitheccentricity.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	// RelatingStructuralMember: protected Object a4;   RelatingStructuralMember - java inheritance - ENTITY IfcStructuralMember
	// RelatedStructuralConnection: protected Object a5;   RelatedStructuralConnection - java inheritance - ENTITY IfcStructuralConnection
	// AppliedCondition: protected Object a6;   AppliedCondition - java inheritance - ENTITY IfcBoundaryCondition
	// AdditionalConditions: protected Object a7;   AdditionalConditions - java inheritance - ENTITY IfcStructuralConnectionCondition
	// SupportedLength: protected double a8;   SupportedLength - java inheritance - REAL
	// ConditionCoordinateSystem: protected Object a9;   ConditionCoordinateSystem - java inheritance - ENTITY IfcAxis2Placement3D
	protected Object a10; // ConnectionConstraint - current entity - ENTITY IfcConnectionGeometry
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// RelatingStructuralMember - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected Object a4;
	// RelatedStructuralConnection - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected Object a5;
	// AppliedCondition - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected Object a6;
	// AdditionalConditions - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	// protected Object a7;
	// SupportedLength - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	// protected double a8;
	// ConditionCoordinateSystem - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	// protected Object a9;
	// ConnectionConstraint - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
	protected Object a10;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a10 == old) {
			a10 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a10 == old) {
			a10 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5425=EXPLICIT_ATTRIBUTE('RelatingStructuralMember',#5423,0,#5899,$,.F.);
	//<01> generating methods for consolidated attribute:  RelatingStructuralMember
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): RelatingStructuralMember, base type: entity IfcStructuralMember
	public static int usedinRelatingstructuralmember(EIfcrelconnectsstructuralmember type, EIfcstructuralmember instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	//going through all the attributes: #5426=EXPLICIT_ATTRIBUTE('RelatedStructuralConnection',#5423,1,#5808,$,.F.);
	//<01> generating methods for consolidated attribute:  RelatedStructuralConnection
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): RelatedStructuralConnection, base type: entity IfcStructuralConnection
	public static int usedinRelatedstructuralconnection(EIfcrelconnectsstructuralmember type, EIfcstructuralconnection instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	//going through all the attributes: #5427=EXPLICIT_ATTRIBUTE('AppliedCondition',#5423,2,#3454,$,.T.);
	//<01> generating methods for consolidated attribute:  AppliedCondition
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): AppliedCondition, base type: entity IfcBoundaryCondition
	public static int usedinAppliedcondition(EIfcrelconnectsstructuralmember type, EIfcboundarycondition instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	//going through all the attributes: #5428=EXPLICIT_ATTRIBUTE('AdditionalConditions',#5423,3,#5812,$,.T.);
	//<01> generating methods for consolidated attribute:  AdditionalConditions
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): AdditionalConditions, base type: entity IfcStructuralConnectionCondition
	public static int usedinAdditionalconditions(EIfcrelconnectsstructuralmember type, EIfcstructuralconnectioncondition instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a7$, domain, result);
	}
	//going through all the attributes: #5429=EXPLICIT_ATTRIBUTE('SupportedLength',#5423,4,#2543,$,.T.);
	//<01> generating methods for consolidated attribute:  SupportedLength
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5430=EXPLICIT_ATTRIBUTE('ConditionCoordinateSystem',#5423,5,#3382,$,.T.);
	//<01> generating methods for consolidated attribute:  ConditionCoordinateSystem
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): ConditionCoordinateSystem, base type: entity IfcAxis2Placement3D
	public static int usedinConditioncoordinatesystem(EIfcrelconnectsstructuralmember type, EIfcaxis2placement3d instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	//going through all the attributes: #5433=EXPLICIT_ATTRIBUTE('ConnectionConstraint',#5431,0,#3726,$,.F.);
	//<01> generating methods for consolidated attribute:  ConnectionConstraint
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ConnectionConstraint, base type: entity IfcConnectionGeometry
	public static int usedinConnectionconstraint(EIfcrelconnectswitheccentricity type, EIfcconnectiongeometry instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a10$, domain, result);
	}
	public boolean testConnectionconstraint(EIfcrelconnectswitheccentricity type) throws SdaiException {
		return test_instance(a10);
	}
	public EIfcconnectiongeometry getConnectionconstraint(EIfcrelconnectswitheccentricity type) throws SdaiException {
		return (EIfcconnectiongeometry)get_instance(a10);
	}
	public void setConnectionconstraint(EIfcrelconnectswitheccentricity type, EIfcconnectiongeometry value) throws SdaiException {
		a10 = set_instance(a10, value);
	}
	public void unsetConnectionconstraint(EIfcrelconnectswitheccentricity type) throws SdaiException {
		a10 = unset_instance(a10);
	}
	public static jsdai.dictionary.EAttribute attributeConnectionconstraint(EIfcrelconnectswitheccentricity type) throws SdaiException {
		return a10$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = unset_instance(a7);
			a8 = Double.NaN;
			a9 = unset_instance(a9);
			a10 = unset_instance(a10);
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getInstance(2, this, a6$);
		a7 = av.entityValues[2].getInstance(3, this, a7$);
		a8 = av.entityValues[2].getDouble(4);
		a9 = av.entityValues[2].getInstance(5, this, a9$);
		a10 = av.entityValues[3].getInstance(0, this, a10$);
		a0 = av.entityValues[4].getString(0);
		a1 = av.entityValues[4].getInstance(1, this, a1$);
		a2 = av.entityValues[4].getString(2);
		a3 = av.entityValues[4].getString(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = unset_instance(a7);
			a8 = Double.NaN;
			a9 = unset_instance(a9);
			a10 = unset_instance(a10);
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getInstance(2, this, a6$);
		a7 = av.entityValues[2].getInstance(3, this, a7$);
		a8 = av.entityValues[2].getDouble(4);
		a9 = av.entityValues[2].getInstance(5, this, a9$);
		a10 = av.entityValues[3].getInstance(0, this, a10$);
		a0 = av.entityValues[4].getString(0);
		a1 = av.entityValues[4].getInstance(1, this, a1$);
		a2 = av.entityValues[4].getString(2);
		a3 = av.entityValues[4].getString(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRelationship
		// partial entity: IfcRelConnects
		// partial entity: IfcRelConnectsStructuralMember
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setInstance(2, a6);
		av.entityValues[2].setInstance(3, a7);
		av.entityValues[2].setDouble(4, a8);
		av.entityValues[2].setInstance(5, a9);
		// partial entity: IfcRelConnectsWithEccentricity
		av.entityValues[3].setInstance(0, a10);
		// partial entity: IfcRoot
		av.entityValues[4].setString(0, a0);
		av.entityValues[4].setInstance(1, a1);
		av.entityValues[4].setString(2, a2);
		av.entityValues[4].setString(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRelationship
		// partial entity: IfcRelConnects
		// partial entity: IfcRelConnectsStructuralMember
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setInstance(2, a6);
		av.entityValues[2].setInstance(3, a7);
		av.entityValues[2].setDouble(4, a8);
		av.entityValues[2].setInstance(5, a9);
		// partial entity: IfcRelConnectsWithEccentricity
		av.entityValues[3].setInstance(0, a10);
		// partial entity: IfcRoot
		av.entityValues[4].setString(0, a0);
		av.entityValues[4].setInstance(1, a1);
		av.entityValues[4].setString(2, a2);
		av.entityValues[4].setString(3, a3);
	}
}
