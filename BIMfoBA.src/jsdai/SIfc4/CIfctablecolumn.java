/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTableColumn

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctablecolumn extends CEntity implements EIfctablecolumn {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctablecolumn.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected String a0; // Identifier - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a1; // Name - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // Description - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected Object a3; // Unit - current entity - SELECT IfcUnit
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a4; // ReferencePath - current entity - ENTITY IfcReference
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Identifier - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected String a0;
	// Name - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a1;
	// Description - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// Unit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected Object a3;
	// ReferencePath - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a4;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a3 == old) {
			a3 = newer;
		}
		if (a4 == old) {
			a4 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a3 == old) {
			a3 = newer;
		}
		if (a4 == old) {
			a4 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6071=EXPLICIT_ATTRIBUTE('Identifier',#6069,0,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Identifier
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Identifier, base type: STRING
	public boolean testIdentifier(EIfctablecolumn type) throws SdaiException {
		return test_string(a0);
	}
	public String getIdentifier(EIfctablecolumn type) throws SdaiException {
		return get_string(a0);
	}
	public void setIdentifier(EIfctablecolumn type, String value) throws SdaiException {
		a0 = set_string(value);
	}
	public void unsetIdentifier(EIfctablecolumn type) throws SdaiException {
		a0 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeIdentifier(EIfctablecolumn type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #6072=EXPLICIT_ATTRIBUTE('Name',#6069,1,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Name, base type: STRING
	public boolean testName(EIfctablecolumn type) throws SdaiException {
		return test_string(a1);
	}
	public String getName(EIfctablecolumn type) throws SdaiException {
		return get_string(a1);
	}
	public void setName(EIfctablecolumn type, String value) throws SdaiException {
		a1 = set_string(value);
	}
	public void unsetName(EIfctablecolumn type) throws SdaiException {
		a1 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeName(EIfctablecolumn type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6073=EXPLICIT_ATTRIBUTE('Description',#6069,2,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Description, base type: STRING
	public boolean testDescription(EIfctablecolumn type) throws SdaiException {
		return test_string(a2);
	}
	public String getDescription(EIfctablecolumn type) throws SdaiException {
		return get_string(a2);
	}
	public void setDescription(EIfctablecolumn type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetDescription(EIfctablecolumn type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeDescription(EIfctablecolumn type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #6074=EXPLICIT_ATTRIBUTE('Unit',#6069,3,#3221,$,.T.);
	//<01> generating methods for consolidated attribute:  Unit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: Unit
	public static int usedinUnit(EIfctablecolumn type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a3$, domain, result);
	}
	public boolean testUnit(EIfctablecolumn type) throws SdaiException {
		return test_instance(a3);
	}

	public EEntity getUnit(EIfctablecolumn type) throws SdaiException { // case 1
		return get_instance_select(a3);
	}

	public void setUnit(EIfctablecolumn type, EEntity value) throws SdaiException { // case 1
		a3 = set_instance(a3, value);
	}

	public void unsetUnit(EIfctablecolumn type) throws SdaiException {
		a3 = unset_instance(a3);
	}

	public static jsdai.dictionary.EAttribute attributeUnit(EIfctablecolumn type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #6075=EXPLICIT_ATTRIBUTE('ReferencePath',#6069,4,#5276,$,.T.);
	//<01> generating methods for consolidated attribute:  ReferencePath
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ReferencePath, base type: entity IfcReference
	public static int usedinReferencepath(EIfctablecolumn type, EIfcreference instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	public boolean testReferencepath(EIfctablecolumn type) throws SdaiException {
		return test_instance(a4);
	}
	public EIfcreference getReferencepath(EIfctablecolumn type) throws SdaiException {
		return (EIfcreference)get_instance(a4);
	}
	public void setReferencepath(EIfctablecolumn type, EIfcreference value) throws SdaiException {
		a4 = set_instance(a4, value);
	}
	public void unsetReferencepath(EIfctablecolumn type) throws SdaiException {
		a4 = unset_instance(a4);
	}
	public static jsdai.dictionary.EAttribute attributeReferencepath(EIfctablecolumn type) throws SdaiException {
		return a4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = null;
			a3 = unset_instance(a3);
			a4 = unset_instance(a4);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getInstance(4, this, a4$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = null;
			a2 = null;
			a3 = unset_instance(a3);
			a4 = unset_instance(a4);
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[0].getString(1);
		a2 = av.entityValues[0].getString(2);
		a3 = av.entityValues[0].getInstance(3, this, a3$);
		a4 = av.entityValues[0].getInstance(4, this, a4$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcTableColumn
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setInstance(4, a4);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcTableColumn
		av.entityValues[0].setString(0, a0);
		av.entityValues[0].setString(1, a1);
		av.entityValues[0].setString(2, a2);
		av.entityValues[0].setInstance(3, a3);
		av.entityValues[0].setInstance(4, a4);
	}
}
