/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcTextStyleFontModel

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfctextstylefontmodel extends CIfcpredefinedtextfont implements EIfctextstylefontmodel {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfctextstylefontmodel.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected A_string a1; // FontFamily - current entity - LIST OF STRING
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected String a2; // FontStyle - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a3; // FontVariant - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a4; // FontWeight - current entity - STRING
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // FontSize - current entity - SELECT IfcSizeSelect
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected int a5$$; // current SELECT path indicator
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// FontFamily - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected A_string a1;
	// FontStyle - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected String a2;
	// FontVariant - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected String a3;
	// FontWeight - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected String a4;
	// FontSize - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	protected int a5$$;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5014=EXPLICIT_ATTRIBUTE('Name',#5012,0,#2539,$,.F.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6177=EXPLICIT_ATTRIBUTE('FontFamily',#6175,0,#7178,$,.F.);
	//<01> generating methods for consolidated attribute:  FontFamily
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: FontFamily, base type: LIST OF STRING
	public boolean testFontfamily(EIfctextstylefontmodel type) throws SdaiException {
		return test_aggregate(a1);
	}
	public A_string getFontfamily(EIfctextstylefontmodel type) throws SdaiException {
		return (A_string)get_aggregate(a1);
	}
	public A_string createFontfamily(EIfctextstylefontmodel type) throws SdaiException {
		a1 = create_aggregate_string(a1, a1$, 0);
		return a1;
	}
	public void unsetFontfamily(EIfctextstylefontmodel type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeFontfamily(EIfctextstylefontmodel type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #6178=EXPLICIT_ATTRIBUTE('FontStyle',#6175,1,#2507,$,.T.);
	//<01> generating methods for consolidated attribute:  FontStyle
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: FontStyle, base type: STRING
	public boolean testFontstyle(EIfctextstylefontmodel type) throws SdaiException {
		return test_string(a2);
	}
	public String getFontstyle(EIfctextstylefontmodel type) throws SdaiException {
		return get_string(a2);
	}
	public void setFontstyle(EIfctextstylefontmodel type, String value) throws SdaiException {
		a2 = set_string(value);
	}
	public void unsetFontstyle(EIfctextstylefontmodel type) throws SdaiException {
		a2 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeFontstyle(EIfctextstylefontmodel type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #6179=EXPLICIT_ATTRIBUTE('FontVariant',#6175,2,#2509,$,.T.);
	//<01> generating methods for consolidated attribute:  FontVariant
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: FontVariant, base type: STRING
	public boolean testFontvariant(EIfctextstylefontmodel type) throws SdaiException {
		return test_string(a3);
	}
	public String getFontvariant(EIfctextstylefontmodel type) throws SdaiException {
		return get_string(a3);
	}
	public void setFontvariant(EIfctextstylefontmodel type, String value) throws SdaiException {
		a3 = set_string(value);
	}
	public void unsetFontvariant(EIfctextstylefontmodel type) throws SdaiException {
		a3 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeFontvariant(EIfctextstylefontmodel type) throws SdaiException {
		return a3$;
	}

	//going through all the attributes: #6180=EXPLICIT_ATTRIBUTE('FontWeight',#6175,3,#2511,$,.T.);
	//<01> generating methods for consolidated attribute:  FontWeight
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: FontWeight, base type: STRING
	public boolean testFontweight(EIfctextstylefontmodel type) throws SdaiException {
		return test_string(a4);
	}
	public String getFontweight(EIfctextstylefontmodel type) throws SdaiException {
		return get_string(a4);
	}
	public void setFontweight(EIfctextstylefontmodel type, String value) throws SdaiException {
		a4 = set_string(value);
	}
	public void unsetFontweight(EIfctextstylefontmodel type) throws SdaiException {
		a4 = unset_string();
	}
	public static jsdai.dictionary.EAttribute attributeFontweight(EIfctextstylefontmodel type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #6181=EXPLICIT_ATTRIBUTE('FontSize',#6175,4,#3197,$,.F.);
	//<01> generating methods for consolidated attribute:  FontSize
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: FontSize
	public int testFontsize(EIfctextstylefontmodel type) throws SdaiException {
		return test_select(a5, a5$$);
	}

	public String getFontsize(EIfctextstylefontmodel type, EIfcdescriptivemeasure node1) throws SdaiException { // case 2
		return get_string_select(a5, a5$$, 2);
	}
	public double getFontsize(EIfctextstylefontmodel type, EIfclengthmeasure node1) throws SdaiException { // case 3
		return get_double_select(a5, a5$$, 3);
	}
	public double getFontsize(EIfctextstylefontmodel type, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 4
		return get_double_select(a5, a5$$, 4);
	}
	public double getFontsize(EIfctextstylefontmodel type, EIfcpositivelengthmeasure node1) throws SdaiException { // case 5
		return get_double_select(a5, a5$$, 5);
	}
	public double getFontsize(EIfctextstylefontmodel type, EIfcpositiveratiomeasure node1) throws SdaiException { // case 6
		return get_double_select(a5, a5$$, 6);
	}
	public double getFontsize(EIfctextstylefontmodel type, EIfcratiomeasure node1) throws SdaiException { // case 7
		return get_double_select(a5, a5$$, 7);
	}

	public void setFontsize(EIfctextstylefontmodel type, String value, EIfcdescriptivemeasure node1) throws SdaiException { // case 2
		a5 = set_string(value);
		a5$$ = 2;
	}
	public void setFontsize(EIfctextstylefontmodel type, double value, EIfclengthmeasure node1) throws SdaiException { // case 3
		a5 = set_double_select(value);
		a5$$ = 3;
	}
	public void setFontsize(EIfctextstylefontmodel type, double value, EIfcnormalisedratiomeasure node1) throws SdaiException { // case 4
		a5 = set_double_select(value);
		a5$$ = 4;
	}
	public void setFontsize(EIfctextstylefontmodel type, double value, EIfcpositivelengthmeasure node1) throws SdaiException { // case 5
		a5 = set_double_select(value);
		a5$$ = 5;
	}
	public void setFontsize(EIfctextstylefontmodel type, double value, EIfcpositiveratiomeasure node1) throws SdaiException { // case 6
		a5 = set_double_select(value);
		a5$$ = 6;
	}
	public void setFontsize(EIfctextstylefontmodel type, double value, EIfcratiomeasure node1) throws SdaiException { // case 7
		a5 = set_double_select(value);
		a5$$ = 7;
	}

	public void unsetFontsize(EIfctextstylefontmodel type) throws SdaiException {
		a5 = unset_select(a5);
		a5$$ = 0;
	}

	public static jsdai.dictionary.EAttribute attributeFontsize(EIfctextstylefontmodel type) throws SdaiException {
		return a5$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = null;
			a3 = null;
			a4 = null;
			a5 = unset_select(a5);
			a5$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[3].getStringAggregate(0, a1$, this);
		a2 = av.entityValues[3].getString(1);
		a3 = av.entityValues[3].getString(2);
		a4 = av.entityValues[3].getString(3);
		a5 = av.entityValues[3].getMixed(4,a5$, this);
		a5$$ = av.entityValues[3].getSelectNumber();
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = null;
			a3 = null;
			a4 = null;
			a5 = unset_select(a5);
			a5$$ = 0;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[3].getStringAggregate(0, a1$, this);
		a2 = av.entityValues[3].getString(1);
		a3 = av.entityValues[3].getString(2);
		a4 = av.entityValues[3].getString(3);
		a5 = av.entityValues[3].getMixed(4,a5$, this);
		a5$$ = av.entityValues[3].getSelectNumber();
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPreDefinedItem
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcPreDefinedTextFont
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextStyleFontModel
		av.entityValues[3].setStringAggregate(0, a1);
		av.entityValues[3].setString(1, a2);
		av.entityValues[3].setString(2, a3);
		av.entityValues[3].setString(3, a4);
		av.entityValues[3].setMixed(4, a5, a5$, a5$$);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcPreDefinedItem
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcPreDefinedTextFont
		// partial entity: IfcPresentationItem
		// partial entity: IfcTextStyleFontModel
		av.entityValues[3].setStringAggregate(0, a1);
		av.entityValues[3].setString(1, a2);
		av.entityValues[3].setString(2, a3);
		av.entityValues[3].setString(3, a4);
		av.entityValues[3].setMixed(4, a5, a5$, a5$$);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfctextstylefontmodelMeasureoffontsize(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCLENGTHMEASURE", "IFC4"), Value.alloc(jsdai.SIfc4.CIfctextstylefontmodel.definition).set(_context, this).getAttribute(a5$, _context).typeOfV(_context)), Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, Value.alloc(jsdai.SIfc4.CIfctextstylefontmodel.definition).set(_context, this).getAttribute(a5$, _context), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)))).getLogical());
	}
}
