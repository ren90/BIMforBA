/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcCrossProduct

package jsdai.SIfc4;
import jsdai.lang.*;








public class FIfccrossproduct {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_Arg1;
	Value _nonvar__e_Arg2;
	// end of declaration of non-VAR parameters

	// declaration of local variables
	Value _e_Mag;
	Value _e_Res;
	Value _e_V1;
	Value _e_V2;
	Value _e_Result;
	// end of declaration of local variables


	public Value run(SdaiContext _context, Value _e_Arg1, Value _e_Arg2) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_Arg1 = Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_e_Arg1);
		_nonvar__e_Arg2 = Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_e_Arg2);
		// end of initialization of non-VAR parameters

		// initialization of local variables
		_e_Mag = Value.alloc(ExpressTypes.REAL_TYPE);
		_e_Res = Value.alloc(jsdai.SIfc4.CIfcdirection.definition);
		_e_V1 = Value.alloc(jsdai.SIfc4.SIfc4._st_generallist_3_3_real);
		_e_V2 = Value.alloc(jsdai.SIfc4.SIfc4._st_generallist_3_3_real);
		_e_Result = Value.alloc(jsdai.SIfc4.CIfcvector.definition);
		// end of initialization of local variables





																	if (Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Arg1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_Arg1.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(_nonvar__e_Arg2)), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_Arg2.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)))).getLogical() == 2) {																	
		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, Value.alloc(ExpressTypes.GENERIC_TYPE).unset()).check(_context, jsdai.SIfc4.CIfcvector.definition);
																	} else {																	
																		{ // BEGIN
																			_e_V1.set(_context, (new jsdai.SIfc4.FIfcnormalise()).run(_context, _nonvar__e_Arg1).groupReference(_context, jsdai.SIfc4.CIfcdirection.class).getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context));
																			_e_V2.set(_context, (new jsdai.SIfc4.FIfcnormalise()).run(_context, _nonvar__e_Arg2).groupReference(_context, jsdai.SIfc4.CIfcdirection.class).getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context));
																							Value _elements417 = Value.alloc(ExpressTypes.AGGREGATE_GENERIC_TYPE).create();
																							_elements417.addMember(_context, Value.alloc().substractOrDifference(_context, Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3), null)), Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null))));
																							_elements417.addMember(_context, Value.alloc().substractOrDifference(_context, Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null)), Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3), null))));
																							_elements417.addMember(_context, Value.alloc().substractOrDifference(_context, Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null)), Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_V1.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null), _e_V2.indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null))));
																			_e_Res.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcdirection.definition).addParameter(_elements417)));
																			_e_Mag.set(_context, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0));
																			Value _end418 = Value.alloc(ExpressTypes.NUMBER_TYPE).set(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3));
																			Value _step418 = Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);
																			for (Value _implicit_97_i=Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1);Value.alloc(ExpressTypes.LOGICAL_TYPE).lequal(_context, _implicit_97_i, _end418).getLogical() == 2;_implicit_97_i.inc(_step418)) {																			
																				_e_Mag.set(_context, Value.alloc().addOrUnionOrConcatenate(_context, _e_Mag, Value.alloc(jsdai.SIfc4.CIfcvector.definition).mulOrIntersect(_context, _e_Res.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_97_i, null), _e_Res.getAttribute(jsdai.SIfc4.CIfcdirection.attributeDirectionratios(null), _context).indexing(_implicit_97_i, null))));
																			} // for - REPEAT
																			if (Value.alloc(ExpressTypes.LOGICAL_TYPE).greater(_context, _e_Mag, Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)).getLogical() == 2) {																			
																				_e_Result.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcvector.definition).addParameter(_e_Res).addParameter(Value.alloc(ExpressTypes.REAL_TYPE).sqrt(_e_Mag))));
																			} else {																			
																				_e_Result.set(_context, new jsdai.lang.Value(CIfcrepresentationitem.definition).addComplex(new jsdai.lang.Value(CIfcgeometricrepresentationitem.definition)).addComplex(new jsdai.lang.Value(CIfcvector.definition).addParameter(_nonvar__e_Arg1).addParameter(Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0))));
																			}
		if (true) return Value.alloc(jsdai.SIfc4.CIfcvector.definition).set(_context, _e_Result).check(_context, jsdai.SIfc4.CIfcvector.definition);
																		} // END
																	}


		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
