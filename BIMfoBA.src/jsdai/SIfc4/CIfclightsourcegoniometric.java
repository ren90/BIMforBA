/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcLightSourceGoniometric

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfclightsourcegoniometric extends CIfclightsource implements EIfclightsourcegoniometric {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfclightsourcegoniometric.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Name: protected String a0;   Name - java inheritance - STRING
	// LightColour: protected Object a1;   LightColour - java inheritance - ENTITY IfcColourRgb
	// AmbientIntensity: protected double a2;   AmbientIntensity - java inheritance - REAL
	// Intensity: protected double a3;   Intensity - java inheritance - REAL
	protected Object a4; // Position - current entity - ENTITY IfcAxis2Placement3D
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // ColourAppearance - current entity - ENTITY IfcColourRgb
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected double a6; // ColourTemperature - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected double a7; // LuminousFlux - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a8; // LightEmissionSource - current entity - ENUMERATION IfcLightEmissionSourceEnum
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected Object a9; // LightDistributionDataSource - current entity - SELECT IfcLightDistributionDataSourceSelect
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// LightColour - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// AmbientIntensity - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected double a2;
	// Intensity - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected double a3;
	// Position - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a4;
	// ColourAppearance - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	// ColourTemperature - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected double a6;
	// LuminousFlux - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected double a7;
	// LightEmissionSource - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected int a8;
	// LightDistributionDataSource - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected Object a9;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a9 == old) {
			a9 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a9 == old) {
			a9 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4576=EXPLICIT_ATTRIBUTE('Name',#4574,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4577=EXPLICIT_ATTRIBUTE('LightColour',#4574,1,#3650,$,.F.);
	//<01> generating methods for consolidated attribute:  LightColour
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): LightColour, base type: entity IfcColourRgb
	public static int usedinLightcolour(EIfclightsource type, EIfccolourrgb instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #4578=EXPLICIT_ATTRIBUTE('AmbientIntensity',#4574,2,#2593,$,.T.);
	//<01> generating methods for consolidated attribute:  AmbientIntensity
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4579=EXPLICIT_ATTRIBUTE('Intensity',#4574,3,#2593,$,.T.);
	//<01> generating methods for consolidated attribute:  Intensity
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4587=EXPLICIT_ATTRIBUTE('Position',#4585,0,#3382,$,.F.);
	//<01> generating methods for consolidated attribute:  Position
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : Position, base type: entity IfcAxis2Placement3D
	public static int usedinPosition(EIfclightsourcegoniometric type, EIfcaxis2placement3d instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	public boolean testPosition(EIfclightsourcegoniometric type) throws SdaiException {
		return test_instance(a4);
	}
	public EIfcaxis2placement3d getPosition(EIfclightsourcegoniometric type) throws SdaiException {
		return (EIfcaxis2placement3d)get_instance(a4);
	}
	public void setPosition(EIfclightsourcegoniometric type, EIfcaxis2placement3d value) throws SdaiException {
		a4 = set_instance(a4, value);
	}
	public void unsetPosition(EIfclightsourcegoniometric type) throws SdaiException {
		a4 = unset_instance(a4);
	}
	public static jsdai.dictionary.EAttribute attributePosition(EIfclightsourcegoniometric type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #4588=EXPLICIT_ATTRIBUTE('ColourAppearance',#4585,1,#3650,$,.T.);
	//<01> generating methods for consolidated attribute:  ColourAppearance
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ColourAppearance, base type: entity IfcColourRgb
	public static int usedinColourappearance(EIfclightsourcegoniometric type, EIfccolourrgb instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	public boolean testColourappearance(EIfclightsourcegoniometric type) throws SdaiException {
		return test_instance(a5);
	}
	public EIfccolourrgb getColourappearance(EIfclightsourcegoniometric type) throws SdaiException {
		return (EIfccolourrgb)get_instance(a5);
	}
	public void setColourappearance(EIfclightsourcegoniometric type, EIfccolourrgb value) throws SdaiException {
		a5 = set_instance(a5, value);
	}
	public void unsetColourappearance(EIfclightsourcegoniometric type) throws SdaiException {
		a5 = unset_instance(a5);
	}
	public static jsdai.dictionary.EAttribute attributeColourappearance(EIfclightsourcegoniometric type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #4589=EXPLICIT_ATTRIBUTE('ColourTemperature',#4585,2,#2677,$,.F.);
	//<01> generating methods for consolidated attribute:  ColourTemperature
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ColourTemperature, base type: REAL
	public boolean testColourtemperature(EIfclightsourcegoniometric type) throws SdaiException {
		return test_double(a6);
	}
	public double getColourtemperature(EIfclightsourcegoniometric type) throws SdaiException {
		return get_double(a6);
	}
	public void setColourtemperature(EIfclightsourcegoniometric type, double value) throws SdaiException {
		a6 = set_double(value);
	}
	public void unsetColourtemperature(EIfclightsourcegoniometric type) throws SdaiException {
		a6 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeColourtemperature(EIfclightsourcegoniometric type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #4590=EXPLICIT_ATTRIBUTE('LuminousFlux',#4585,3,#2555,$,.F.);
	//<01> generating methods for consolidated attribute:  LuminousFlux
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: LuminousFlux, base type: REAL
	public boolean testLuminousflux(EIfclightsourcegoniometric type) throws SdaiException {
		return test_double(a7);
	}
	public double getLuminousflux(EIfclightsourcegoniometric type) throws SdaiException {
		return get_double(a7);
	}
	public void setLuminousflux(EIfclightsourcegoniometric type, double value) throws SdaiException {
		a7 = set_double(value);
	}
	public void unsetLuminousflux(EIfclightsourcegoniometric type) throws SdaiException {
		a7 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeLuminousflux(EIfclightsourcegoniometric type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #4591=EXPLICIT_ATTRIBUTE('LightEmissionSource',#4585,4,#2915,$,.F.);
	//<01> generating methods for consolidated attribute:  LightEmissionSource
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:LightEmissionSource, base type: ENUMERATION
	public boolean testLightemissionsource(EIfclightsourcegoniometric type) throws SdaiException {
		return test_enumeration(a8);
	}
	public int getLightemissionsource(EIfclightsourcegoniometric type) throws SdaiException {
		return get_enumeration(a8);
	}
	public void setLightemissionsource(EIfclightsourcegoniometric type, int value) throws SdaiException {
		a8 = set_enumeration(value, a8$);
	}
	public void unsetLightemissionsource(EIfclightsourcegoniometric type) throws SdaiException {
		a8 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeLightemissionsource(EIfclightsourcegoniometric type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #4592=EXPLICIT_ATTRIBUTE('LightDistributionDataSource',#4585,5,#3159,$,.F.);
	//<01> generating methods for consolidated attribute:  LightDistributionDataSource
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: LightDistributionDataSource
	public static int usedinLightdistributiondatasource(EIfclightsourcegoniometric type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	public boolean testLightdistributiondatasource(EIfclightsourcegoniometric type) throws SdaiException {
		return test_instance(a9);
	}

	public EEntity getLightdistributiondatasource(EIfclightsourcegoniometric type) throws SdaiException { // case 1
		return get_instance_select(a9);
	}

	public void setLightdistributiondatasource(EIfclightsourcegoniometric type, EEntity value) throws SdaiException { // case 1
		a9 = set_instance(a9, value);
	}

	public void unsetLightdistributiondatasource(EIfclightsourcegoniometric type) throws SdaiException {
		a9 = unset_instance(a9);
	}

	public static jsdai.dictionary.EAttribute attributeLightdistributiondatasource(EIfclightsourcegoniometric type) throws SdaiException {
		return a9$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = Double.NaN;
			a7 = Double.NaN;
			a8 = 0;
			a9 = unset_instance(a9);
			return;
		}
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getInstance(1, this, a1$);
		a2 = av.entityValues[1].getDouble(2);
		a3 = av.entityValues[1].getDouble(3);
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getDouble(2);
		a7 = av.entityValues[2].getDouble(3);
		a8 = av.entityValues[2].getEnumeration(4, a8$);
		a9 = av.entityValues[2].getInstance(5, this, a9$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a1 = unset_instance(a1);
			a2 = Double.NaN;
			a3 = Double.NaN;
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = Double.NaN;
			a7 = Double.NaN;
			a8 = 0;
			a9 = unset_instance(a9);
			return;
		}
		a0 = av.entityValues[1].getString(0);
		a1 = av.entityValues[1].getInstance(1, this, a1$);
		a2 = av.entityValues[1].getDouble(2);
		a3 = av.entityValues[1].getDouble(3);
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getDouble(2);
		a7 = av.entityValues[2].getDouble(3);
		a8 = av.entityValues[2].getEnumeration(4, a8$);
		a9 = av.entityValues[2].getInstance(5, this, a9$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcLightSource
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setInstance(1, a1);
		av.entityValues[1].setDouble(2, a2);
		av.entityValues[1].setDouble(3, a3);
		// partial entity: IfcLightSourceGoniometric
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setDouble(2, a6);
		av.entityValues[2].setDouble(3, a7);
		av.entityValues[2].setEnumeration(4, a8, a8$);
		av.entityValues[2].setInstance(5, a9);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcLightSource
		av.entityValues[1].setString(0, a0);
		av.entityValues[1].setInstance(1, a1);
		av.entityValues[1].setDouble(2, a2);
		av.entityValues[1].setDouble(3, a3);
		// partial entity: IfcLightSourceGoniometric
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setDouble(2, a6);
		av.entityValues[2].setDouble(3, a7);
		av.entityValues[2].setEnumeration(4, a8, a8$);
		av.entityValues[2].setInstance(5, a9);
		// partial entity: IfcRepresentationItem
	}
}
