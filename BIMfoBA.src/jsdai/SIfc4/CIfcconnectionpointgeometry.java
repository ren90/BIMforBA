/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcConnectionPointGeometry

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcconnectionpointgeometry extends CIfcconnectiongeometry implements EIfcconnectionpointgeometry {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcconnectionpointgeometry.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // PointOnRelatingElement - current entity - SELECT IfcPointOrVertexPoint
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // PointOnRelatedElement - current entity - SELECT IfcPointOrVertexPoint
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// PointOnRelatingElement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// PointOnRelatedElement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3735=EXPLICIT_ATTRIBUTE('PointOnRelatingElement',#3733,0,#3175,$,.F.);
	//<01> generating methods for consolidated attribute:  PointOnRelatingElement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: PointOnRelatingElement
	public static int usedinPointonrelatingelement(EIfcconnectionpointgeometry type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testPointonrelatingelement(EIfcconnectionpointgeometry type) throws SdaiException {
		return test_instance(a0);
	}

	public EEntity getPointonrelatingelement(EIfcconnectionpointgeometry type) throws SdaiException { // case 1
		return get_instance_select(a0);
	}

	public void setPointonrelatingelement(EIfcconnectionpointgeometry type, EEntity value) throws SdaiException { // case 1
		a0 = set_instance(a0, value);
	}

	public void unsetPointonrelatingelement(EIfcconnectionpointgeometry type) throws SdaiException {
		a0 = unset_instance(a0);
	}

	public static jsdai.dictionary.EAttribute attributePointonrelatingelement(EIfcconnectionpointgeometry type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3736=EXPLICIT_ATTRIBUTE('PointOnRelatedElement',#3733,1,#3175,$,.T.);
	//<01> generating methods for consolidated attribute:  PointOnRelatedElement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: PointOnRelatedElement
	public static int usedinPointonrelatedelement(EIfcconnectionpointgeometry type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testPointonrelatedelement(EIfcconnectionpointgeometry type) throws SdaiException {
		return test_instance(a1);
	}

	public EEntity getPointonrelatedelement(EIfcconnectionpointgeometry type) throws SdaiException { // case 1
		return get_instance_select(a1);
	}

	public void setPointonrelatedelement(EIfcconnectionpointgeometry type, EEntity value) throws SdaiException { // case 1
		a1 = set_instance(a1, value);
	}

	public void unsetPointonrelatedelement(EIfcconnectionpointgeometry type) throws SdaiException {
		a1 = unset_instance(a1);
	}

	public static jsdai.dictionary.EAttribute attributePointonrelatedelement(EIfcconnectionpointgeometry type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[1].getInstance(0, this, a0$);
		a1 = av.entityValues[1].getInstance(1, this, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[1].getInstance(0, this, a0$);
		a1 = av.entityValues[1].getInstance(1, this, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConnectionGeometry
		// partial entity: IfcConnectionPointGeometry
		av.entityValues[1].setInstance(0, a0);
		av.entityValues[1].setInstance(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConnectionGeometry
		// partial entity: IfcConnectionPointGeometry
		av.entityValues[1].setInstance(0, a0);
		av.entityValues[1].setInstance(1, a1);
	}
}
