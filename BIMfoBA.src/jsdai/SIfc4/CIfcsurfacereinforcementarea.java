/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcSurfaceReinforcementArea

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcsurfacereinforcementarea extends CIfcstructuralloadorresult implements EIfcsurfacereinforcementarea {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcsurfacereinforcementarea.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// Name: protected String a0;   Name - java inheritance - STRING
	protected A_double a1; // SurfaceReinforcement1 - current entity - LIST OF REAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected A_double a2; // SurfaceReinforcement2 - current entity - LIST OF REAL
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected double a3; // ShearReinforcement - current entity - REAL
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// SurfaceReinforcement1 - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected A_double a1;
	// SurfaceReinforcement2 - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	protected A_double a2;
	// ShearReinforcement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	protected double a3;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5838=EXPLICIT_ATTRIBUTE('Name',#5836,0,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5975=EXPLICIT_ATTRIBUTE('SurfaceReinforcement1',#5973,0,#7151,$,.T.);
	//<01> generating methods for consolidated attribute:  SurfaceReinforcement1
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: SurfaceReinforcement1, base type: LIST OF REAL
	public boolean testSurfacereinforcement1(EIfcsurfacereinforcementarea type) throws SdaiException {
		return test_aggregate(a1);
	}
	public A_double getSurfacereinforcement1(EIfcsurfacereinforcementarea type) throws SdaiException {
		return (A_double)get_aggregate(a1);
	}
	public A_double createSurfacereinforcement1(EIfcsurfacereinforcementarea type) throws SdaiException {
		a1 = create_aggregate_double(a1, a1$, 0);
		return a1;
	}
	public void unsetSurfacereinforcement1(EIfcsurfacereinforcementarea type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeSurfacereinforcement1(EIfcsurfacereinforcementarea type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #5976=EXPLICIT_ATTRIBUTE('SurfaceReinforcement2',#5973,1,#7152,$,.T.);
	//<01> generating methods for consolidated attribute:  SurfaceReinforcement2
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: SurfaceReinforcement2, base type: LIST OF REAL
	public boolean testSurfacereinforcement2(EIfcsurfacereinforcementarea type) throws SdaiException {
		return test_aggregate(a2);
	}
	public A_double getSurfacereinforcement2(EIfcsurfacereinforcementarea type) throws SdaiException {
		return (A_double)get_aggregate(a2);
	}
	public A_double createSurfacereinforcement2(EIfcsurfacereinforcementarea type) throws SdaiException {
		a2 = create_aggregate_double(a2, a2$, 0);
		return a2;
	}
	public void unsetSurfacereinforcement2(EIfcsurfacereinforcementarea type) throws SdaiException {
		unset_aggregate(a2);
		a2 = null;
	}
	public static jsdai.dictionary.EAttribute attributeSurfacereinforcement2(EIfcsurfacereinforcementarea type) throws SdaiException {
		return a2$;
	}

	//going through all the attributes: #5977=EXPLICIT_ATTRIBUTE('ShearReinforcement',#5973,2,#2621,$,.T.);
	//<01> generating methods for consolidated attribute:  ShearReinforcement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: ShearReinforcement, base type: REAL
	public boolean testShearreinforcement(EIfcsurfacereinforcementarea type) throws SdaiException {
		return test_double(a3);
	}
	public double getShearreinforcement(EIfcsurfacereinforcementarea type) throws SdaiException {
		return get_double(a3);
	}
	public void setShearreinforcement(EIfcsurfacereinforcementarea type, double value) throws SdaiException {
		a3 = set_double(value);
	}
	public void unsetShearreinforcement(EIfcsurfacereinforcementarea type) throws SdaiException {
		a3 = unset_double();
	}
	public static jsdai.dictionary.EAttribute attributeShearreinforcement(EIfcsurfacereinforcementarea type) throws SdaiException {
		return a3$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a3 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[2].getDoubleAggregate(0, a1$, this);
		a2 = av.entityValues[2].getDoubleAggregate(1, a2$, this);
		a3 = av.entityValues[2].getDouble(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = null;
			a3 = Double.NaN;
			return;
		}
		a0 = av.entityValues[0].getString(0);
		a1 = av.entityValues[2].getDoubleAggregate(0, a1$, this);
		a2 = av.entityValues[2].getDoubleAggregate(1, a2$, this);
		a3 = av.entityValues[2].getDouble(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcSurfaceReinforcementArea
		av.entityValues[2].setDoubleAggregate(0, a1);
		av.entityValues[2].setDoubleAggregate(1, a2);
		av.entityValues[2].setDouble(2, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcStructuralLoad
		av.entityValues[0].setString(0, a0);
		// partial entity: IfcStructuralLoadOrResult
		// partial entity: IfcSurfaceReinforcementArea
		av.entityValues[2].setDoubleAggregate(0, a1);
		av.entityValues[2].setDoubleAggregate(1, a2);
		av.entityValues[2].setDouble(2, a3);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcsurfacereinforcementareaSurfaceandorshearareaspecified(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$)))), Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcRatioMeasure).set(_context, get(a3$))))).getLogical());
	}
	public int rIfcsurfacereinforcementareaNonnegativearea1(SdaiContext _context) throws SdaiException {
	







		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)), Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0))), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a1$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)))))).getLogical());
	}
	public int rIfcsurfacereinforcementareaNonnegativearea3(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_IfcRatioMeasure).set(_context, get(a3$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcRatioMeasure).set(_context, get(a3$)), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)))).getLogical());
	}
	public int rIfcsurfacereinforcementareaNonnegativearea2(SdaiContext _context) throws SdaiException {
	







		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)), Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0))), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)), Value.alloc(ExpressTypes.LOGICAL_TYPE).gequal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_3_ifclengthmeasure).set(_context, get(a2$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null), Value.alloc(ExpressTypes.REAL_TYPE).set(_context, 0.0)))))).getLogical());
	}
}
