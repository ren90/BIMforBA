/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRelSpaceBoundary

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcrelspaceboundary extends CIfcrelconnects implements EIfcrelspaceboundary {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcrelspaceboundary.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	protected Object a4; // RelatingSpace - current entity - SELECT IfcSpaceBoundarySelect
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a5; // RelatedBuildingElement - current entity - ENTITY IfcElement
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a6; // ConnectionGeometry - current entity - ENTITY IfcConnectionGeometry
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected int a7; // PhysicalOrVirtualBoundary - current entity - ENUMERATION IfcPhysicalOrVirtualEnum
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a8; // InternalOrExternalBoundary - current entity - ENUMERATION IfcInternalOrExternalEnum
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// RelatingSpace - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	protected Object a4;
	// RelatedBuildingElement - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	protected Object a5;
	// ConnectionGeometry - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	protected Object a6;
	// PhysicalOrVirtualBoundary - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	protected int a7;
	// InternalOrExternalBoundary - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected int a8;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a4 == old) {
			a4 = newer;
		}
		if (a5 == old) {
			a5 = newer;
		}
		if (a6 == old) {
			a6 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5514=EXPLICIT_ATTRIBUTE('RelatingSpace',#5512,0,#3201,$,.F.);
	//<01> generating methods for consolidated attribute:  RelatingSpace
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: RelatingSpace
	public static int usedinRelatingspace(EIfcrelspaceboundary type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a4$, domain, result);
	}
	public boolean testRelatingspace(EIfcrelspaceboundary type) throws SdaiException {
		return test_instance(a4);
	}

	public EEntity getRelatingspace(EIfcrelspaceboundary type) throws SdaiException { // case 1
		return get_instance_select(a4);
	}

	public void setRelatingspace(EIfcrelspaceboundary type, EEntity value) throws SdaiException { // case 1
		a4 = set_instance(a4, value);
	}

	public void unsetRelatingspace(EIfcrelspaceboundary type) throws SdaiException {
		a4 = unset_instance(a4);
	}

	public static jsdai.dictionary.EAttribute attributeRelatingspace(EIfcrelspaceboundary type) throws SdaiException {
		return a4$;
	}

	//going through all the attributes: #5515=EXPLICIT_ATTRIBUTE('RelatedBuildingElement',#5512,1,#4136,$,.F.);
	//<01> generating methods for consolidated attribute:  RelatedBuildingElement
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : RelatedBuildingElement, base type: entity IfcElement
	public static int usedinRelatedbuildingelement(EIfcrelspaceboundary type, EIfcelement instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	public boolean testRelatedbuildingelement(EIfcrelspaceboundary type) throws SdaiException {
		return test_instance(a5);
	}
	public EIfcelement getRelatedbuildingelement(EIfcrelspaceboundary type) throws SdaiException {
		return (EIfcelement)get_instance(a5);
	}
	public void setRelatedbuildingelement(EIfcrelspaceboundary type, EIfcelement value) throws SdaiException {
		a5 = set_instance(a5, value);
	}
	public void unsetRelatedbuildingelement(EIfcrelspaceboundary type) throws SdaiException {
		a5 = unset_instance(a5);
	}
	public static jsdai.dictionary.EAttribute attributeRelatedbuildingelement(EIfcrelspaceboundary type) throws SdaiException {
		return a5$;
	}

	//going through all the attributes: #5516=EXPLICIT_ATTRIBUTE('ConnectionGeometry',#5512,2,#3726,$,.T.);
	//<01> generating methods for consolidated attribute:  ConnectionGeometry
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : ConnectionGeometry, base type: entity IfcConnectionGeometry
	public static int usedinConnectiongeometry(EIfcrelspaceboundary type, EIfcconnectiongeometry instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a6$, domain, result);
	}
	public boolean testConnectiongeometry(EIfcrelspaceboundary type) throws SdaiException {
		return test_instance(a6);
	}
	public EIfcconnectiongeometry getConnectiongeometry(EIfcrelspaceboundary type) throws SdaiException {
		return (EIfcconnectiongeometry)get_instance(a6);
	}
	public void setConnectiongeometry(EIfcrelspaceboundary type, EIfcconnectiongeometry value) throws SdaiException {
		a6 = set_instance(a6, value);
	}
	public void unsetConnectiongeometry(EIfcrelspaceboundary type) throws SdaiException {
		a6 = unset_instance(a6);
	}
	public static jsdai.dictionary.EAttribute attributeConnectiongeometry(EIfcrelspaceboundary type) throws SdaiException {
		return a6$;
	}

	//going through all the attributes: #5517=EXPLICIT_ATTRIBUTE('PhysicalOrVirtualBoundary',#5512,3,#2949,$,.F.);
	//<01> generating methods for consolidated attribute:  PhysicalOrVirtualBoundary
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:PhysicalOrVirtualBoundary, base type: ENUMERATION
	public boolean testPhysicalorvirtualboundary(EIfcrelspaceboundary type) throws SdaiException {
		return test_enumeration(a7);
	}
	public int getPhysicalorvirtualboundary(EIfcrelspaceboundary type) throws SdaiException {
		return get_enumeration(a7);
	}
	public void setPhysicalorvirtualboundary(EIfcrelspaceboundary type, int value) throws SdaiException {
		a7 = set_enumeration(value, a7$);
	}
	public void unsetPhysicalorvirtualboundary(EIfcrelspaceboundary type) throws SdaiException {
		a7 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributePhysicalorvirtualboundary(EIfcrelspaceboundary type) throws SdaiException {
		return a7$;
	}

	//going through all the attributes: #5518=EXPLICIT_ATTRIBUTE('InternalOrExternalBoundary',#5512,4,#2899,$,.F.);
	//<01> generating methods for consolidated attribute:  InternalOrExternalBoundary
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute:InternalOrExternalBoundary, base type: ENUMERATION
	public boolean testInternalorexternalboundary(EIfcrelspaceboundary type) throws SdaiException {
		return test_enumeration(a8);
	}
	public int getInternalorexternalboundary(EIfcrelspaceboundary type) throws SdaiException {
		return get_enumeration(a8);
	}
	public void setInternalorexternalboundary(EIfcrelspaceboundary type, int value) throws SdaiException {
		a8 = set_enumeration(value, a8$);
	}
	public void unsetInternalorexternalboundary(EIfcrelspaceboundary type) throws SdaiException {
		a8 = unset_enumeration();
	}
	public static jsdai.dictionary.EAttribute attributeInternalorexternalboundary(EIfcrelspaceboundary type) throws SdaiException {
		return a8$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = 0;
			a8 = 0;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getInstance(2, this, a6$);
		a7 = av.entityValues[2].getEnumeration(3, a7$);
		a8 = av.entityValues[2].getEnumeration(4, a8$);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a4 = unset_instance(a4);
			a5 = unset_instance(a5);
			a6 = unset_instance(a6);
			a7 = 0;
			a8 = 0;
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			return;
		}
		a4 = av.entityValues[2].getInstance(0, this, a4$);
		a5 = av.entityValues[2].getInstance(1, this, a5$);
		a6 = av.entityValues[2].getInstance(2, this, a6$);
		a7 = av.entityValues[2].getEnumeration(3, a7$);
		a8 = av.entityValues[2].getEnumeration(4, a8$);
		a0 = av.entityValues[3].getString(0);
		a1 = av.entityValues[3].getInstance(1, this, a1$);
		a2 = av.entityValues[3].getString(2);
		a3 = av.entityValues[3].getString(3);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRelationship
		// partial entity: IfcRelConnects
		// partial entity: IfcRelSpaceBoundary
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setInstance(2, a6);
		av.entityValues[2].setEnumeration(3, a7, a7$);
		av.entityValues[2].setEnumeration(4, a8, a8$);
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcRelationship
		// partial entity: IfcRelConnects
		// partial entity: IfcRelSpaceBoundary
		av.entityValues[2].setInstance(0, a4);
		av.entityValues[2].setInstance(1, a5);
		av.entityValues[2].setInstance(2, a6);
		av.entityValues[2].setEnumeration(3, a7, a7$);
		av.entityValues[2].setEnumeration(4, a8, a8$);
		// partial entity: IfcRoot
		av.entityValues[3].setString(0, a0);
		av.entityValues[3].setInstance(1, a1);
		av.entityValues[3].setString(2, a2);
		av.entityValues[3].setString(3, a3);
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcrelspaceboundaryCorrectphysorvirt(SdaiContext _context) throws SdaiException {
	








		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).set(_context, get(a7$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).setEnum(_context, "Physical")), Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCVIRTUALELEMENT", "IFC4"), Value.alloc(jsdai.SIfc4.CIfcelement.definition).set(_context, get(a5$)).typeOfV(_context)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).AND(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).set(_context, get(a7$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).setEnum(_context, "Virtual")), Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCVIRTUALELEMENT", "IFC4"), Value.alloc(jsdai.SIfc4.CIfcelement.definition).set(_context, get(a5$)).typeOfV(_context)), Value.alloc(ExpressTypes.LOGICAL_TYPE).IN(_context, Value.alloc(ExpressTypes.STRING_TYPE).set(_context, "*.IFCOPENINGELEMENT", "IFC4"), Value.alloc(jsdai.SIfc4.CIfcelement.definition).set(_context, get(a5$)).typeOfV(_context))))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).set(_context, get(a7$)), Value.alloc(jsdai.SIfc4.SIfc4._st_IfcPhysicalOrVirtualEnum).setEnum(_context, "NotDefined")))).getLogical());
	}
}
