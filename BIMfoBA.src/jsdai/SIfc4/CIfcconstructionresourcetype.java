/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcConstructionResourceType

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcconstructionresourcetype extends CIfctyperesource implements EIfcconstructionresourcetype {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcconstructionresourcetype.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// GlobalId: protected String a0;   GlobalId - java inheritance - STRING
	// OwnerHistory: protected Object a1;   OwnerHistory - java inheritance - ENTITY IfcOwnerHistory
	// Name: protected String a2;   Name - java inheritance - STRING
	// Description: protected String a3;   Description - java inheritance - STRING
	// HasAssignments: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssigns
	// Nests: protected Object  - inverse - java inheritance -  ENTITY IfcRelNests
	// IsNestedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelNests
	// HasContext: protected Object  - inverse - java inheritance -  ENTITY IfcRelDeclares
	// IsDecomposedBy: protected Object  - inverse - java inheritance -  ENTITY IfcRelAggregates
	// Decomposes: protected Object  - inverse - java inheritance -  ENTITY IfcRelAggregates
	// HasAssociations: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssociates
	// ApplicableOccurrence: protected String a4;   ApplicableOccurrence - java inheritance - STRING
	// HasPropertySets: protected AIfcpropertysetdefinition a5;   HasPropertySets - java inheritance - SET OF ENTITY
	// Types: protected Object  - inverse - java inheritance -  ENTITY IfcRelDefinesByType
	// Identification: protected String a6;   Identification - java inheritance - STRING
	// LongDescription: protected String a7;   LongDescription - java inheritance - STRING
	// ResourceType: protected String a8;   ResourceType - java inheritance - STRING
	// ResourceOf: protected Object  - inverse - java inheritance -  ENTITY IfcRelAssignsToResource
	protected AIfcappliedvalue a9; // BaseCosts - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected Object a10; // BaseQuantity - current entity - ENTITY IfcPhysicalQuantity
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// GlobalId - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected String a0;
	// OwnerHistory - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected Object a1;
	// Name - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected String a2;
	// Description - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected String a3;
	// HasAssignments - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// Nests - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// IsNestedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i2$ = CEntity.initInverseAttribute(definition, 2);
	// HasContext - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i3$ = CEntity.initInverseAttribute(definition, 3);
	// IsDecomposedBy - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i4$ = CEntity.initInverseAttribute(definition, 4);
	// Decomposes - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i5$ = CEntity.initInverseAttribute(definition, 5);
	// HasAssociations - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i6$ = CEntity.initInverseAttribute(definition, 6);
	// ApplicableOccurrence - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected String a4;
	// HasPropertySets - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected AIfcpropertysetdefinition a5;
	// Types - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i7$ = CEntity.initInverseAttribute(definition, 7);
	// Identification - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected String a6;
	// LongDescription - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	// protected String a7;
	// ResourceType - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	// protected String a8;
	// ResourceOf - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i8$ = CEntity.initInverseAttribute(definition, 8);
	// BaseCosts - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a9$ = CEntity.initExplicitAttribute(definition, 9);
	protected AIfcappliedvalue a9;
	// BaseQuantity - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a10$ = CEntity.initExplicitAttribute(definition, 10);
	protected Object a10;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a9, old, newer);
		if (a10 == old) {
			a10 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		changeReferencesAggregate(a9, old, newer);
		if (a10 == old) {
			a10 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5618=EXPLICIT_ATTRIBUTE('GlobalId',#5616,0,#2517,$,.F.);
	//<01> generating methods for consolidated attribute:  GlobalId
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5619=EXPLICIT_ATTRIBUTE('OwnerHistory',#5616,1,#4858,$,.T.);
	//<01> generating methods for consolidated attribute:  OwnerHistory
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): OwnerHistory, base type: entity IfcOwnerHistory
	public static int usedinOwnerhistory(EIfcroot type, EIfcownerhistory instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #5620=EXPLICIT_ATTRIBUTE('Name',#5616,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  Name
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5621=EXPLICIT_ATTRIBUTE('Description',#5616,3,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  Description
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4791=INVERSE_ATTRIBUTE('HasAssignments',#4789,0,#5348,$,#5350,#8672,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssignments
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4792=INVERSE_ATTRIBUTE('Nests',#4789,1,#5489,$,#5492,#8674,#8675,.F.);
	//<01> generating methods for consolidated attribute:  Nests
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4793=INVERSE_ATTRIBUTE('IsNestedBy',#4789,2,#5489,$,#5491,#8677,$,.F.);
	//<01> generating methods for consolidated attribute:  IsNestedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4794=INVERSE_ATTRIBUTE('HasContext',#4789,3,#5450,$,#5453,#8679,#8680,.F.);
	//<01> generating methods for consolidated attribute:  HasContext
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4795=INVERSE_ATTRIBUTE('IsDecomposedBy',#4789,4,#5344,$,#5346,#8682,$,.F.);
	//<01> generating methods for consolidated attribute:  IsDecomposedBy
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4796=INVERSE_ATTRIBUTE('Decomposes',#4789,5,#5344,$,#5347,#8684,#8685,.F.);
	//<01> generating methods for consolidated attribute:  Decomposes
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4797=INVERSE_ATTRIBUTE('HasAssociations',#4789,6,#5375,$,#5377,#8687,$,.F.);
	//<01> generating methods for consolidated attribute:  HasAssociations
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6272=EXPLICIT_ATTRIBUTE('ApplicableOccurrence',#6270,0,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  ApplicableOccurrence
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6273=EXPLICIT_ATTRIBUTE('HasPropertySets',#6270,1,#7194,$,.T.);
	//<01> generating methods for consolidated attribute:  HasPropertySets
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: HasPropertySets, base type: SET OF ENTITY
	public static int usedinHaspropertysets(EIfctypeobject type, EIfcpropertysetdefinition instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a5$, domain, result);
	}
	//going through all the attributes: #6274=INVERSE_ATTRIBUTE('Types',#6270,0,#5470,$,#5473,#9713,#9714,.F.);
	//<01> generating methods for consolidated attribute:  Types
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6288=EXPLICIT_ATTRIBUTE('Identification',#6286,0,#2523,$,.T.);
	//<01> generating methods for consolidated attribute:  Identification
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6289=EXPLICIT_ATTRIBUTE('LongDescription',#6286,1,#2657,$,.T.);
	//<01> generating methods for consolidated attribute:  LongDescription
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6290=EXPLICIT_ATTRIBUTE('ResourceType',#6286,2,#2539,$,.T.);
	//<01> generating methods for consolidated attribute:  ResourceType
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #6291=INVERSE_ATTRIBUTE('ResourceOf',#6286,0,#5372,$,#5374,#9731,$,.F.);
	//<01> generating methods for consolidated attribute:  ResourceOf
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3781=EXPLICIT_ATTRIBUTE('BaseCosts',#3779,0,#6875,$,.T.);
	//<01> generating methods for consolidated attribute:  BaseCosts
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: BaseCosts, base type: LIST OF ENTITY
	public static int usedinBasecosts(EIfcconstructionresourcetype type, EIfcappliedvalue instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a9$, domain, result);
	}
	public boolean testBasecosts(EIfcconstructionresourcetype type) throws SdaiException {
		return test_aggregate(a9);
	}
	public AIfcappliedvalue getBasecosts(EIfcconstructionresourcetype type) throws SdaiException {
		return (AIfcappliedvalue)get_aggregate(a9);
	}
	public AIfcappliedvalue createBasecosts(EIfcconstructionresourcetype type) throws SdaiException {
		a9 = (AIfcappliedvalue)create_aggregate_class(a9, a9$,  AIfcappliedvalue.class, 0);
		return a9;
	}
	public void unsetBasecosts(EIfcconstructionresourcetype type) throws SdaiException {
		unset_aggregate(a9);
		a9 = null;
	}
	public static jsdai.dictionary.EAttribute attributeBasecosts(EIfcconstructionresourcetype type) throws SdaiException {
		return a9$;
	}

	//going through all the attributes: #3782=EXPLICIT_ATTRIBUTE('BaseQuantity',#3779,1,#4916,$,.T.);
	//<01> generating methods for consolidated attribute:  BaseQuantity
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : BaseQuantity, base type: entity IfcPhysicalQuantity
	public static int usedinBasequantity(EIfcconstructionresourcetype type, EIfcphysicalquantity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a10$, domain, result);
	}
	public boolean testBasequantity(EIfcconstructionresourcetype type) throws SdaiException {
		return test_instance(a10);
	}
	public EIfcphysicalquantity getBasequantity(EIfcconstructionresourcetype type) throws SdaiException {
		return (EIfcphysicalquantity)get_instance(a10);
	}
	public void setBasequantity(EIfcconstructionresourcetype type, EIfcphysicalquantity value) throws SdaiException {
		a10 = set_instance(a10, value);
	}
	public void unsetBasequantity(EIfcconstructionresourcetype type) throws SdaiException {
		a10 = unset_instance(a10);
	}
	public static jsdai.dictionary.EAttribute attributeBasequantity(EIfcconstructionresourcetype type) throws SdaiException {
		return a10$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			a10 = unset_instance(a10);
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			a4 = null;
			if (a5 instanceof CAggregate)
				a5.unsetAll();
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = null;
			return;
		}
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(0, a9$, this);
		a10 = av.entityValues[0].getInstance(1, this, a10$);
		a0 = av.entityValues[2].getString(0);
		a1 = av.entityValues[2].getInstance(1, this, a1$);
		a2 = av.entityValues[2].getString(2);
		a3 = av.entityValues[2].getString(3);
		a4 = av.entityValues[3].getString(0);
		a5 = (AIfcpropertysetdefinition)av.entityValues[3].getInstanceAggregate(1, a5$, this);
		a6 = av.entityValues[4].getString(0);
		a7 = av.entityValues[4].getString(1);
		a8 = av.entityValues[4].getString(2);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a9 instanceof CAggregate)
				a9.unsetAll();
			a9 = null;
			a10 = unset_instance(a10);
			a0 = null;
			a1 = unset_instance(a1);
			a2 = null;
			a3 = null;
			a4 = null;
			if (a5 instanceof CAggregate)
				a5.unsetAll();
			a5 = null;
			a6 = null;
			a7 = null;
			a8 = null;
			return;
		}
		a9 = (AIfcappliedvalue)av.entityValues[0].getInstanceAggregate(0, a9$, this);
		a10 = av.entityValues[0].getInstance(1, this, a10$);
		a0 = av.entityValues[2].getString(0);
		a1 = av.entityValues[2].getInstance(1, this, a1$);
		a2 = av.entityValues[2].getString(2);
		a3 = av.entityValues[2].getString(3);
		a4 = av.entityValues[3].getString(0);
		a5 = (AIfcpropertysetdefinition)av.entityValues[3].getInstanceAggregate(1, a5$, this);
		a6 = av.entityValues[4].getString(0);
		a7 = av.entityValues[4].getString(1);
		a8 = av.entityValues[4].getString(2);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConstructionResourceType
		av.entityValues[0].setInstanceAggregate(0, a9);
		av.entityValues[0].setInstance(1, a10);
		// partial entity: IfcObjectDefinition
		// partial entity: IfcRoot
		av.entityValues[2].setString(0, a0);
		av.entityValues[2].setInstance(1, a1);
		av.entityValues[2].setString(2, a2);
		av.entityValues[2].setString(3, a3);
		// partial entity: IfcTypeObject
		av.entityValues[3].setString(0, a4);
		av.entityValues[3].setInstanceAggregate(1, a5);
		// partial entity: IfcTypeResource
		av.entityValues[4].setString(0, a6);
		av.entityValues[4].setString(1, a7);
		av.entityValues[4].setString(2, a8);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcConstructionResourceType
		av.entityValues[0].setInstanceAggregate(0, a9);
		av.entityValues[0].setInstance(1, a10);
		// partial entity: IfcObjectDefinition
		// partial entity: IfcRoot
		av.entityValues[2].setString(0, a0);
		av.entityValues[2].setInstance(1, a1);
		av.entityValues[2].setString(2, a2);
		av.entityValues[2].setString(3, a3);
		// partial entity: IfcTypeObject
		av.entityValues[3].setString(0, a4);
		av.entityValues[3].setInstanceAggregate(1, a5);
		// partial entity: IfcTypeResource
		av.entityValues[4].setString(0, a6);
		av.entityValues[4].setString(1, a7);
		av.entityValues[4].setString(2, a8);
	}
}
