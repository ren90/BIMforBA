/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcPolyLoop

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcpolyloop extends CIfcloop implements EIfcpolyloop {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcpolyloop.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	protected AIfccartesianpoint a0; // Polygon - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Polygon - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfccartesianpoint a0;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4986=EXPLICIT_ATTRIBUTE('Polygon',#4984,0,#7007,$,.F.);
	//<01> generating methods for consolidated attribute:  Polygon
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: Polygon, base type: LIST OF ENTITY
	public static int usedinPolygon(EIfcpolyloop type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testPolygon(EIfcpolyloop type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfccartesianpoint getPolygon(EIfcpolyloop type) throws SdaiException {
		return (AIfccartesianpoint)get_aggregate(a0);
	}
	public AIfccartesianpoint createPolygon(EIfcpolyloop type) throws SdaiException {
		a0 = (AIfccartesianpoint)create_aggregate_class(a0, a0$,  AIfccartesianpoint.class, 0);
		return a0;
	}
	public void unsetPolygon(EIfcpolyloop type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributePolygon(EIfcpolyloop type) throws SdaiException {
		return a0$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfccartesianpoint)av.entityValues[1].getInstanceAggregate(0, a0$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfccartesianpoint)av.entityValues[1].getInstanceAggregate(0, a0$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcLoop
		// partial entity: IfcPolyLoop
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcLoop
		// partial entity: IfcPolyLoop
		av.entityValues[1].setInstanceAggregate(0, a0);
		// partial entity: IfcRepresentationItem
		// partial entity: IfcTopologicalRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcpolyloopAllpointssamedim(SdaiContext _context) throws SdaiException {
	





									
									Value _internal_aggregate_source147 = Value.alloc(jsdai.SIfc4.SIfc4._st_list_3_unique_ifccartesianpoint).set(_context, get(a0$));
									Value _result145 = Value.alloc(_internal_aggregate_source147).create();
									if (_internal_aggregate_source147.getActualJavaType() != Value.INDETERMINATE) {
										for (int _i146 = 1; _i146 <= _internal_aggregate_source147.getMemberCount(); _i146++) {
											Value _implicit_34_Temp = _internal_aggregate_source147.getByIndex(_i146);
											if (Value.alloc(ExpressTypes.LOGICAL_TYPE).nequal(_context, _implicit_34_Temp.getAttribute("Dim", _context), Value.alloc(jsdai.SIfc4.SIfc4._st_list_3_unique_ifccartesianpoint).set(_context, get(a0$)).indexing(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1), null).getAttribute("dim", _context)).getLogical() == 2) {
												_result145.addMember(_context, _implicit_34_Temp);
											} else
											if (_internal_aggregate_source147.getDeclaredType() instanceof jsdai.dictionary.EArray_type) {
												_implicit_34_Temp.unset();
												_result145.addMember(_context, _implicit_34_Temp);
											}
										}
									} else {
										_result145.unset();
									}
		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOfExt0(_context, _result145), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).getLogical());
	}
}
