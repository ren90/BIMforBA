/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcRationalBSplineCurveWithKnots

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcrationalbsplinecurvewithknots extends CIfcbsplinecurvewithknots implements EIfcrationalbsplinecurvewithknots {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcrationalbsplinecurvewithknots.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Degree: protected int a0;   Degree - java inheritance - INTEGER
	// ControlPointsList: protected AIfccartesianpoint a1;   ControlPointsList - java inheritance - LIST OF ENTITY
	// CurveForm: protected int a2;   CurveForm - java inheritance - ENUMERATION IfcBSplineCurveForm
	// ClosedCurve: protected int a3;   ClosedCurve - java inheritance - LOGICAL
	// SelfIntersect: protected int a4;   SelfIntersect - java inheritance - LOGICAL
	// UpperIndexOnControlPoints: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// ControlPoints: protected AIfccartesianpoint  - derived - java inheritance -  ARRAY OF ENTITY
	protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);
	// KnotMultiplicities: protected A_integer a5;   KnotMultiplicities - java inheritance - LIST OF INTEGER
	// Knots: protected A_double a6;   Knots - java inheritance - LIST OF REAL
	// KnotSpec: protected int a7;   KnotSpec - java inheritance - ENUMERATION IfcKnotType
	// UpperIndexOnKnots: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d3$ = CEntity.initDerivedAttribute(definition, 3);
	protected A_double a8; // WeightsData - current entity - LIST OF REAL
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	// Weights: protected A_double  - derived - current -  ARRAY OF REAL
	protected static final jsdai.dictionary.CDerived_attribute d4$ = CEntity.initDerivedAttribute(definition, 4);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// Degree - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected int a0;
	// ControlPointsList - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// protected AIfccartesianpoint a1;
	// CurveForm - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a2$ = CEntity.initExplicitAttribute(definition, 2);
	// protected int a2;
	// ClosedCurve - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a3$ = CEntity.initExplicitAttribute(definition, 3);
	// protected int a3;
	// SelfIntersect - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a4$ = CEntity.initExplicitAttribute(definition, 4);
	// protected int a4;
	// UpperIndexOnControlPoints - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
	// ControlPoints - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d2$ = CEntity.initDerivedAttribute(definition, 2);
	// KnotMultiplicities - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a5$ = CEntity.initExplicitAttribute(definition, 5);
	// protected A_integer a5;
	// Knots - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a6$ = CEntity.initExplicitAttribute(definition, 6);
	// protected A_double a6;
	// KnotSpec - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a7$ = CEntity.initExplicitAttribute(definition, 7);
	// protected int a7;
	// UpperIndexOnKnots - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d3$ = CEntity.initDerivedAttribute(definition, 3);
	// WeightsData - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a8$ = CEntity.initExplicitAttribute(definition, 8);
	protected A_double a8;
	// Weights - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d4$ = CEntity.initDerivedAttribute(definition, 4);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3885=DERIVED_ATTRIBUTE('Dim',#3883,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfccurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfccurve type, SdaiContext _context) throws SdaiException {


//###-01 jc.generated_java: (new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this))
				return ((new jsdai.SIfc4.FIfccurvedim()).run(_context, Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this)));
	}
	public int getDim(EIfccurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfccurve)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfccurve type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #3389=EXPLICIT_ATTRIBUTE('Degree',#3387,0,#2,$,.F.);
	//<01> generating methods for consolidated attribute:  Degree
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3390=EXPLICIT_ATTRIBUTE('ControlPointsList',#3387,1,#6829,$,.F.);
	//<01> generating methods for consolidated attribute:  ControlPointsList
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// methods for attribute: ControlPointsList, base type: LIST OF ENTITY
	public static int usedinControlpointslist(EIfcbsplinecurve type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	//going through all the attributes: #3391=EXPLICIT_ATTRIBUTE('CurveForm',#3387,2,#2727,$,.F.);
	//<01> generating methods for consolidated attribute:  CurveForm
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3392=EXPLICIT_ATTRIBUTE('ClosedCurve',#3387,3,#5,$,.F.);
	//<01> generating methods for consolidated attribute:  ClosedCurve
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3393=EXPLICIT_ATTRIBUTE('SelfIntersect',#3387,4,#5,$,.F.);
	//<01> generating methods for consolidated attribute:  SelfIntersect
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3394=DERIVED_ATTRIBUTE('UpperIndexOnControlPoints',#3387,0,#2,$);
	//<01> generating methods for consolidated attribute:  UpperIndexOnControlPoints
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: UpperIndexOnControlPoints, base type: INTEGER
	public boolean testUpperindexoncontrolpoints(EIfcbsplinecurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getUpperindexoncontrolpoints(EIfcbsplinecurve type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: Value.alloc().substractOrDifference(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeControlpointslist(null)))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))
				return (Value.alloc().substractOrDifference(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeControlpointslist(null)))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)));
	}
	public int getUpperindexoncontrolpoints(EIfcbsplinecurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getUpperindexoncontrolpoints((EIfcbsplinecurve)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeUpperindexoncontrolpoints(EIfcbsplinecurve type) throws SdaiException {
		return d1$;
	}

	//going through all the attributes: #3395=DERIVED_ATTRIBUTE('ControlPoints',#3387,1,#6830,$);
	//<01> generating methods for consolidated attribute:  ControlPoints
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// derived attribute: ControlPoints, base type: entity IfcCartesianPoint
	public boolean testControlpoints(EIfcbsplinecurve type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public AIfccartesianpoint getControlpoints(EIfcbsplinecurve type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return (AIfccartesianpoint) getControlpoints((EIfcbsplinecurve)null, _context).getInstanceAggregate(this);
	}
	public Value getControlpoints(EIfcbsplinecurve type, SdaiContext _context) throws SdaiException {





//###-01 jc.generated_java: (new jsdai.SIfc4.FIfclisttoarray()).run(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeControlpointslist(null))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeUpperindexoncontrolpoints(null))))
				return ((new jsdai.SIfc4.FIfclisttoarray()).run(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifccartesianpoint).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeControlpointslist(null))), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, get(jsdai.SIfc4.CIfcbsplinecurve.attributeUpperindexoncontrolpoints(null)))));
	}
	public static jsdai.dictionary.EAttribute attributeControlpoints(EIfcbsplinecurve type) throws SdaiException {
		return d2$;
	}

	//going through all the attributes: #3398=EXPLICIT_ATTRIBUTE('KnotMultiplicities',#3396,0,#6832,$,.F.);
	//<01> generating methods for consolidated attribute:  KnotMultiplicities
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3399=EXPLICIT_ATTRIBUTE('Knots',#3396,1,#6833,$,.F.);
	//<01> generating methods for consolidated attribute:  Knots
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3400=EXPLICIT_ATTRIBUTE('KnotSpec',#3396,2,#2905,$,.F.);
	//<01> generating methods for consolidated attribute:  KnotSpec
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #3401=DERIVED_ATTRIBUTE('UpperIndexOnKnots',#3396,0,#2,$);
	//<01> generating methods for consolidated attribute:  UpperIndexOnKnots
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: UpperIndexOnKnots, base type: INTEGER
	public boolean testUpperindexonknots(EIfcbsplinecurvewithknots type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getUpperindexonknots(EIfcbsplinecurvewithknots type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcparametervalue).set(_context, get(jsdai.SIfc4.CIfcbsplinecurvewithknots.attributeKnots(null))))
				return (Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_ifcparametervalue).set(_context, get(jsdai.SIfc4.CIfcbsplinecurvewithknots.attributeKnots(null)))));
	}
	public int getUpperindexonknots(EIfcbsplinecurvewithknots type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getUpperindexonknots((EIfcbsplinecurvewithknots)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeUpperindexonknots(EIfcbsplinecurvewithknots type) throws SdaiException {
		return d3$;
	}

	//going through all the attributes: #5237=EXPLICIT_ATTRIBUTE('WeightsData',#5235,0,#7058,$,.F.);
	//<01> generating methods for consolidated attribute:  WeightsData
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: WeightsData, base type: LIST OF REAL
	public boolean testWeightsdata(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		return test_aggregate(a8);
	}
	public A_double getWeightsdata(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		return (A_double)get_aggregate(a8);
	}
	public A_double createWeightsdata(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		a8 = create_aggregate_double(a8, a8$, 0);
		return a8;
	}
	public void unsetWeightsdata(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		unset_aggregate(a8);
		a8 = null;
	}
	public static jsdai.dictionary.EAttribute attributeWeightsdata(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		return a8$;
	}

	//going through all the attributes: #5238=DERIVED_ATTRIBUTE('Weights',#5235,0,#7059,$);
	//<01> generating methods for consolidated attribute:  Weights
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// methods for attribute: Weights, base type: ARRAY OF REAL
	public boolean testWeights(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public A_double getWeights(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
		return getWeights((EIfcrationalbsplinecurvewithknots)null, _context).getDoubleAggregate(this);
	}
	public Value getWeights(EIfcrationalbsplinecurvewithknots type, SdaiContext _context) throws SdaiException {





//###-01 jc.generated_java: (new jsdai.SIfc4.FIfclisttoarray()).run(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_real).set(_context, get(a8$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0), Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcbsplinecurve.class).getAttribute(jsdai.SIfc4.CIfcbsplinecurve.attributeUpperindexoncontrolpoints(null), _context))
				return ((new jsdai.SIfc4.FIfclisttoarray()).run(_context, Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_real).set(_context, get(a8$)), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0), Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcbsplinecurve.class).getAttribute(jsdai.SIfc4.CIfcbsplinecurve.attributeUpperindexoncontrolpoints(null), _context)));
	}
	public static jsdai.dictionary.EAttribute attributeWeights(EIfcrationalbsplinecurvewithknots type) throws SdaiException {
		return d4$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = Integer.MIN_VALUE;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = 0;
			a3 = 0;
			a4 = 0;
			a7 = 0;
			return;
		}
		a0 = av.entityValues[1].getInteger(0);
		a1 = (AIfccartesianpoint)av.entityValues[1].getInstanceAggregate(1, a1$, this);
		a2 = av.entityValues[1].getEnumeration(2, a2$);
		a3 = av.entityValues[1].getLogical(3);
		a4 = av.entityValues[1].getLogical(4);
		a5 = av.entityValues[2].getIntegerAggregate(0, a5$, this);
		a6 = av.entityValues[2].getDoubleAggregate(1, a6$, this);
		a7 = av.entityValues[2].getEnumeration(2, a7$);
		a8 = av.entityValues[5].getDoubleAggregate(0, a8$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = Integer.MIN_VALUE;
			if (a1 instanceof CAggregate)
				a1.unsetAll();
			a1 = null;
			a2 = 0;
			a3 = 0;
			a4 = 0;
			a7 = 0;
			return;
		}
		a0 = av.entityValues[1].getInteger(0);
		a1 = (AIfccartesianpoint)av.entityValues[1].getInstanceAggregate(1, a1$, this);
		a2 = av.entityValues[1].getEnumeration(2, a2$);
		a3 = av.entityValues[1].getLogical(3);
		a4 = av.entityValues[1].getLogical(4);
		a5 = av.entityValues[2].getIntegerAggregate(0, a5$, this);
		a6 = av.entityValues[2].getDoubleAggregate(1, a6$, this);
		a7 = av.entityValues[2].getEnumeration(2, a7$);
		a8 = av.entityValues[5].getDoubleAggregate(0, a8$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcBSplineCurve
		av.entityValues[1].setInteger(0, a0);
		av.entityValues[1].setInstanceAggregate(1, a1);
		av.entityValues[1].setEnumeration(2, a2, a2$);
		av.entityValues[1].setLogical(3, a3);
		av.entityValues[1].setLogical(4, a4);
		// partial entity: IfcBSplineCurveWithKnots
		av.entityValues[2].setIntegerAggregate(0, a5);
		av.entityValues[2].setDoubleAggregate(1, a6);
		av.entityValues[2].setEnumeration(2, a7, a7$);
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRationalBSplineCurveWithKnots
		av.entityValues[5].setDoubleAggregate(0, a8);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcBoundedCurve
		// partial entity: IfcBSplineCurve
		av.entityValues[1].setInteger(0, a0);
		av.entityValues[1].setInstanceAggregate(1, a1);
		av.entityValues[1].setEnumeration(2, a2, a2$);
		av.entityValues[1].setLogical(3, a3);
		av.entityValues[1].setLogical(4, a4);
		// partial entity: IfcBSplineCurveWithKnots
		av.entityValues[2].setIntegerAggregate(0, a5);
		av.entityValues[2].setDoubleAggregate(1, a6);
		av.entityValues[2].setEnumeration(2, a7, a7$);
		// partial entity: IfcCurve
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcRationalBSplineCurveWithKnots
		av.entityValues[5].setDoubleAggregate(0, a8);
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcrationalbsplinecurvewithknotsWeightsgreaterzero(SdaiContext _context) throws SdaiException {
	


		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, (new jsdai.SIfc4.FIfccurveweightspositive()).run(_context, Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this))).getLogical());
	}
	public int rIfcrationalbsplinecurvewithknotsSamenumofweightsandpoints(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.SIfc4._st_list_2_real).set(_context, get(a8$))), Value.alloc(ExpressTypes.INTEGER_TYPE).sizeOf(Value.alloc(jsdai.SIfc4.CIfcrationalbsplinecurvewithknots.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcbsplinecurve.class).getAttribute(jsdai.SIfc4.CIfcbsplinecurve.attributeControlpointslist(null), _context)))).getLogical());
	}

	/*---- population dependent bound*/
}
