/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing EXPRESS function IfcDimensionsForSiUnit

package jsdai.SIfc4;
import jsdai.lang.*;


public class FIfcdimensionsforsiunit {
	
	// declaration of non-VAR parameters
	Value _nonvar__e_n;
	// end of declaration of non-VAR parameters


	public Value run(SdaiContext _context, Value _e_n) throws SdaiException {

		// initialization of non-VAR parameters
		_nonvar__e_n = Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).set(_e_n);
		// end of initialization of non-VAR parameters




																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "METRE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "SQUARE_METRE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "CUBIC_METRE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "GRAM")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "SECOND")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "AMPERE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "KELVIN")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "MOLE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "CANDELA")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "RADIAN")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "STERADIAN")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "HERTZ")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "NEWTON")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "PASCAL")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "JOULE")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "WATT")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "COULOMB")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "VOLT")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "FARAD")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 4)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "OHM")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "SIEMENS")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 3)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "WEBER")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "TESLA")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "HENRY")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "DEGREE_CELSIUS")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "LUMEN")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "LUX")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "BECQUEREL")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 1))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "GRAY")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else
																					if (Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, _nonvar__e_n,Value.alloc(jsdai.SIfc4.SIfc4._st_IfcSIUnitName).setEnum(_context, "SIEVERT")).getLogical() == 2) {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.NUMBER_TYPE).negation(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					} else {																						
		if (true) return Value.alloc(jsdai.SIfc4.CIfcdimensionalexponents.definition).set(_context, new jsdai.lang.Value(CIfcdimensionalexponents.definition).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0)).addParameter(Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 0))).check(_context, jsdai.SIfc4.CIfcdimensionalexponents.definition);
																					}


		return Value.alloc(ExpressTypes.GENERIC_TYPE).unset(); // if return is missing in express - add printing of error message?
	}

}
