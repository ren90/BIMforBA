/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcVirtualGridIntersection

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcvirtualgridintersection extends CEntity implements EIfcvirtualgridintersection {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcvirtualgridintersection.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected AIfcgridaxis a0; // IntersectingAxes - current entity - LIST OF ENTITY
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected A_double a1; // OffsetDistances - current entity - LIST OF REAL
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// IntersectingAxes - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected AIfcgridaxis a0;
	// OffsetDistances - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected A_double a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		changeReferencesAggregate(a0, old, newer);
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #6345=EXPLICIT_ATTRIBUTE('IntersectingAxes',#6343,0,#7202,$,.F.);
	//<01> generating methods for consolidated attribute:  IntersectingAxes
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: IntersectingAxes, base type: LIST OF ENTITY
	public static int usedinIntersectingaxes(EIfcvirtualgridintersection type, EIfcgridaxis instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testIntersectingaxes(EIfcvirtualgridintersection type) throws SdaiException {
		return test_aggregate(a0);
	}
	public AIfcgridaxis getIntersectingaxes(EIfcvirtualgridintersection type) throws SdaiException {
		return (AIfcgridaxis)get_aggregate(a0);
	}
	public AIfcgridaxis createIntersectingaxes(EIfcvirtualgridintersection type) throws SdaiException {
		a0 = (AIfcgridaxis)create_aggregate_class(a0, a0$,  AIfcgridaxis.class, 0);
		return a0;
	}
	public void unsetIntersectingaxes(EIfcvirtualgridintersection type) throws SdaiException {
		unset_aggregate(a0);
		a0 = null;
	}
	public static jsdai.dictionary.EAttribute attributeIntersectingaxes(EIfcvirtualgridintersection type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #6346=EXPLICIT_ATTRIBUTE('OffsetDistances',#6343,1,#7203,$,.F.);
	//<01> generating methods for consolidated attribute:  OffsetDistances
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// methods for attribute: OffsetDistances, base type: LIST OF REAL
	public boolean testOffsetdistances(EIfcvirtualgridintersection type) throws SdaiException {
		return test_aggregate(a1);
	}
	public A_double getOffsetdistances(EIfcvirtualgridintersection type) throws SdaiException {
		return (A_double)get_aggregate(a1);
	}
	public A_double createOffsetdistances(EIfcvirtualgridintersection type) throws SdaiException {
		a1 = create_aggregate_double(a1, a1$, 0);
		return a1;
	}
	public void unsetOffsetdistances(EIfcvirtualgridintersection type) throws SdaiException {
		unset_aggregate(a1);
		a1 = null;
	}
	public static jsdai.dictionary.EAttribute attributeOffsetdistances(EIfcvirtualgridintersection type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfcgridaxis)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[0].getDoubleAggregate(1, a1$, this);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			if (a0 instanceof CAggregate)
				a0.unsetAll();
			a0 = null;
			return;
		}
		a0 = (AIfcgridaxis)av.entityValues[0].getInstanceAggregate(0, a0$, this);
		a1 = av.entityValues[0].getDoubleAggregate(1, a1$, this);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcVirtualGridIntersection
		av.entityValues[0].setInstanceAggregate(0, a0);
		av.entityValues[0].setDoubleAggregate(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcVirtualGridIntersection
		av.entityValues[0].setInstanceAggregate(0, a0);
		av.entityValues[0].setDoubleAggregate(1, a1);
	}
}
