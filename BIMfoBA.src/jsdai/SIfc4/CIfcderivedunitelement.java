/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcDerivedUnitElement

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcderivedunitelement extends CEntity implements EIfcderivedunitelement {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcderivedunitelement.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // Unit - current entity - ENTITY IfcNamedUnit
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected int a1; // Exponent - current entity - INTEGER
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// Unit - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// Exponent - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected int a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3937=EXPLICIT_ATTRIBUTE('Unit',#3935,0,#4778,$,.F.);
	//<01> generating methods for consolidated attribute:  Unit
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : Unit, base type: entity IfcNamedUnit
	public static int usedinUnit(EIfcderivedunitelement type, EIfcnamedunit instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testUnit(EIfcderivedunitelement type) throws SdaiException {
		return test_instance(a0);
	}
	public EIfcnamedunit getUnit(EIfcderivedunitelement type) throws SdaiException {
		return (EIfcnamedunit)get_instance(a0);
	}
	public void setUnit(EIfcderivedunitelement type, EIfcnamedunit value) throws SdaiException {
		a0 = set_instance(a0, value);
	}
	public void unsetUnit(EIfcderivedunitelement type) throws SdaiException {
		a0 = unset_instance(a0);
	}
	public static jsdai.dictionary.EAttribute attributeUnit(EIfcderivedunitelement type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3938=EXPLICIT_ATTRIBUTE('Exponent',#3935,1,#2,$,.F.);
	//<01> generating methods for consolidated attribute:  Exponent
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	/// methods for attribute: Exponent, base type: INTEGER
	public boolean testExponent(EIfcderivedunitelement type) throws SdaiException {
		return test_integer(a1);
	}
	public int getExponent(EIfcderivedunitelement type) throws SdaiException {
		return get_integer(a1);
	}
	public void setExponent(EIfcderivedunitelement type, int value) throws SdaiException {
		a1 = set_integer(value);
	}
	public void unsetExponent(EIfcderivedunitelement type) throws SdaiException {
		a1 = unset_integer();
	}
	public static jsdai.dictionary.EAttribute attributeExponent(EIfcderivedunitelement type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Integer.MIN_VALUE;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInteger(1);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = Integer.MIN_VALUE;
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInteger(1);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDerivedUnitElement
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInteger(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcDerivedUnitElement
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInteger(1, a1);
	}
}
