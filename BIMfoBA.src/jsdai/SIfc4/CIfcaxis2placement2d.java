/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcAxis2Placement2D

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfcaxis2placement2d extends CIfcplacement implements EIfcaxis2placement2d {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfcaxis2placement2d.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	// LayerAssignment: protected Object  - inverse - java inheritance -  ENTITY IfcPresentationLayerAssignment
	// StyledByItem: protected Object  - inverse - java inheritance -  ENTITY IfcStyledItem
	// Location: protected Object a0;   Location - java inheritance - ENTITY IfcCartesianPoint
	// Dim: protected int  - derived - java inheritance -  INTEGER
	protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	protected Object a1; // RefDirection - current entity - ENTITY IfcDirection
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	// P: protected AIfcdirection  - derived - current -  LIST OF ENTITY
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// LayerAssignment - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i0$ = CEntity.initInverseAttribute(definition, 0);
	// StyledByItem - inverse - java inheritance
	// protected static final jsdai.dictionary.CInverse_attribute i1$ = CEntity.initInverseAttribute(definition, 1);
	// Location - explicit - java inheritance
	// protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	// protected Object a0;
	// Dim - derived - java inheritance
	// protected static final jsdai.dictionary.CDerived_attribute d0$ = CEntity.initDerivedAttribute(definition, 0);
	// RefDirection - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;
	// P - derived - current entity
	protected static final jsdai.dictionary.CDerived_attribute d1$ = CEntity.initDerivedAttribute(definition, 1);

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		super.changeReferences(old, newer);
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #5552=INVERSE_ATTRIBUTE('LayerAssignment',#5550,0,#5023,$,#5027,#9221,#9222,.F.);
	//<01> generating methods for consolidated attribute:  LayerAssignment
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #5553=INVERSE_ATTRIBUTE('StyledByItem',#5550,1,#5936,$,#5938,#9224,#9225,.F.);
	//<01> generating methods for consolidated attribute:  StyledByItem
	//<01-1> supertype, java inheritance
	//<01-1-2> inverse - generateInverseSupertypeJavaInheritedMethodsX()
	//going through all the attributes: #4952=EXPLICIT_ATTRIBUTE('Location',#4950,0,#3562,$,.F.);
	//<01> generating methods for consolidated attribute:  Location
	//<01-1> supertype, java inheritance
	//<01-1-0> explicit - generateExplicitSupertypeJavaInheritedMethodsX()
	// attribute (java explicit): Location, base type: entity IfcCartesianPoint
	public static int usedinLocation(EIfcplacement type, EIfccartesianpoint instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	//going through all the attributes: #4953=DERIVED_ATTRIBUTE('Dim',#4950,0,#2485,$);
	//<01> generating methods for consolidated attribute:  Dim
	//<01-1> supertype, java inheritance
	//<01-1-1> derived
	//<01-1-1-2> NOT explicit-to-derived - generateDerivedSupertypeJavaInheritedMethodsX
	// methods for derived attribute: Dim, base type: INTEGER
	public boolean testDim(EIfcplacement type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public Value getDim(EIfcplacement type, SdaiContext _context) throws SdaiException {




//###-01 jc.generated_java: Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(jsdai.SIfc4.CIfcplacement.attributeLocation(null))).getAttribute(jsdai.SIfc4.CIfccartesianpoint.attributeDim(null), _context)
				return (Value.alloc(jsdai.SIfc4.CIfccartesianpoint.definition).set(_context, get(jsdai.SIfc4.CIfcplacement.attributeLocation(null))).getAttribute(jsdai.SIfc4.CIfccartesianpoint.attributeDim(null), _context));
	}
	public int getDim(EIfcplacement type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return getDim((EIfcplacement)null, _context).getInteger();
	}
	public static jsdai.dictionary.EAttribute attributeDim(EIfcplacement type) throws SdaiException {
		return d0$;
	}

	//going through all the attributes: #3380=EXPLICIT_ATTRIBUTE('RefDirection',#3378,0,#3948,$,.T.);
	//<01> generating methods for consolidated attribute:  RefDirection
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : RefDirection, base type: entity IfcDirection
	public static int usedinRefdirection(EIfcaxis2placement2d type, EIfcdirection instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testRefdirection(EIfcaxis2placement2d type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfcdirection getRefdirection(EIfcaxis2placement2d type) throws SdaiException {
		return (EIfcdirection)get_instance(a1);
	}
	public void setRefdirection(EIfcaxis2placement2d type, EIfcdirection value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetRefdirection(EIfcaxis2placement2d type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeRefdirection(EIfcaxis2placement2d type) throws SdaiException {
		return a1$;
	}

	//going through all the attributes: #3381=DERIVED_ATTRIBUTE('P',#3378,0,#6827,$);
	//<01> generating methods for consolidated attribute:  P
	//<01-0> current entity
	//<01-0-1> derived attribute
	//<01-0-1-1> NOT explicit-to-derived - generateDerivedCurrentEntityMethodsX()
	// derived attribute: P, base type: entity IfcDirection
	public boolean testP(EIfcaxis2placement2d type) throws SdaiException {
			throw new SdaiException(SdaiException.FN_NAVL);
	}
	public AIfcdirection getP(EIfcaxis2placement2d type) throws SdaiException {
		SdaiContext _context = this.findEntityInstanceSdaiModel().getRepository().getSession().getSdaiContext();
			return (AIfcdirection) getP((EIfcaxis2placement2d)null, _context).getInstanceAggregate(this);
	}
	public Value getP(EIfcaxis2placement2d type, SdaiContext _context) throws SdaiException {



//###-01 jc.generated_java: (new jsdai.SIfc4.FIfcbuild2axes()).run(_context, Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_context, get(a1$)))
				return ((new jsdai.SIfc4.FIfcbuild2axes()).run(_context, Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_context, get(a1$))));
	}
	public static jsdai.dictionary.EAttribute attributeP(EIfcaxis2placement2d type) throws SdaiException {
		return d1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a0 = unset_instance(a0);
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a0 = av.entityValues[2].getInstance(0, this, a0$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a1 = unset_instance(a1);
			a0 = unset_instance(a0);
			return;
		}
		a1 = av.entityValues[0].getInstance(0, this, a1$);
		a0 = av.entityValues[2].getInstance(0, this, a0$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAxis2Placement2D
		av.entityValues[0].setInstance(0, a1);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPlacement
		av.entityValues[2].setInstance(0, a0);
		// partial entity: IfcRepresentationItem
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcAxis2Placement2D
		av.entityValues[0].setInstance(0, a1);
		// partial entity: IfcGeometricRepresentationItem
		// partial entity: IfcPlacement
		av.entityValues[2].setInstance(0, a0);
		// partial entity: IfcRepresentationItem
	}

	/*---------------------- methods to validate WHERE rules --------------------*/

	public int rIfcaxis2placement2dRefdiris2d(SdaiContext _context) throws SdaiException {
	





		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).OR(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).NOT(Value.alloc(ExpressTypes.BOOLEAN_TYPE).exists(Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_context, get(a1$)))), Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfcdirection.definition).set(_context, get(a1$)).getAttribute(jsdai.SIfc4.CIfcdirection.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2)))).getLogical());
	}
	public int rIfcaxis2placement2dLocationis2d(SdaiContext _context) throws SdaiException {
	




		return (Value.alloc(ExpressTypes.LOGICAL_TYPE).set(_context, Value.alloc(ExpressTypes.LOGICAL_TYPE).equal(_context, Value.alloc(jsdai.SIfc4.CIfcaxis2placement2d.definition).set(_context, this).groupReference(_context, jsdai.SIfc4.CIfcplacement.class).getAttribute(jsdai.SIfc4.CIfcplacement.attributeLocation(null), _context).getAttribute(jsdai.SIfc4.CIfccartesianpoint.attributeDim(null), _context), Value.alloc(ExpressTypes.INTEGER_TYPE).set(_context, 2))).getLogical());
	}
}
