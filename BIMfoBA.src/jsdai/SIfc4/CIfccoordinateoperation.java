/* Generated by JSDAI Express Compiler, version 4.3.2, build 500, 2011-12-13 */

// Java class implementing entity IfcCoordinateOperation

package jsdai.SIfc4;
import jsdai.lang.*;

public class CIfccoordinateoperation extends CEntity implements EIfccoordinateoperation {
	public static final jsdai.dictionary.CEntity_definition definition = initEntityDefinition(CIfccoordinateoperation.class, SIfc4.ss);

	/*----------------------------- Attributes -----------*/

/*
	protected Object a0; // SourceCRS - current entity - SELECT IfcCoordinateReferenceSystemSelect
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a1; // TargetCRS - current entity - ENTITY IfcCoordinateReferenceSystem
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
*/

	/*----------------------------- Attributes (new version) -----------*/

	// SourceCRS - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a0$ = CEntity.initExplicitAttribute(definition, 0);
	protected Object a0;
	// TargetCRS - explicit - current entity
	protected static final jsdai.dictionary.CExplicit_attribute a1$ = CEntity.initExplicitAttribute(definition, 1);
	protected Object a1;

	public jsdai.dictionary.EEntity_definition getInstanceType() {
		return definition;
	}

/* *** old implementation ***

	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}
*/


	protected void changeReferences(InverseEntity old, InverseEntity newer) throws SdaiException {
		if (a0 == old) {
			a0 = newer;
		}
		if (a1 == old) {
			a1 = newer;
		}
	}

	/*----------- Methods for attribute access -----------*/


	/*----------- Methods for attribute access (new)-----------*/

	//going through all the attributes: #3828=EXPLICIT_ATTRIBUTE('SourceCRS',#3826,0,#3129,$,.F.);
	//<01> generating methods for consolidated attribute:  SourceCRS
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// -2- methods for SELECT attribute: SourceCRS
	public static int usedinSourcecrs(EIfccoordinateoperation type, EEntity instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a0$, domain, result);
	}
	public boolean testSourcecrs(EIfccoordinateoperation type) throws SdaiException {
		return test_instance(a0);
	}

	public EEntity getSourcecrs(EIfccoordinateoperation type) throws SdaiException { // case 1
		return get_instance_select(a0);
	}

	public void setSourcecrs(EIfccoordinateoperation type, EEntity value) throws SdaiException { // case 1
		a0 = set_instance(a0, value);
	}

	public void unsetSourcecrs(EIfccoordinateoperation type) throws SdaiException {
		a0 = unset_instance(a0);
	}

	public static jsdai.dictionary.EAttribute attributeSourcecrs(EIfccoordinateoperation type) throws SdaiException {
		return a0$;
	}

	//going through all the attributes: #3829=EXPLICIT_ATTRIBUTE('TargetCRS',#3826,1,#3830,$,.F.);
	//<01> generating methods for consolidated attribute:  TargetCRS
	//<01-0> current entity
	//<01-0-0> explicit attribute - generateExplicitCurrentEntityMethodsX()
	// attribute (current explicit or supertype explicit) : TargetCRS, base type: entity IfcCoordinateReferenceSystem
	public static int usedinTargetcrs(EIfccoordinateoperation type, EIfccoordinatereferencesystem instance, ASdaiModel domain, AEntity result) throws SdaiException {
		return ((CEntity)instance).makeUsedin(definition, a1$, domain, result);
	}
	public boolean testTargetcrs(EIfccoordinateoperation type) throws SdaiException {
		return test_instance(a1);
	}
	public EIfccoordinatereferencesystem getTargetcrs(EIfccoordinateoperation type) throws SdaiException {
		return (EIfccoordinatereferencesystem)get_instance(a1);
	}
	public void setTargetcrs(EIfccoordinateoperation type, EIfccoordinatereferencesystem value) throws SdaiException {
		a1 = set_instance(a1, value);
	}
	public void unsetTargetcrs(EIfccoordinateoperation type) throws SdaiException {
		a1 = unset_instance(a1);
	}
	public static jsdai.dictionary.EAttribute attributeTargetcrs(EIfccoordinateoperation type) throws SdaiException {
		return a1$;
	}


	/*---------------------- setAll() --------------------*/

/* *** old implementation ***
	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}
*/

	protected void setAll(ComplexEntityValue av) throws SdaiException {
		if (av == null) {
			a0 = unset_instance(a0);
			a1 = unset_instance(a1);
			return;
		}
		a0 = av.entityValues[0].getInstance(0, this, a0$);
		a1 = av.entityValues[0].getInstance(1, this, a1$);
	}

	/*---------------------- getAll() --------------------*/

/* *** old implementation ***
	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCoordinateOperation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
	}
*/

	protected void getAll(ComplexEntityValue av) throws SdaiException {
		// partial entity: IfcCoordinateOperation
		av.entityValues[0].setInstance(0, a0);
		av.entityValues[0].setInstance(1, a1);
	}
}
